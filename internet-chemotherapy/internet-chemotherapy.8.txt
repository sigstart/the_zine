6/17 2018


   ___       _                       _   
  |_ _|_ __ | |_ ___ _ __ _ __   ___| |_ 
   | || '_ \| __/ _ \ '__| '_ \ / _ \ __|
   | || | | | ||  __/ |  | | | |  __/ |_ 
  |___|_| |_|\__\___|_|  |_| |_|\___|\__|
                                        
    ____ _                          _   _                                
   / ___| |__   ___ _ __ ___   ___ | |_| |__   ___ _ __ __ _ _ __  _   _ 
  | |   | '_ \ / _ \ '_ ` _ \ / _ \| __| '_ \ / _ \ '__/ _` | '_ \| | | |
  | |___| | | |  __/ | | | | | (_) | |_| | | |  __/ | | (_| | |_) | |_| |
   \____|_| |_|\___|_| |_| |_|\___/ \__|_| |_|\___|_|  \__,_| .__/ \__, |
                                                            |_|    |___/ 

                                                                   PART 8

                                   The IoT Battlefield: The Where and Why

 by Dr Cyborkian a.k.a. janit0r - conditioner of 'terminally ill' devices



Previous parts can be found at least here:

Original (Project Introduction): 
https://0x00sec.org/t/internet-chemotherapy/4664

Part 2 (ISPs: Lessons from the Rogers Hi-Speed Internet incident): 
http://depastedihrn3jtw.onion.to/show.php?md5=ee7136ac48fa59fba803b9fbcbc6d7b9 (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=ee7136ac48fa59fba803b9fbcbc6d7b9 (Tor)

Part 3 (ISPs: The baffling case of Optify/Keycom's mismanagement):
http://depastedihrn3jtw.onion.to/show.php?md5=7e7bfe406315f120d8ed325ffb87670b (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=7e7bfe406315f120d8ed325ffb87670b (Tor)

Part 4 (ISPs: The dirty case of Telkom South Africa)
http://depastedihrn3jtw.onion.to/show.php?md5=11830bc79a079f5b7be33bcca84641f6 (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=11830bc79a079f5b7be33bcca84641f6 (Tor)

Part 5 (The IoT Battlefield: Device Stability)
http://depastedihrn3jtw.onion.to/show.php?md5=8ca2bcadeb75137725557a24848d3c17 (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=8ca2bcadeb75137725557a24848d3c17 (Tor)

Part 6 (The IoT Battlefield: Mitigation Methods)
http://depastedihrn3jtw.onion.to/show.php?md5=2c822a990ff22d56f3b9eb89ed722c3f (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=2c822a990ff22d56f3b9eb89ed722c3f (Tor)

Part 7 (The IoT Battlefield: Default Passwords)
http://depastedihrn3jtw.onion.to/show.php?md5=a4232ae8f56034348323ab4483187abb (Clearnet)
http://depastedihrn3jtw.onion/show.php?md5=a4232ae8f56034348323ab4483187abb (Tor)




--[ 1 - Introduction

It's time for us to talk numbers. Specifically, we're talking vulnerable 
IoT device numbers because of two reasons:

1. The numbers tell us something about where the problem actually is
   (or was). Bricking counts provide an alternative metric for measuring 
   regional vulnerability. 

2. The numbers remind us of the severity of the problem. When we just 
   talk of a few hundred thousand hacked devices here and there it's
   easy to lose perspective of the big picture. The current state of 
   the IoT problem is more serious than is commonly understood.

Before we dive into the actual numbers we'll talk about the problems with 
my data. Given the general volatility of IoT devices and the networks 
they are hosted on it's not possible to provide completely accurate 
numbers. Margins of error have to be estimated for all device categories. 
For starters, 1-2% of my data is lost simply from my botnet device hosts 
rebooting before they've had a chance to transmit statistics to my 
logging server. Measuring device timeouts (my common metric for whether 
or not a bricking payload worked or not) is also not an exact science, 
and a connection between a router in Brazil and an IP Camera in Taiwan 
can get disrupted for various reasons (temporary routing problem, network 
link saturation, IDS kicking in, rodent chewing on wiring, etc). With
soft bricking payloads the same device can appear multiple times in the 
statistics on different IPs. Significant chunks of older payload 
transaction data is also missing from the database due to it not having 
been imported to my new setup yet. And yes, even the geolocation is 
imperfect. 

In spite of all these issues we'll try to establish some reasonable 
margins of error for different device categories. Once we have the 
baseline numbers, we'll see what they tell us. The numbers will answer 
questions such as which countries actually have an IoT problem, and 
where government (and other) interventions might make the biggest 
difference. I'll also speculate a bit about the reasons for why things
are the way they are.

In an attempt to provide more meaningful statistics and to better account
for the margins of error I've categorized the payloads based on the 
expected outcome. The types are:

* Hard-bricking: These payloads are expected to brick a device in a way
  which is difficult to repair without specialist equipment.

* Soft-bricking: These payloads will disable a device in a way which the
  owner can fix through a factory reset and reconfiguration. There's
  a reasonable possibility of the device returning online in a vulnerable 
  state.
  
* Mixed: These payloads have outcomes which can be either hard-bricking
  or soft-bricking depending on the firmware. 
  
* SOAP: These payloads mainly belong to the messy CVE-2016-10372 
  (TR069/TR064) dataset with mixed outcomes, but as of December 2017
  the dataset also contains CVE-2014-8361 (Realtek SDK RCE) and
  CVE-2017-17215 (Huawei RCE) device transactions. 
  
* Secured: These devices were feasibly secured (rather than bricked)
  in a way where the device continued operating normally.

* Minimal: A minimal attempt to block a vulnerable account's access was 
  made, at best only effective until the next reboot. Duplicates highly
  likely.

The numbers of Hard-bricked and Secured devices should generally be 
reliable (within 5% margin of error). The other numbers are likely to 
involve more duplicates and related issues.


--[ 2 - The problems with my data

Those of you who've been reading my previous articles should have 
a good understanding of the data duplication risks when collecting 
payload metrics. In this section I'll discuss common issues with the 
accuracy of some of the less reliable payload types, and I'll add
some detail to types that I've not discussed before.


--[ 2.1 - The problems with Soft-bricking and Mixed payloads

For the reliability of Hard-bricking, Soft-bricking and Mixed payload 
types I've already offered some background in Part 6 (but also in Parts
4 and 7). The hard-bricking payloads are generally effective, and the 
total numbers of these should not be too inaccurate. Soft-bricking 
payloads are harder to enumerate as the device owner or a maintenance
person could reconfigure the unit through a factory reset and then the 
same device might reappear on a new IP and end up soft-bricked again 
(thus counted more than once). My best guess is that soft-bricked device 
numbers are about 15-20% inflated with such duplicates, but to be 
conservative one could even assume 40%. Mixed payloads fall in between
soft-bricked and hard-bricked payloads, where some devices and firmwares 
will end up hard-bricked and others soft-bricked. My guess is that the 
Mixed numbers are probably 10-15% inflated. The discussions of such 
payloads and affected devices in my previous Internet Chemotherapy
articles have probably given you a framework for venturing your own
guess.

Considering the likelihood of some of the numbers being inflated you
might wonder why I'm nonetheless using the total unique IP:port counts
for types such as the soft-bricking payloads. The reason is simple - 
we're not trying to quantify the IoT problem through 'certified kill 
counts' (or any such puerile metric) but rather by probable device 
disruption events. Whenever a device gets soft-bricked it would be 
incorrect to conclude that nothing has actually happened even if someone 
eventually manages to get it back online in a vulnerable state. 
Some combination of time, money, opportunity and goodwill were probably 
lost in the process, and therefore it's valid to account for such events 
in our IoT vulnerability metrics as a measurement of the IoT problem.

I've drawn the line of which payloads to count at ones which simply 
rendered a device unusable until it was rebooted (basically a 'route del 
default' payload), as such outcomes are trivially cleared by the device 
owner. Accordingly such events are ignored in the accumulated statistics.


--[ 2.2 - Problems with the SOAP data

The way I've handled metrics collection for the SOAP (especially TR069/
64) payloads is a great study in how NOT to do data collection. For much 
of its lifecycle the SOAP dataset has been a mess. I'll discuss the many 
mistakes I've made in the hopes that you'll never repeat them yourself.

In terms of data collection my SOAP effort went wrong from the start.
At first, I put together a quick crude test payload for CVE-2016-10372
back in November 2016 which simply attempted to remove a vulnerable 
device's default routes to bring it offline until the next reboot. Then 
I decided to log absolutely everything. The data rate from the detailed 
logging of millions of TR069/64 transactions was immediately 
overwhelming, and by mid-December 2016 I was so worried about the logging 
traffic standing out and setting up my C2 for a correlation attack that I 
stopped logging altogether (next mistake). The obvious problem with this 
new approach was that since I no longer was directly measuring the 
payload's performance I had no clue if it was still doing anything 
useful. I was stuck assessing its effect purely based on the data of a 
popular third party botnet tracker which had showed TR069/64 activity
declining rapidly. From this ignorant vantage point I then decided to get
rid of the payload altogether in early January 2017 on the assumption 
that it had served its purpose (and had a near-zero signal to noise 
ratio). 

Three months later (around mid-April 2017) I was dismayed to learn of 
an unnamed botnet that was still exploiting CVE-2016-10372 and using the
exploit for attacking Wordpress sites. This was perhaps the most 
important lesson I learned during the entire project: there are no
quick fixes or shortcuts when dealing with diverse device pools. You 
have to do your research, write payloads, collect data, and then be 
prepared to keep revising what you have for months to come. If you 
try to apply a quick fix on a complex problem without measuring the
outcome you could even make things worse - blackhats with honeypots 
will quickly see what you're trying to do and they'll eventually figure
out anything that you've missed. And even if you manage to completely 
clean a corridor of the Internet one day there's no guarantee that it 
won't be dirty again two weeks later.

By April I had revised my C2 logging protocol and so it made sense to 
create a few new iterations of the TR069/64 payload (now preferentially 
trying to brick devices instead of just temporarily disabling their 
default routes). My new logging protocol was collecting basic key 
metrics (such as if a particular IP transaction had ended in a device 
timeout or if the device was still active afterwards) and the traffic 
rate for collecting statistics was far more manageable. I was committed 
to cleaning up the remaining vulnerable TR069/64 device pools no matter 
how long it'd take. 

For a while it seemed like everything was going well. I kept researching 
devices which appeared to be immune to my existing CVE-2016-10372 
bricking payloads and found alternative approaches for disabling quirky 
TR069/64 implementations. I discovered that many routers that weren't 
vulnerable to the NTP RCE would still execute valid SOAPActions without 
requiring authentication (and this of course made them vulnerable to MITM 
attacks etc). As I kept adding tweaks and variations to my payload over 
the following weeks I ended up making my next significant mistake.

By July 2017 I was stuffing more and more variations into the TR069/64 
bricking sequence itself, and by early August I was already adding 
things like RomPager DoS attempts (because I noticed a lot of the 
TR069-listening devices appeared vulnerable to it) and even shellshock 
payloads (because the more the merrier, right?). This might've made sense 
from an operational efficiency point of view (just throw everything that 
half makes sense at a vulnerable service in the hope that something 
sticks) but from a metrics collection point of view my database was 
quickly devolving into a mess. Since I wasn't logging exactly at which 
point a device had stopped responding I had no way of knowing if a device 
went offline because of inappropriate SOAP validation checks, a RomPager 
DoS condition etc. and now I could no longer see the trees from the 
forest well enough to classify them. As a result of this short-sighted 
design decision there's a complete lack of granularity in the SOAP data 
from August 2017 onward.

A basic timeline of the TR069 SOAP payload development was: 

Nov 2016: A simplistic 'route del default' payload (CVE-2016-10372)
Jan 2017: Payload was mothballed on the incorrect assumption that it had 
          served its purpose.
Apr-May 2017: Payload v2 developed, iterations of bricking payloads 
              against CVE-2016-10372
Jun-Jul 2017: Additional SOAPActions to mitigate devices which were 
              vulnerable to unauthenticated reconfiguration attacks,
              but not vulnerable to CVE-2016-10372 (WAN interface 
              disabling).
Jul 25 2017: Dedicated campaign 'TR069 World Tour' against all
             exposed TR069 interfaces on the Internet began. 
Aug 2017: Opportunistic Shellshock, Misfortune Cookie DoS etc added to 
          payload.

Although I believe my 'TR069 World Tour' was an operational success (a 
large number of vulnerable SOAP interfaces were permanently removed from
the Internet in 2017) it's difficult to make full sense of the numbers 
afterwards. The total number of unique IP:port transactions which ended 
in a timeout were in excess of 68 million just for my SOAP logging
window of April 2017 - April 2018, and even for the brief November 2016 - 
December 2016 logging window with the naive 'route del default' payload
the unique IP:port transaction counts exceeded 16 million. I'm not even 
remotely going to attempt quantifying such absurdly large numbers. 
Instead, as a very basic initial filter we'll only consider subnets where 
there was a total decline in vulnerable interfaces corresponding with my 
2017 campaigns (as this serves as a strong indicator of a janitorially 
beneficial outcome). Specifically, as a data filter I'm removing all /16 
subnets for which there were 5 or more TR069 hits at any point in 2018. 
Although this filter is arguably unfairly harsh (and there will be false 
negatives) applying the aggressive subnet filter brings our total SOAP
count to a conservative 11.7 million unique IP:ports for the 2017 data.
Filtering all TR069 payload transactions against ports other than 7547
and 5555 brings this total down further to 9.5 million, and we'll use 
this watered down metric in our upcoming charts (here the assumption is
that if my TR069 payload was executed against any other ports than 7547 
or 5555 it was triggered by the server version string 'RomPager/4.07 
UPnP/1.0' and therefore any resulting timeouts would've probably been 
related to a DoS based on Misfortune Cookie CVE-2014-9222 which was at 
most a nuisance for the device owner and ISPs).

In summary, the key lessons of my bungled SOAP payload statistics 
collection were:

* Always measure the basic performance metrics of your payload. It's
  essential to keep track of whether it worked as expected or not.

* Keep reviewing transactions which did not work as expected.

* If your payload contains more than one attack vector, be sure to 
  collect enough information to understand which part of the payload 
  was the effective part.

* Find the right balance between collecting enough data and collecting
  too much data. A significant traffic spike on your C2 could set you up 
  for a correlation attack. This matters mainly for transactions against
  huge device pools (such as TR069 in 2016 and 2017).


--[ 2.3 - Third party TR069 observations 

Considering the above weaknesses in my own ability to carry out a post-
mortem on my TR069 data it may be useful to look at third party 
measurements of the decline in exposed TR069/064 device pools. Perhaps 
the most interesting one out there right now is the recently published 
report by SEC Consult at the following URL:

https://www.sec-consult.com/en/blog/2018/05/tr-069-iot-before-it-was-cool/

The SEC Consult report (based on Censys data) provides an interesting
alternative view of the effects of the 'TR069 World Tour' which began at 
the end of July 2017. Some comments on the report:

* The report mentions TR069 being a potential vector in the case of 
  Sierra Tel, but this is not correct. The exploit vector for these 
  routers was a default Zyxel backdoor account (Broadcom telnet CLI).
  Such poorly implemented Broadcom stacks were the primary Mirai 
  battleground of 2017.

* The report's graph correlates the Devil's Ivy gSOAP vulnerability with 
  the device decline in July-August 2017, but this is a spurious 
  correlation. None of the affected ISPs ran TR069/64 stacks involving
  gSOAP, and remote exploitation of Devil's Ivy on a large scale would
  be cumbersome due to the large amounts of uninterrupted bandwidth 
  required to complete the attack.
  
The SEC Consult report suggests that between July-August there was a 
decline of around 20 million TR069/064 exposed device interfaces 
worldwide, which if accurate suggests that my own TR069/064 dataset's 
filtering rules are overly aggressive. However, if I presented my raw 
unfiltered unique IP:port numbers (which exceeded 68 million for April 
2017 - April 2018) I could be exaggerating the actual count by as much 
as a factor of two due to IDS effects and the timeouts caused by 
device/service crashes (i.e the Misfortune Cookie DoS portion of the 
payload - the total of unique TR069 payload executions against only 
ports 7547 and 5555 was 57 million). For now I will stick with my 
conservative filter as I think it tells an important story even as-is, 
but if I have the time I'll attempt to create a more accurate curated
filtering model for my final whitepaper and revise the SOAP numbers 
accordingly. 

The SEC Consult report's time window is cut off after October 2017 and 
a few lingering questions remain uncorroborated (such as the one about 
Algeria which I'll discuss later).


--[ 2.4 - The problems with the Minimal dataset

The devices falling under the Minimal category are typically devices with
a vulnerable account with weak access privileges. For these devices I've
not found any effective mitigations except for locking the account down
temporarily until the next device reboot. Although I expect this dataset
to have a lot of duplicates (same device counted more than once) the 
overall number of devices falling under this category is fortunately 
relatively small and as such these devices don't alter the big picture
by much.


--[ 2.5 - The problems with my geolocation data

I'm using a basic geolocation database from July 2017 for converting IPv4
addresses to countries. As such some % of error in the geolocation is 
likely, although I would not expect it to be significant. AfriNIC data 
seems most affected by quality issues, so expect a 2-3% variance on this 
continent with Mauritius as an extreme outlier. Based on random sampling 
other regions seem reasonably accurate for networks with notable IoT 
device issues, and I would expect less than a 1% margin of error with the 
geolocation of these.

 
--[ 3 - Total numbers of bricked devices per country

Due to the SOAP dataset being inconclusive I'm reluctant to combine the
different categories into a single total, but since my SOAP filtering is
excessively conservative there should at least not be a general risk of 
overrepresentation (with the exception of Algeria, Tunisia and Mauritius
which I'll discuss in the footnotes). These SOAP totals also do not 
include any of the November 2016 - December 2016 hits since a 'route del 
default' payload which can be cleared with a device reboot is more of an 
annoyance than a genuine disruption event.

With these caveats in place, here is a table of the total unique IP:port 
bricking counts with footnotes:

                                        Hard          Soft   
 #  Country        *    Total Secured  Brick  Mixed  Brick    SOAP Miniml

  1. India        *1  3697911   22832 302089 153977 887503 2295780  35730
  2. China            1531963    3813 365500  91680 595120  382841  93009
  3. Brazil           1233109  221148 305445  53285 148300  499693   5238
  4. Algeria      *2  1185932       0    352    889   1471 1183220      0
  5. Russia           1177883   10882 837231  35069  43347  250783    571
  6. Iran         *3   859081   11822  63836  11550  28415  714535  28923
  7. Pakistan          737693  225440 155731   1511 196278  157458   1275
  8. Tunisia      *2   728916       5  43795   1174   3121  680816      5
  9. Vietnam           575728     773 211195 156768  99992  103062   3938
 10. Indonesia    *3   555242    6295  31147  63918  10667  443031    184
 11. United States     480501   17409  72975  52069 121642  215383   1023
 12. Argentina         414704    8794  39056  23157 148310  195151    236
 13. The Philippines   395658     128  31104   6808  24412  333184     22
 14. Mexico            335276     539  26712 116839  70493  120642     51
 15. South Africa  *5  326448    1878  83084  11049  29096  198536   2805
 16. Turkey            296141     411 112976  44542  58903   76600   2709
 17. Thailand          242012    9788  46455 101141  62403   21173   1052
 18. South Korea       236946     106  28907   6227  44489  157088    129
 19. Australia         213363   17228  36954  12361  24147  120891   1782
 20. Italy             211060    5178  74364  35453  42179   53765    121
 21. Taiwan            201728     310  57425 100899  22219   18230   2645
 22. Malaysia          169027     129  15615 111133  33770    8184    196
 23. Venezuela         161943     476  13576   4444   2884  140491     72
 24. Spain             156012   10322  73446   9400  25187   37480    177
 25. Ecuador           146515    1884   1075   4522   2322  136700     12
 26. Colombia          140254    1707  26337   9103  25165   77641    301
 27. Great Britain *4  133907   12895  21995  16436  25389   57099     93
 28. Egypt             126901     186  19714   9948   8604   87542    907
 29. Sri Lanka         116198       4   6526  88423  20148     999     98
 30. Ukraine           118386   13987  47577   7597  22115   26792    318
 31. Hungary           111270    1282   5962  16088   5509   82126    303
 32. Japan             100805      85   4279   1722   1866   89252   3601
 33. Jamaica            97469      13  64529   1598   1022      33  30274
 34. France             94631    2705  21448   9504  28231   32519    224
 35. Romania            90088     561  28652  15722  20816   24190    147
 36. Peru               86735     320  57077   4736  15779    8818      5
 37. Mauritius     *6   84508     457   5968   7908   2197   67938     40
 38. Israel             80584      21  12504  49658   8065   10279     57
 39. Poland             79641    7301  19563   9185  30302   13217     73
 40. Nepal              75142     890    463     49    165   73540     35
 41. Germany       *4   66783     367  12966   9424  14523   29477     26
 42. Greece             66032      79   3369  22955   7263   32358      8
 43. Canada             60896    1544  26171   5525   9961   17662     33
 44. Morocco            54352      12  31760   7578  13015    1904     83
 45. Syria              40511       5   2200    258    111   37935      2
 46. Portugal           39946      67   3487   4603  22476    9308      5
 47. Chile              38291     323  18589   3545  13812    1943     79
 48. Uruguay            38074     789   5319  21128   5947    4687    204
 49. Costa Rica         36191     136  10897   2372   3558   19201     27
 50. Slovakia           32191    1078   1233    751   2247   26880      2

Notes:

*1: The SOAP numbers for India may look suspect but I believe they are 
    reasonably accurate. Consider the TR069 numbers for the first few 
    months of my logging period starting April of 2017:
    
    Month          TR069 
    
    2017-04        72032
    2017-05       333885
    2017-06      1137776
    2017-07      1857502
    2017-08         3337
    2017-09         7674
    
    Although the numbers were relatively high already in June 2017 the
    real breakthrough in cleaning the Indian network space came with the
    July addition of interface-disabling SOAPActions which effectively 
    soft-bricked modems from local vendors such as Syrma, Teracom, and 
    Supernet. During 7/25 - 7/27 a total of 1.34 million unique IP TR069 
    transactions (which resulted in a timeout) were logged for the Indian 
    network space, resulting in all the large Indian ISPs applying a 
    network-wide filter for port 7547. Bizarrely BSNL also decided to 
    filter port 22 both inbound and outbound (yes, you heard that right: 
    inept BSNL netadmins superstitiously blocked even outbound SSH for 
    millions of their users!).
    
    Much could be written about my dealings with BSNL over the past year 
    and the utter incompetence of the netadmins who captain this gigantic
    rudderless floating turd through cyberspace. If I have the time to 
    get back to writing about ISP security screw-ups BSNL will be a 
    generous case study. My follow-up campaigns against BSNL dealt with 
    vulnerabilities in other local vendor hardware, and for a teaser of
    how absurd things got see this interview with a BSNL 'Principal 
    General Manager' in The Hindu from 9/6 2017:
   
    http://www.thehindu.com/news/cities/Hyderabad/botnet-chokes-many-bsnl-broadband-customers/article19631701.ece

    
*2: Both Algeria and Tunisia would hardly rank at all if it weren't
    for the high SOAP numbers. Devices in these countries have been 
    a frequent feature in the monthly unique IP:port reports for
    TR069/64 based timeouts, but due to the large number of diverse
    vectors in the SOAP payload from August 2017 onward it's difficult 
    to establish the cause. The monthly unique IP:ports for SOAP 
    timeouts in Algeria were as follows:
    
    Month      Algeria 
    
    2017-04      83870  
    2017-05       2707  
    2017-06         35  
    2017-07      44651  
    2017-08     423938  
    2017-09     778834  
    2017-10    1076721  
    2017-11     643172  
    2017-12      18069  
    2018-01          7  
    2018-02       2209  
    2018-03       2032  
    2018-04       1919  
    
    The results for Algeria plummet around November 16th, signifying that 
    some kind of filter may have been applied. I lack the language 
    skills to determine what (if anything) occured in this market, but
    the general timeout count profile makes sense relative to the TR069
    payload development (initial peak with April's hard-bricking 
    CVE-2016-10372 payloads, small rebound with the interface-disabling
    SOAPActions in July, and significant jump in August after RomPager
    DoS added). My best guess is that the majority of the Algeria 
    timeouts result from Misfortune Cookie-related device crashes (and 
    arguably should not be listed at all in a curated list). The story
    of Tunisia is similar. 
  
*3: In general many of the high SOAP counts in the April 2017 - April 
    2018 database were a result of the 'TR069 World Tour.' Besides India, 
    countries such as Iran and Indonesia were significantly impacted from
    the new interface-disabling SOAPActions between late July and August.
    The monthly unique IPs for SOAP transactions which resulted in a 
    device timeout for these two countries were:
    
    Month            Iran      Indonesia
    
    2017-07        462545         327789
    2017-08        101745          82484
    2017-09         21093            232
    2017-10         10642            292
    2017-11          5822            268
    
*4: Both Germany and Great Britain featured heavily in the Nov 2016 - 
    Dec 2016 SOAP dataset, and these countries would have ranked much 
    higher if the 'route del default' devices had been accounted for.
    Even so it's probably correct to completely ignore payload 
    transactions which could be fixed with a simple device reboot as 
    such payloads were mainly a minor nuisance to the device owners and 
    ISPs. 

*5: South Africa is a good example of the downside of the more aggressive 
    SOAP dataset filtering. In the filtered dataset very few of the 
    vulnerable Telkom Aztech modems were present as the ISP has simply 
    chosen to bleed the problem out rather than fix it professionally 
    through ACLs. As you can see from Part 4 there's still been a small
    number of vulnerable units on the Telkom network this year, and as 
    such most of the Telkom subnets were filtered out as unfixable false 
    positives. I've manually corrected South Africa's SOAP numbers
    to the correct figure of 198536 (with the strict filter the total 
    would have been 83075). Other countries with negligent ISPs may also 
    be equally underrepresented in the total numbers due to such 
    filtering dynamics. 

*6: Geolocation issue. Several of the subnets which are tagged Mauritius
    have been transferred to other countries during the project span. The
    actual Mauritius numbers are a fraction of the ones listed here, and
    therefore Mauritius will be ignored in any additional analyses.

Those of you who compare these numbers with the ones in Part 7 may wonder 
why for example Part 7 lists 197k hits for the Dahua exploit in Vietnam 
(classified as a Soft brick here) and here we're just listing a total of 
99992 hits altogether for the Soft bricking category. The reason for the 
seeming discrepancy is that in Part 7's Dahua stats I was counting unique 
IP:port transactions which yielded a hash via CVE-2017-7927. I'm 
discussing this distinction in more detail in Part 7.


--[ 4 - Weighed interpretations

Estimating the total numbers is beneficial because it allows us to filter
out countries with less relevant global device footprints, but when we're
trying to understand the actual impact to any specific country the totals
are an incomplete metric. In order to better understand the relative 
impact of the vulnerable IoT device problem we will proportionalize the 
numbers to country Internet populations and GDPs by using the following 
three data sources:

1. Wikipedia's List of countries by number of broadband subscriptions 
from 2014 (almost certainly out of date due to the age of the statistics 
provided by the International Telecommunications Union):

https://en.wikipedia.org/wiki/List_of_countries_by_number_of_broadband_Internet_subscriptions

2. Wikipedia's List of countries by number of Internet users from 2016
(includes estimate of persons who accessed the Internet in the last 12
months from any device):

https://en.wikipedia.org/wiki/List_of_countries_by_number_of_Internet_users

3. Wikipedia's List of countries by nominal GDP (IMF values):

https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)

We'll filter out Mauritius (due to the geolocation issue) and countries 
with less than 100k total hits for three new proportional charts. First,
let's look at the country rankings proportional to the official number of 
broadband Internet subscribers (2014):

                       Bricks per 1M     Broadband
  #  Country          Broadband Subs      Subs (M)      Ratio  
  
  1. Tunisia (Unreliable)  1457832.0           0.5     145.8%
  2. Algeria (Unreliable)  1078120.0           1.1     107.8%
  3. South Africa           296770.9           1.1      29.7%
  4. Sri Lanka              290495.0           0.4      29.0%
  5. Iran                   268462.8           3.2      26.8%
  6. Pakistan               245897.7           3.0      24.6%
  7. India                  203181.9          18.2      20.3%
  8. Indonesia              185080.7           3.0      18.5%
  9. Ecuador                183143.8           0.8      18.3%
 10. The Philippines        172025.2           2.3      17.2%
 11. Vietnam                127939.6           4.5      12.8%
 12. Argentina               90153.0           4.6       9.0%
 13. Venezuela               85233.2           1.9       8.5%
 14. Malaysia                70427.9           2.4       7.0%
 15. Brazil                  67383.0          18.3       6.7%
 16. Thailand                57621.9           4.2       5.8%
 17. Russia                  57178.8          20.6       5.7%
 18. Egypt                   55174.3           2.3       5.5%
 19. Hungary                 48378.3           2.3       4.8%
 20. Australia               38793.3           5.5       3.9%
 21. Colombia                36908.9           3.8       3.7%
 22. Taiwan                  36677.8           5.5       3.7%
 23. Turkey                  35254.9           8.4       3.5%
 24. Ukraine                 31581.7           3.6       3.2%
 25. Mexico                  26609.2          12.6       2.7%
 26. Italy                   15634.1          13.5       1.6%
 27. Spain                   13474.1          11.4       1.3%
 28. South Korea             12877.5          18.4       1.3%
 29. Great Britain            5965.7          21.5       0.6%
 30. United States            5460.2          88.0       0.5%
 31. China                    4342.3         352.8       0.4%
 32. Japan                    2839.6          35.5       0.3%

When we look at bricking counts relative to the number of broadband 
Internet subscribers Algeria and Tunisia become particularly prominent
outliers due to the large number of SOAP hits. The broadband subscriber
stats are from 2014 and as such it's likely that the number of 
subscribers was higher in 2017, but either way it looks like virtually 
every broadband device in these two countries could have been affected. 
As I said before I'm not entirely clear what may or may not have occured 
with these two countries due to the language barrier and due to the 
unclear metrics for the SOAP dataset especially from August 2018 onward. 
I suspect the Algeria and Tunisia numbers may be primarily RomPager DoS 
results which would've caused the devices to continously crash and 
restart. It's best to treat the figures for these two countries with 
suspicion in any case.

Astonishingly it also seems like perhaps up to 1/3 of all broadband
subscribers in South Africa and Sri Lanka may have been affected by
some kind of bricking event over the past year. As significant as that
sounds it's worth remembering that a lot of Internet users in ZA 
are on cell phone data plans (rather than broadband) and that the
brickings in Sri Lanka were mainly against CCTVs and DVRs.

For a different perspective, let's look at the country rankings 
relative to the total size of the Internet using population:

                         Hits per 1M      Internet
  #  Country          Internet Users     Users (M)      Ratio  

  1. Tunisia (Unreliable)   125675.2           5.8      12.6%
  2. Algeria (Unreliable)    68157.0          17.4       6.8%
  3. Pakistan                24589.8          30.0       2.5%
  4. Iran                    20119.0          42.7       2.0%
  5. Sri Lanka               17343.0           6.7       1.7%
  6. Ecuador                 16462.4           8.9       1.6%
  7. Hungary                 14450.6           7.7       1.4%
  8. Argentina               13464.4          30.8       1.3%
  9. Vietnam                 13084.7          44.0       1.3%
 10. South Africa            10809.5          30.2       1.1%
 11. Taiwan                  10730.2          18.8       1.1%
 12. Russia                  10708.0         110.0       1.1%
 13. Australia               10017.0          21.3       1.0%
 14. Brazil                   9952.5         123.9       1.0%
 15. India                    9452.7         391.2       0.9%
 16. Venezuela                8568.4          18.9       0.9%
 17. Indonesia                8387.3          66.2       0.8%
 18. Thailand                 7401.0          32.7       0.7%
 19. The Philippines          6905.0          57.3       0.7%
 20. Malaysia                 6871.0          24.6       0.7%
 21. Turkey                   6382.3          46.4       0.6%
 22. Italy                    5798.4          36.4       0.6%
 23. South Korea              5030.7          47.1       0.5%
 24. Colombia                 4956.0          28.3       0.5%
 25. Ukraine                  4879.6          23.3       0.5%
 26. Mexico                   4417.3          75.9       0.4%
 27. Spain                    4118.1          37.3       0.4%
 28. Egypt                    3384.0          37.5       0.3%
 29. Great Britain            2055.5          62.4       0.2%
 30. China                    2051.6         746.7       0.2%
 31. United States            1958.0         245.4       0.2%
 32. Japan                     857.9         117.5       0.1%

When we rank the number of brickings against the number of Internet users 
it's interesting to note that perhaps as many as 1% of the Internet-using 
population may still have been affected by the Internet Chemotherapy 
project at some point. As we're only counting unique IP bricking 
transactions which result in device timeouts it's even possible that the 
number of affected downstream users is higher, the extreme example being 
that of Venezuela where day 1 of my LACNIC fall cleanup took out cell 
phone connectivity for millions of people. 

Perhaps the most significant takeaway from the population-weighed charts
is that they neatly explain the seeming 'unsolvability' of the IoT 
problem. Western countries have been on the receiving end of costly
DDoS attacks from botnets that were made possible by the (perhaps even
deliberately) poor security standards of the IoT devices, yet relatively 
few of these vulnerable devices actually exist on our own networks. 
Most of the vulnerable device pool is/was hosted in countries which 
simply didn't overlap with ours in terms of language or jurisdiction. The 
primary manufacturing regions of these devices (essentially China, but 
also South Korea) are also relatively unaffected by the problem 
relative to their population sizes. 

This juxtaposition becomes even starker when we chart the number of 
unique IP:port bricking hits (in this context essentially a measurement 
of vulnerable device availability) against country GDPs:

                         Hits per MM        GDP in
  #  Country             of GDP (US$)       MM US$ 
  
  1. Tunisia (Unreliable)    18087.2          40.3
  2. Algeria (Unreliable)     6651.3         178.3
  3. Vietnam                  2612.2         220.4
  4. Pakistan                 2426.6         304.0
  5. Iran                     1988.6         432.0
  6. Ecuador                  1432.2         102.3
  7. India                    1416.3        2611.0
  8. Sri Lanka                1326.5          87.6
  9. The Philippines          1262.5         313.4
 10. Ukraine                  1040.2         109.3
 11. South Africa              934.6         349.3
 12. Russia                    771.1        1527.5
 13. Venezuela                 770.8         210.1
 14. Hungary                   730.6         152.3
 15. Argentina                 650.0         638.0
 16. Brazil                    600.1        2055.0
 17. Indonesia                 546.8        1015.4
 18. Malaysia                  537.4         314.5
 19. Egypt                     535.2         237.1
 20. Thailand                  531.4         455.4
 21. Colombia                  453.6         309.2
 22. Turkey                    348.6         849.5
 23. Taiwan                    348.2         579.3
 24. Mexico                    291.7        1149.2
 25. Australia                 154.7        1379.5
 26. South Korea               154.1        1538.0
 27. China                     127.5       12014.6
 28. Spain                     116.9        1314.0
 29. Italy                     108.9        1938.0
 30. Great Britain              48.9        2624.5
 31. United States              24.8       19390.6
 32. Japan                      19.5        5167.1

Regardless of how the figures are proportionalized both the IoT 
manufacturing countries (which produce the devices) and the Western 
countries (which are receiving costly DDoS attacks) tend to sit firmly 
at the bottom of the list. 

Thus one core dynamic of the IoT problem is the disconnect between the
manufacturing nations (relatively unaffected by the vulnerable device 
problem directly) and the West (an indirect victim in the form of DDoS 
attacks, but not a significant source of the problem). Between these 
two blocks sit a diverse mosaic of countries and jurisdictions whose 
underprotected networks serve as fertile soil for the easily exploitable 
devices.

Even for these seemingly affected bridging jurisdictions the IoT problem 
isn't particularly significant in financial terms - take for example 
Mexico, where 292 devices were bricked for every billion US$ of GDP. 
Assuming a nominal cost of $100 per bricked/hacked device then the 
335,276 devices that were affected in Mexico represented a total of 
$34M in damages, which is a paltry figure compared to other costly 
problems in the country. By comparison, the country-wide cost of fuel 
theft to Pemex (the state-controlled oil firm) amounts to more than 30bn 
pesos ($1.6bn) a year. As such it's not clear that even attempts to 
repatriate some of the IoT cost back to these countries (through projects 
like Internet Chemotherapy) can force much change.

The country of Vietnam may present an interesting opportunity, however.
This country is an interesting outlier in that it appears to have been a 
significant hoster of vulnerable IoT devices (and correspondingly the 
bricking cost relative to GDP was also higher). It's likely that this 
is an effect of the country's very rapid growth over the past 20 years.
Vietnam's need to modernize its infrastructure has outpaced Internet 
safety considerations and the availability of know-how. I encourage 
security researchers to strike a dialogue with their Vietnamese 
counterparts as this could even be an interesting jurisdiction for 
minimum IoT safety standards (large growing market, comparatively big 
vulnerability costs, clear argument for why improvement is needed for 
Vietnam to retain is competetiveness in the global economy). As a major 
growing market for IoT devices any minimum safety standards defined
here would have to be observed by most low-end device manufacturers.


--[ 6 - Conspiracy theories and other whacky thoughts

Time for us to jump into more politically charged territory. Let's take 
one more look at our bricking count Top 10 and consider what it might 
tell us about the current state of things:

                                        Hard          Soft   
 #  Country             Total Secured  Brick  Mixed  Brick    SOAP Miniml

  1. India            3697911   22832 302089 153977 887503 2295780  35730
  2. China            1531963    3813 365500  91680 595120  382841  93009
  3. Brazil           1233109  221148 305445  53285 148300  499693   5238
  4. Algeria          1185932       0    352    889   1471 1183220      0
  5. Russia           1177883   10882 837231  35069  43347  250783    571
  6. Iran              859081   11822  63836  11550  28415  714535  28923
  7. Pakistan          737693  225440 155731   1511 196278  157458   1275
  8. Tunisia           728916       5  43795   1174   3121  680816      5
  9. Vietnam           575728     773 211195 156768  99992  103062   3938
 10. Indonesia         555242    6295  31147  63918  10667  443031    184

One of my going 'conspiracy theories' about the growing IoT problem is 
that perhaps it's not happening purely by accident. Sure, many 
manufacturers design their stacks from scratch and undoubtedly make 
mistakes (and perhaps skip security QA altogether in their rush to get 
the product to market). Yet at the same time you have to ask yourself who 
benefits from there being a large number of easily exploited devices 
available in different countries? For example, we know that even US 
device maker Cisco Systems has been caught hiding undocumented backdoor 
accounts in its devices at least 4 times just this year, and Chinese 
manufacturers are equally (if not more) notorious for including 
undocumented backdoors in their products. Can anyone seriously believe 
that Cisco (founded in 1984 and a core routing technology specialist) 
would suddenly forget how to design secure products? How likely is it 
that they'd make amateur mistakes (such as CVE-2018-0329) which are in 
line with the typical blunders made by IoT startups with no understanding 
of security considerations? 

Could not the new IoT 'security problem' which has suddenly started to
afflict even the most experienced device manufacturers be a convenient
method of facilitating industrial (and other) espionage in the 21st
century? As the primary manufacturing powers and the Western countries
are relatively unaffected by the devices (both relative to sizes of their
economies and Internet populations) there's probably no genuine interest 
in clamping down on them at least until there's a cyber 9/11 equivalent 
which finally grabs the general population's attention. The fact that 
countries like Russia and Iran were particularly affected by vulnerable 
devices could have also been convenient to some of the other players in 
the arena.

It should also be evident that given enough will the US government could
significantly clamp down on the IoT problem even today. If you've been 
following the US Department of Justice's recent fight with Chinese 
cellphone maker ZTE you'll understand how the manufacturer is within
reach of our government in spite of it being located overseas. Even if 
an IoT manufacturer were completely unaffected by direct component 
sales bans there would still be indirect avenues for targeting negligent 
manufacturers and theirs assets. 

Here are some of my speculative thoughts of why the IoT problem was (and
still is) the way it was:

* The costs of the DDoS attacks against Western ISPs and institutions
  haven't become high enough for the governments to significantly care
  about the issue yet. It may even be perceived as a benefit that the 
  likes of Akamai are forced to harden their infrastructure against 
  larger theoretical saturation attack sizes. 

* The cost of the DDoS attacks are probably also not significant enough
  to cast a shadow over the lucrative component manufacturing trade by 
  the likes of Broadcom and Qualcomm, whose stacks are commonly used in
  IoT devices. Our government won't risk a trade war over the issue.

* In a relative sense (vs sizes of economies and populations) the IoT 
  problem isn't a Western problem nor is it a problem affecting device 
  manufacturing countries such as China or South Korea. This know-how
  (and jurisdictional) gap makes the problem harder to resolve through 
  direct and conventional means.

* The fact that there's been a large pool of insecure devices in many 
  regions of interest is almost certainly also viewed as a benefit by the 
  likes of CIA and NSA (and their foreign equivalents).

* Perhaps most controversially, it's also possible that some of the
  countries with large vulnerable device pools (like China, Russia and
  Iran) aren't particularly concerned about these devices being used
  for costly attacks against Western companies. This is not to say that
  the devices were left exposed deliberately, but simply that the 
  impetus for securing them may have been lacking.

* If there ever was a Cold War in Cyberspace, what might it look like?
  Wouldn't its first steps actually look a lot like what we've seen over 
  the past few years? 
  
Regardless of the true causes I find it unlikely that the IoT problem 
will be resolved anytime soon - the poorly secured devices are simply too 
valuable to various belligerents (for different reasons), and so you can 
expect to see a steady amount of amateurish security mistakes appearing 
even in IoT products made by experienced Western device manufacturers who 
clearly should've known better. And yes, it'll be a great time to be a 
legitimate security researcher (this is what you wanted to hear, right?).
Perhaps even I should start considering a career change. Anyone looking 
to hire a young new researcher with an implausible-looking resume and a 
muscle memory reflex for typing 'cat /dev/urandom >/dev/root &' at the 
sight of a bash shell prompt?


--[ 7 - Summary

One of the best things I ever did was to collect metrics and data about 
everything I did. This information allowed me to optimize and refine 
Internet Chemotherapy over its lifecycle. As a corollary my biggest
regret was in not collecting more data, especially for payloads 
like the SOAP ones where multiple attacks were attempted in one device 
interaction sequence. Due to this omission I've been forced to present 
incomplete (and probably excessively watered down) statistics about
campaigns such as the SOAP / TR069 World Tour.

Regardless of the uncertainties surrounding the SOAP data, perhaps 
ultimately the message of Part 8 is this: whether you believe that the 
total number of bricked devices in 2017 was 10 million, 20 million or 
even 30 million the IoT problem is far more serious than has been 
reported in public. There's no reason to believe that this problem will 
go away anytime soon, and the lack of any real actions by our governments 
to impose minimum safety standards on these devices may also suggest that 
the problem isn't purely accidental. If vulnerable IoT devices are 
the battlegrounds of a new Cyber Cold War, then in the end we may all 
become collateral damage in this new form of information warfare.

I'm sorry to leave you on such a bleak conspiracy theory-esque note, 
but in Part 9 we'll get to some more fun practical knowledge. 


--[ 8 - Addendum - Mitigation method: Contacting third world CERTs

Time for yet another late addition to Part 6's mitigation methods!

On May 10th 2018 the IT publication Bleeping Computer reported that a 
security researcher named Ankit Anubhav had found a set of passwordless 
routers (by local vendor Datacom) on Oi Brazil's network. My interest 
was piqued by the timeline in the article which I'll summarize here:

* 5/9 2018: Researcher Anubhav attempts to contact the large national 
            ISP called 'Oi' directly but is unable to escalate the 
            contact.
  
* 5/10 2018: Researcher Anubhav notifies CERT Brazil. 

I was cynical about the prospects of Anubhav's attempt to engage the
third world CERT, but I like to be open minded about these kinds of 
things. Who knows, maybe this time around CERT BR miraculously really 
would step in and work with Oi Brazil or the local vendor Datacom 
(www.datacom.ind.br) to fix the issue? As my botnet has been spot-
cleaning parts of the Oi Brazil network for a long time I figured it made 
sense to monitor this case a bit more closely (I'd notice a change pretty 
quickly if something actually happened). Also, if Anubhav (or anybody 
else) figured out a legit channel for getting Brazilian ISPs to fix their 
security issues it would be a huge win for the Internet in general (I 
would be the first in line with a long list of ongoing issues to report). 

Shodan.io specified the total number of passwordless Datacom routers as
4979. I suspected this was an overestimation on Shodan's part due to the 
volatility of third world networks and Shodan's excessively long data 
caching. In order to track the problem I wrote a quick payload simply to
fingerprint the Datacom routers and count the daily unique IPs. When
carrying out a full scan of the Oi IP space it looked like the actual
total of such routers was roughly 1000 (around 5/11 2018) and so I 
figured I'd give CERT BR a few weeks to work its magic and see what
happened. Let's see how that turned out:

 Fingerprinting payload              Factory reset payload
 (5/10 - 6/3 2018)                   (6/4 2018 - ??)

 Date           Hits                 Date           Hits
 
 2018-05-09        0                 2018-06-04      994 (full scan)
 2018-05-10      166                 2018-06-05      930 (full scan)
 2018-05-11      866 (full scan)     2018-06-06      532 (full scan)
 2018-05-12      424                 2018-06-07      433 (full scan)
 2018-05-13      258      {          2018-06-08      327 (full scan)
 2018-05-14      171                 2018-06-09      226 (full scan)
 2018-05-15      138      i          2018-06-10      200 (full scan)
 2018-05-16      156      n          2018-06-11      352 (full scan)
 2018-05-17      169      c          2018-06-12      281 (full scan)
 2018-05-18      169      i          2018-06-13      231 (full scan)
 2018-05-19      197      d          2018-06-14      235 (full scan)
 2018-05-20      241      e          2018-06-15      157 (full scan)
 2018-05-21      188      n          2018-06-16      111 (full scan)
 2018-05-22      191      t
 2018-05-23      190      a
 2018-05-24      207      l
 2018-05-25      187   
 2018-05-26      184      
 2018-05-27      172      h
 2018-05-28      194      i
 2018-05-29      223      t
 2018-05-30      203      s
 2018-05-31      202     
 2018-06-01      235      }
 2018-06-02      289
 2018-06-03      903 (full scan)


After my initial full scan of Brazilian IP space the occasional Datacom 
devices showed up in my regular spot-cleaning logs (normally my botnet 
only automatically concentrates on ca 20% of .br IPs as high priority
targets). Even these incidental Datacom hits in the spot-cleaning logs 
seemed relatively stable. At around 6/3 2018 I decided to re-audit 
the full Brazilian IP space and found that the number of exposed Datacom 
units was essentially unchanged. Based on this finding it seems clear 
that CERT BR hadn't done (or achieved) anything at all in spite of 
security researcher Anubhav's helpful vulnerability report.

On 6/4 I carried out some research on the Datacom devices to figure out
a payload to soft-brick these units and help reduce their total numbers. 
This actually turned out to be trickier than I had expected - there are 
two primary paths to soft-brick Datacom units but the telnetd that the 
devices ship with seems very finicky with its telnet control code 
requirements. In the end I settled for piping the bricking sequences 
through real telnet client binaries (which is of course a sketchy 
solution at scale, but probably fine for these kinds of small-scale 
cleanups). It took some iterations to get the one-way payload's timings 
right which is why there wasn't much change in the totals over the first 
24 hours, but by 6/6 there was already a noticeable decline. 

I'll let this cleanup continue and I'll amend the totals for the final
version of my whitepaper. There's already evidence of a few routers 
having been reconfigured and re-deployed after the initial factory reset
and I expect that these kinds of dynamics will continue for a while. 
Also a few of the Datacom routers seem resistant to the factory 
resetting sequences so I suspect a total cleanup won't be possible at 
least without spending more time on researching the units. Weekends also
seem to carry less activity. As my final whitepaper's sections are 
nearing completion this may also turn out to be my last (largely 
symbolic) new payload before I shut down my remaining botnet 
infrastructure (in some ways it's fitting that I'm ending the project in 
the same low-key manner that I started it a long time ago).

The lesson of the story will in any case be that contacting third world 
CERTs with a vulnerability report won't generally do much, even if they 
have spent some money on a credible-looking website. More often than not 
the CERT researchers are stuck dealing with very specific support cases 
within their funding arrangements, and in the worst case they're just 
token fronts for skimming government funds. I'm not certain which 
category CERT BR falls into, but I wouldn't be surprised if it turned out 
to be a little bit of both. Perhaps CERT BR could actually be short for 
Corrupt Earnings Receiving Tactic in Banana Republic?
